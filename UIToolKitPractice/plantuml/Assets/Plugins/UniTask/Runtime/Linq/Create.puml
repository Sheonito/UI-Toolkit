@startuml
class UniTaskAsyncEnumerable <<static>> <<partial>> {
    + {static} Create(create:Func<IAsyncWriter<T>, CancellationToken, UniTask>) : IUniTaskAsyncEnumerable<T>
}
interface "IAsyncWriter`1"<T> {
}
class "Create`1"<T> <<sealed>> {
    + Create(create:Func<IAsyncWriter<T>, CancellationToken, UniTask>)
    + GetAsyncEnumerator(cancellationToken:CancellationToken) : IUniTaskAsyncEnumerator<T>
}
class "IUniTaskAsyncEnumerable`1"<T> {
}
class _Create <<sealed>> {
    + _Create(create:Func<IAsyncWriter<T>, CancellationToken, UniTask>, cancellationToken:CancellationToken)
    + DisposeAsync() : UniTask
    + MoveNextAsync() : UniTask<bool>
    + SetResult(value:T) : void
}
class AsyncWriter <<sealed>> {
    + AsyncWriter(enumerator:_Create)
    + GetResult(token:short) : void
    + GetStatus(token:short) : UniTaskStatus
    + UnsafeGetStatus() : UniTaskStatus
    + OnCompleted(continuation:Action<object>, state:object, token:short) : void
    + YieldAsync(value:T) : UniTask
    + SignalWriter() : void
}
class "IUniTaskAsyncEnumerator`1"<T> {
}
"IUniTaskAsyncEnumerable`1" "<T>" <|-- "Create`1"
"Create`1" +-- _Create
MoveNextSource <|-- _Create
"IUniTaskAsyncEnumerator`1" "<T>" <|-- _Create
_Create --> "Current" T
"Create`1" +-- AsyncWriter
IUniTaskSource <|-- AsyncWriter
"IAsyncWriter`1" "<T>" <|-- AsyncWriter
@enduml
