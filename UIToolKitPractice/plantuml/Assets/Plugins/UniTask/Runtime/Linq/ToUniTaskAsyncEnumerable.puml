@startuml
class UniTaskAsyncEnumerable <<static>> <<partial>> {
    + {static} ToUniTaskAsyncEnumerable(source:IEnumerable<TSource>) : IUniTaskAsyncEnumerable<TSource>
    + {static} ToUniTaskAsyncEnumerable(source:Task<TSource>) : IUniTaskAsyncEnumerable<TSource>
    + {static} ToUniTaskAsyncEnumerable(source:UniTask<TSource>) : IUniTaskAsyncEnumerable<TSource>
    + {static} ToUniTaskAsyncEnumerable(source:IObservable<TSource>) : IUniTaskAsyncEnumerable<TSource>
}
class "ToUniTaskAsyncEnumerable`1"<T> {
    + ToUniTaskAsyncEnumerable(source:IEnumerable<T>)
    + GetAsyncEnumerator(cancellationToken:CancellationToken) : IUniTaskAsyncEnumerator<T>
}
class "ToUniTaskAsyncEnumerableTask`1"<T> {
    + ToUniTaskAsyncEnumerableTask(source:Task<T>)
    + GetAsyncEnumerator(cancellationToken:CancellationToken) : IUniTaskAsyncEnumerator<T>
}
class "ToUniTaskAsyncEnumerableUniTask`1"<T> {
    + ToUniTaskAsyncEnumerableUniTask(source:UniTask<T>)
    + GetAsyncEnumerator(cancellationToken:CancellationToken) : IUniTaskAsyncEnumerator<T>
}
class "ToUniTaskAsyncEnumerableObservable`1"<T> {
    + ToUniTaskAsyncEnumerableObservable(source:IObservable<T>)
    + GetAsyncEnumerator(cancellationToken:CancellationToken) : IUniTaskAsyncEnumerator<T>
}
class "IUniTaskAsyncEnumerable`1"<T> {
}
class _ToUniTaskAsyncEnumerable {
    + _ToUniTaskAsyncEnumerable(source:IEnumerable<T>, cancellationToken:CancellationToken)
    + MoveNextAsync() : UniTask<bool>
    + DisposeAsync() : UniTask
}
class _ToUniTaskAsyncEnumerableTask {
    + _ToUniTaskAsyncEnumerableTask(source:Task<T>, cancellationToken:CancellationToken)
    + <<async>> MoveNextAsync() : UniTask<bool>
    + DisposeAsync() : UniTask
}
class _ToUniTaskAsyncEnumerableUniTask {
    + _ToUniTaskAsyncEnumerableUniTask(source:UniTask<T>, cancellationToken:CancellationToken)
    + <<async>> MoveNextAsync() : UniTask<bool>
    + DisposeAsync() : UniTask
}
class _ToUniTaskAsyncEnumerableObservable {
    + _ToUniTaskAsyncEnumerableObservable(source:IObservable<T>, cancellationToken:CancellationToken)
    + MoveNextAsync() : UniTask<bool>
    + DisposeAsync() : UniTask
    + OnCompleted() : void
    + OnError(error:Exception) : void
    + OnNext(value:T) : void
}
class "IUniTaskAsyncEnumerator`1"<T> {
}
class "IObserver`1"<T> {
}
"IUniTaskAsyncEnumerable`1" "<T>" <|-- "ToUniTaskAsyncEnumerable`1"
"IUniTaskAsyncEnumerable`1" "<T>" <|-- "ToUniTaskAsyncEnumerableTask`1"
"IUniTaskAsyncEnumerable`1" "<T>" <|-- "ToUniTaskAsyncEnumerableUniTask`1"
"IUniTaskAsyncEnumerable`1" "<T>" <|-- "ToUniTaskAsyncEnumerableObservable`1"
"ToUniTaskAsyncEnumerable`1" +-- _ToUniTaskAsyncEnumerable
"IUniTaskAsyncEnumerator`1" "<T>" <|-- _ToUniTaskAsyncEnumerable
_ToUniTaskAsyncEnumerable --> "Current" T
"ToUniTaskAsyncEnumerableTask`1" +-- _ToUniTaskAsyncEnumerableTask
"IUniTaskAsyncEnumerator`1" "<T>" <|-- _ToUniTaskAsyncEnumerableTask
_ToUniTaskAsyncEnumerableTask --> "Current" T
"ToUniTaskAsyncEnumerableUniTask`1" +-- _ToUniTaskAsyncEnumerableUniTask
"IUniTaskAsyncEnumerator`1" "<T>" <|-- _ToUniTaskAsyncEnumerableUniTask
_ToUniTaskAsyncEnumerableUniTask --> "Current" T
"ToUniTaskAsyncEnumerableObservable`1" +-- _ToUniTaskAsyncEnumerableObservable
MoveNextSource <|-- _ToUniTaskAsyncEnumerableObservable
"IUniTaskAsyncEnumerator`1" "<T>" <|-- _ToUniTaskAsyncEnumerableObservable
"IObserver`1" "<T>" <|-- _ToUniTaskAsyncEnumerableObservable
_ToUniTaskAsyncEnumerableObservable --> "Current" T
@enduml
