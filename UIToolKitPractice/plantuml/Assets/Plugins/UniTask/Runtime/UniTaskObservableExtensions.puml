@startuml
class UniTaskObservableExtensions <<static>> {
    + {static} ToUniTask(source:IObservable<T>, useFirstValue:bool, cancellationToken:CancellationToken) : UniTask<T>
    + {static} ToObservable(task:UniTask<T>) : IObservable<T>
    + {static} ToObservable(task:UniTask) : IObservable<AsyncUnit>
}
class EmptyDisposable {
    + Dispose() : void
}
class SingleAssignmentDisposable <<sealed>> {
    + IsDisposed : bool <<get>>
    + Dispose() : void
}
class "AsyncSubject`1"<T> <<sealed>> {
    + Value : T <<get>>
    + HasObservers : bool <<get>>
    + IsCompleted : bool <<get>>
    + OnCompleted() : void
    + OnError(error:Exception) : void
    + OnNext(value:T) : void
    + Subscribe(observer:IObserver<T>) : IDisposable
    + Dispose() : void
}
class "ListObserver`1"<T> {
    + ListObserver(observers:ImmutableList<IObserver<T>>)
    + OnCompleted() : void
    + OnError(error:Exception) : void
    + OnNext(value:T) : void
}
class "EmptyObserver`1"<T> {
    + OnCompleted() : void
    + OnError(error:Exception) : void
    + OnNext(value:T) : void
}
class "ThrowObserver`1"<T> {
    + OnCompleted() : void
    + OnError(error:Exception) : void
    + OnNext(value:T) : void
}
class "DisposedObserver`1"<T> {
    + OnCompleted() : void
    + OnError(error:Exception) : void
    + OnNext(value:T) : void
}
class "ImmutableList`1"<T> {
    + ImmutableList(data:T[])
    + Add(value:T) : ImmutableList<T>
    + Remove(value:T) : ImmutableList<T>
    + IndexOf(value:T) : int
}
class "ToUniTaskObserver`1"<T> {
    + ToUniTaskObserver(promise:UniTaskCompletionSource<T>, disposable:SingleAssignmentDisposable, cancellationToken:CancellationToken)
    + OnNext(value:T) : void
    + OnError(error:Exception) : void
    + OnCompleted() : void
}
class "FirstValueToUniTaskObserver`1"<T> {
    + FirstValueToUniTaskObserver(promise:UniTaskCompletionSource<T>, disposable:SingleAssignmentDisposable, cancellationToken:CancellationToken)
    + OnNext(value:T) : void
    + OnError(error:Exception) : void
    + OnCompleted() : void
}
class "ReturnObservable`1"<T> {
    + ReturnObservable(value:T)
    + Subscribe(observer:IObserver<T>) : IDisposable
}
class "ThrowObservable`1"<T> {
    + ThrowObservable(value:Exception)
    + Subscribe(observer:IObserver<T>) : IDisposable
}
class "IObservable`1"<T> {
}
class "IObserver`1"<T> {
}
class Subscription {
    + Subscription(parent:AsyncSubject<T>, unsubscribeTarget:IObserver<T>)
    + Dispose() : void
}
IDisposable <|-- EmptyDisposable
EmptyDisposable o-> "Instance" EmptyDisposable
IDisposable <|-- SingleAssignmentDisposable
SingleAssignmentDisposable --> "Disposable" IDisposable
"IObservable`1" "<T>" <|-- "AsyncSubject`1"
"IObserver`1" "<T>" <|-- "AsyncSubject`1"
"IObserver`1" "<T>" <|-- "ListObserver`1"
"IObserver`1" "<T>" <|-- "EmptyObserver`1"
"EmptyObserver`1" o-> "Instance<T>" "EmptyObserver`1"
"IObserver`1" "<T>" <|-- "ThrowObserver`1"
"ThrowObserver`1" o-> "Instance<T>" "ThrowObserver`1"
"IObserver`1" "<T>" <|-- "DisposedObserver`1"
"DisposedObserver`1" o-> "Instance<T>" "DisposedObserver`1"
"ImmutableList`1" o-> "Empty<T>" "ImmutableList`1"
UniTaskObservableExtensions +-- "ToUniTaskObserver`1"
"IObserver`1" "<T>" <|-- "ToUniTaskObserver`1"
UniTaskObservableExtensions +-- "FirstValueToUniTaskObserver`1"
"IObserver`1" "<T>" <|-- "FirstValueToUniTaskObserver`1"
UniTaskObservableExtensions +-- "ReturnObservable`1"
"IObservable`1" "<T>" <|-- "ReturnObservable`1"
UniTaskObservableExtensions +-- "ThrowObservable`1"
"IObservable`1" "<T>" <|-- "ThrowObservable`1"
"AsyncSubject`1" +-- Subscription
IDisposable <|-- Subscription
@enduml
