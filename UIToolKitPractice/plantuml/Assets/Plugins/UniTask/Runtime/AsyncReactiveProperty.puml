@startuml
interface "IReadOnlyAsyncReactiveProperty`1"<T> {
}
interface "IAsyncReactiveProperty`1"<T> {
}
class "AsyncReactiveProperty`1"<T> {
    + Value : T <<get>> <<set>>
    + AsyncReactiveProperty(value:T)
    + WithoutCurrent() : IUniTaskAsyncEnumerable<T>
    + GetAsyncEnumerator(cancellationToken:CancellationToken) : IUniTaskAsyncEnumerator<T>
    + Dispose() : void
    + <<override>> ToString() : string
    + WaitAsync(cancellationToken:CancellationToken) : UniTask<T>
}
class "ReadOnlyAsyncReactiveProperty`1"<T> {
    + Value : T <<get>>
    + ReadOnlyAsyncReactiveProperty(initialValue:T, source:IUniTaskAsyncEnumerable<T>, cancellationToken:CancellationToken)
    + ReadOnlyAsyncReactiveProperty(source:IUniTaskAsyncEnumerable<T>, cancellationToken:CancellationToken)
    + WithoutCurrent() : IUniTaskAsyncEnumerable<T>
    + GetAsyncEnumerator(cancellationToken:CancellationToken) : IUniTaskAsyncEnumerator<T>
    + Dispose() : void
    + <<override>> ToString() : string
    + WaitAsync(cancellationToken:CancellationToken) : UniTask<T>
}
class StateExtensions <<static>> {
    + {static} ToReadOnlyAsyncReactiveProperty(source:IUniTaskAsyncEnumerable<T>, cancellationToken:CancellationToken) : ReadOnlyAsyncReactiveProperty<T>
    + {static} ToReadOnlyAsyncReactiveProperty(source:IUniTaskAsyncEnumerable<T>, initialValue:T, cancellationToken:CancellationToken) : ReadOnlyAsyncReactiveProperty<T>
}
class "IUniTaskAsyncEnumerable`1"<T> {
}
class WaitAsyncSource <<sealed>> {
    + {static} Create(parent:AsyncReactiveProperty<T>, cancellationToken:CancellationToken, token:short) : IUniTaskSource<T>
    + GetResult(token:short) : T
    + OnCompleted(continuation:Action<object>, state:object, token:short) : void
    + GetStatus(token:short) : UniTaskStatus
    + UnsafeGetStatus() : UniTaskStatus
    + OnCanceled(cancellationToken:CancellationToken) : void
    + OnCompleted() : void
    + OnError(ex:Exception) : void
    + OnNext(value:T) : void
}
class WithoutCurrentEnumerable <<sealed>> {
    + WithoutCurrentEnumerable(parent:AsyncReactiveProperty<T>)
    + GetAsyncEnumerator(cancellationToken:CancellationToken) : IUniTaskAsyncEnumerator<T>
}
class Enumerator <<sealed>> {
    + Enumerator(parent:AsyncReactiveProperty<T>, cancellationToken:CancellationToken, publishCurrentValue:bool)
    + MoveNextAsync() : UniTask<bool>
    + DisposeAsync() : UniTask
    + OnNext(value:T) : void
    + OnCanceled(cancellationToken:CancellationToken) : void
    + OnCompleted() : void
    + OnError(ex:Exception) : void
}
class WaitAsyncSource <<sealed>> {
    + {static} Create(parent:ReadOnlyAsyncReactiveProperty<T>, cancellationToken:CancellationToken, token:short) : IUniTaskSource<T>
    + GetResult(token:short) : T
    + OnCompleted(continuation:Action<object>, state:object, token:short) : void
    + GetStatus(token:short) : UniTaskStatus
    + UnsafeGetStatus() : UniTaskStatus
    + OnCanceled(cancellationToken:CancellationToken) : void
    + OnCompleted() : void
    + OnError(ex:Exception) : void
    + OnNext(value:T) : void
}
class WithoutCurrentEnumerable <<sealed>> {
    + WithoutCurrentEnumerable(parent:ReadOnlyAsyncReactiveProperty<T>)
    + GetAsyncEnumerator(cancellationToken:CancellationToken) : IUniTaskAsyncEnumerator<T>
}
class Enumerator <<sealed>> {
    + Enumerator(parent:ReadOnlyAsyncReactiveProperty<T>, cancellationToken:CancellationToken, publishCurrentValue:bool)
    + MoveNextAsync() : UniTask<bool>
    + DisposeAsync() : UniTask
    + OnNext(value:T) : void
    + OnCanceled(cancellationToken:CancellationToken) : void
    + OnCompleted() : void
    + OnError(ex:Exception) : void
}
class "IUniTaskSource`1"<T> {
}
class "ITriggerHandler`1"<T> {
}
class "ITaskPoolNode`1"<T> {
}
class "IUniTaskAsyncEnumerator`1"<T> {
}
"IUniTaskAsyncEnumerable`1" "<T>" <|-- "IReadOnlyAsyncReactiveProperty`1"
"IReadOnlyAsyncReactiveProperty`1" "<T>" <|-- "IAsyncReactiveProperty`1"
"IAsyncReactiveProperty`1" "<T>" <|-- "AsyncReactiveProperty`1"
IDisposable <|-- "AsyncReactiveProperty`1"
"IReadOnlyAsyncReactiveProperty`1" "<T>" <|-- "ReadOnlyAsyncReactiveProperty`1"
IDisposable <|-- "ReadOnlyAsyncReactiveProperty`1"
"AsyncReactiveProperty`1" +-- WaitAsyncSource
"IUniTaskSource`1" "<T>" <|-- WaitAsyncSource
"ITriggerHandler`1" "<T>" <|-- WaitAsyncSource
"ITaskPoolNode`1" "<WaitAsyncSource>" <|-- WaitAsyncSource
"AsyncReactiveProperty`1" +-- WithoutCurrentEnumerable
"IUniTaskAsyncEnumerable`1" "<T>" <|-- WithoutCurrentEnumerable
"AsyncReactiveProperty`1" +-- Enumerator
MoveNextSource <|-- Enumerator
"IUniTaskAsyncEnumerator`1" "<T>" <|-- Enumerator
"ITriggerHandler`1" "<T>" <|-- Enumerator
Enumerator --> "Current" T
"ReadOnlyAsyncReactiveProperty`1" +-- WaitAsyncSource
"IUniTaskSource`1" "<T>" <|-- WaitAsyncSource
"ITriggerHandler`1" "<T>" <|-- WaitAsyncSource
"ITaskPoolNode`1" "<WaitAsyncSource>" <|-- WaitAsyncSource
"ReadOnlyAsyncReactiveProperty`1" +-- WithoutCurrentEnumerable
"IUniTaskAsyncEnumerable`1" "<T>" <|-- WithoutCurrentEnumerable
"ReadOnlyAsyncReactiveProperty`1" +-- Enumerator
MoveNextSource <|-- Enumerator
"IUniTaskAsyncEnumerator`1" "<T>" <|-- Enumerator
"ITriggerHandler`1" "<T>" <|-- Enumerator
Enumerator --> "Current" T
@enduml
