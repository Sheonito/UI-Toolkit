<?xml version="1.0" encoding="UTF-8" standalone="no"?><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" contentStyleType="text/css" height="687px" preserveAspectRatio="none" style="width:661px;height:687px;background:#000000;" version="1.1" viewBox="0 0 661 687" width="661px" zoomAndPan="magnify"><defs/><g><rect fill="#00010F" height="1" style="stroke:#00010F;stroke-width:1.0;" width="1" x="0" y="0"/><text fill="#33FF02" font-family="sans-serif" font-size="12" font-style="italic" font-weight="bold" lengthAdjust="spacing" textLength="107" x="5" y="17">PlantUML 1.2022.7</text><text fill="#33FF02" font-family="sans-serif" font-size="12" font-style="italic" font-weight="bold" lengthAdjust="spacing" textLength="3" x="5" y="33.4824"> </text><text fill="#33FF02" font-family="sans-serif" font-size="12" font-style="italic" font-weight="bold" lengthAdjust="spacing" textLength="337" x="5" y="49.9648">&lt;b&gt;This version of PlantUML is 339 days old, so you should</text><text fill="#33FF02" font-family="sans-serif" font-size="12" font-style="italic" font-weight="bold" lengthAdjust="spacing" textLength="338" x="5" y="66.4473">&lt;b&gt;consider upgrading from https://plantuml.com/download</text><rect fill="#33FF02" height="24.2295" style="stroke:#33FF02;stroke-width:1.0;" width="528" x="5" y="78.9297"/><text fill="#000000" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacing" textLength="163" x="6" y="93.9297">[From string (line 431) ]</text><text fill="#33FF02" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacing" textLength="4" x="5" y="117.1592"> </text><text fill="#33FF02" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacing" textLength="71" x="5" y="136.3887">@startuml</text><text fill="#33FF02" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacing" textLength="254" x="5" y="155.6182">!include .\\ClassLibrary1\Class1.puml</text><text fill="#33FF02" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacing" textLength="95" x="5" y="174.8477">class Class1 {</text><text fill="#33FF02" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacing" textLength="5" x="5" y="194.0771">}</text><text fill="#33FF02" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacing" textLength="317" x="5" y="213.3066">!include .\\Assets\Scripts\NicknamePage.puml</text><text fill="#33FF02" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacing" textLength="12" x="5" y="232.5361">...</text><text fill="#33FF02" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacing" textLength="176" x="5" y="251.7656">... ( skipping 17024 lines )</text><text fill="#33FF02" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacing" textLength="12" x="5" y="270.9951">...</text><text fill="#33FF02" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacing" textLength="358" x="5" y="290.2246">IPointerEnterHandler &lt;|-- AsyncPointerEnterTrigger</text><text fill="#33FF02" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacing" textLength="400" x="5" y="309.4541">IAsyncOnPointerExitHandler &lt;|-- "AsyncTriggerHandler`1"</text><text fill="#33FF02" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacing" textLength="509" x="5" y="328.6836">"AsyncTriggerBase`1" "&lt;PointerEventData&gt;" &lt;|-- AsyncPointerExitTrigger</text><text fill="#33FF02" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacing" textLength="334" x="5" y="347.9131">IPointerExitHandler &lt;|-- AsyncPointerExitTrigger</text><text fill="#33FF02" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacing" textLength="393" x="5" y="367.1426">IAsyncOnPointerUpHandler &lt;|-- "AsyncTriggerHandler`1"</text><text fill="#33FF02" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacing" textLength="502" x="5" y="386.3721">"AsyncTriggerBase`1" "&lt;PointerEventData&gt;" &lt;|-- AsyncPointerUpTrigger</text><text fill="#33FF02" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacing" textLength="320" x="5" y="405.6016">IPointerUpHandler &lt;|-- AsyncPointerUpTrigger</text><text fill="#33FF02" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacing" textLength="363" x="5" y="424.8311">IAsyncOnScrollHandler &lt;|-- "AsyncTriggerHandler`1"</text><text fill="#33FF02" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacing" textLength="472" x="5" y="444.0605">"AsyncTriggerBase`1" "&lt;PointerEventData&gt;" &lt;|-- AsyncScrollTrigger</text><text fill="#33FF02" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacing" textLength="260" x="5" y="463.29">IScrollHandler &lt;|-- AsyncScrollTrigger</text><text fill="#33FF02" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacing" textLength="367" x="5" y="482.5195">IAsyncOnSelectHandler &lt;|-- "AsyncTriggerHandler`1"</text><text fill="#33FF02" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacing" textLength="460" x="5" y="501.749">"AsyncTriggerBase`1" "&lt;BaseEventData&gt;" &lt;|-- AsyncSelectTrigger</text><text fill="#33FF02" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacing" textLength="268" x="5" y="520.9785">ISelectHandler &lt;|-- AsyncSelectTrigger</text><text fill="#33FF02" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacing" textLength="371" x="5" y="540.208">IAsyncOnSubmitHandler &lt;|-- "AsyncTriggerHandler`1"</text><text fill="#33FF02" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacing" textLength="464" x="5" y="559.4375">"AsyncTriggerBase`1" "&lt;BaseEventData&gt;" &lt;|-- AsyncSubmitTrigger</text><text fill="#33FF02" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacing" textLength="276" x="5" y="578.667">ISubmitHandler &lt;|-- AsyncSubmitTrigger</text><text fill="#33FF02" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacing" textLength="435" x="5" y="597.8965">IAsyncOnUpdateSelectedHandler &lt;|-- "AsyncTriggerHandler`1"</text><text fill="#33FF02" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacing" textLength="528" x="5" y="617.126">"AsyncTriggerBase`1" "&lt;BaseEventData&gt;" &lt;|-- AsyncUpdateSelectedTrigger</text><text fill="#33FF02" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacing" textLength="404" x="5" y="636.3555">IUpdateSelectedHandler &lt;|-- AsyncUpdateSelectedTrigger</text><text fill="#33FF02" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacing" text-decoration="wavy underline" textLength="597" x="5" y="655.585">!include .\\Library\PackageCache\com.unity.burst@1.8.4\Runtime\bee~\Burst.bee.puml</text><text fill="#FF0000" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacing" textLength="645" x="9" y="674.8145">cannot include .\\Library\PackageCache\com.unity.burst@1.8.4\Runtime\bee~\Burst.bee.puml</text><!--MD5=[aaa34c5e8723a10b1873d28dc17ccc07]

@startuml
class Class1 {
}
class NicknamePage {
}
MonoBehaviour <|- - NicknamePage
class SplitterGUILayout <<static>> {
    + {static} CreateSplitterState(relativeSizes:float[], minSizes:int[], maxSizes:int[]) : object
    + {static} BeginVerticalSplit(splitterState:object, options:GUILayoutOption[]) : void
    + {static} EndVerticalSplit() : void
}
class UniTaskTrackerViewItem {
    + TaskType : string <<get>> <<set>>
    + Elapsed : string <<get>> <<set>>
    + Status : string <<get>> <<set>>
    + Position : string <<get>> <<set>>
    + PositionFirstLine : string <<get>>
    + UniTaskTrackerViewItem(id:int)
}
class UniTaskTrackerTreeView {
    + UniTaskTrackerTreeView()
    + ReloadAndSort() : void
}
class "IReadOnlyList`1"<T> {
}
TreeViewItem <|- - UniTaskTrackerViewItem
TreeView <|- - UniTaskTrackerTreeView
UniTaskTrackerTreeView - -> "CurrentBindingItems<TreeViewItem>" "IReadOnlyList`1"
class UniTaskTrackerWindow {
    + {static} OpenWindow() : void
    + {static} EnableAutoReload : bool <<get>>
    + {static} EnableTracking : bool <<get>>
    + {static} EnableStackTrace : bool <<get>>
}
EditorWindow <|- - UniTaskTrackerWindow
class AsyncLazy {
    + AsyncLazy(taskFactory:Func<UniTask>)
    + GetAwaiter() : UniTask.Awaiter
}
class "AsyncLazy`1"<T> {
    + AsyncLazy(taskFactory:Func<UniTask<T>>)
    + GetAwaiter() : UniTask<T>.Awaiter
}
class "UniTask`1"<T> {
}
AsyncLazy - -> "Task" UniTask
"AsyncLazy`1" - -> "Task<T>" "UniTask`1"
interface "IReadOnlyAsyncReactiveProperty`1"<T> {
}
interface "IAsyncReactiveProperty`1"<T> {
}
class "AsyncReactiveProperty`1"<T> {
    + Value : T <<get>> <<set>>
    + AsyncReactiveProperty(value:T)
    + WithoutCurrent() : IUniTaskAsyncEnumerable<T>
    + GetAsyncEnumerator(cancellationToken:CancellationToken) : IUniTaskAsyncEnumerator<T>
    + Dispose() : void
    + <<override>> ToString() : string
    + WaitAsync(cancellationToken:CancellationToken) : UniTask<T>
}
class "ReadOnlyAsyncReactiveProperty`1"<T> {
    + Value : T <<get>>
    + ReadOnlyAsyncReactiveProperty(initialValue:T, source:IUniTaskAsyncEnumerable<T>, cancellationToken:CancellationToken)
    + ReadOnlyAsyncReactiveProperty(source:IUniTaskAsyncEnumerable<T>, cancellationToken:CancellationToken)
    + WithoutCurrent() : IUniTaskAsyncEnumerable<T>
    + GetAsyncEnumerator(cancellationToken:CancellationToken) : IUniTaskAsyncEnumerator<T>
    + Dispose() : void
    + <<override>> ToString() : string
    + WaitAsync(cancellationToken:CancellationToken) : UniTask<T>
}
class StateExtensions <<static>> {
    + {static} ToReadOnlyAsyncReactiveProperty(source:IUniTaskAsyncEnumerable<T>, cancellationToken:CancellationToken) : ReadOnlyAsyncReactiveProperty<T>
    + {static} ToReadOnlyAsyncReactiveProperty(source:IUniTaskAsyncEnumerable<T>, initialValue:T, cancellationToken:CancellationToken) : ReadOnlyAsyncReactiveProperty<T>
}
class "IUniTaskAsyncEnumerable`1"<T> {
}
class WaitAsyncSource <<sealed>> {
    + {static} Create(parent:AsyncReactiveProperty<T>, cancellationToken:CancellationToken, token:short) : IUniTaskSource<T>
    + GetResult(token:short) : T
    + OnCompleted(continuation:Action<object>, state:object, token:short) : void
    + GetStatus(token:short) : UniTaskStatus
    + UnsafeGetStatus() : UniTaskStatus
    + OnCanceled(cancellationToken:CancellationToken) : void
    + OnCompleted() : void
    + OnError(ex:Exception) : void
    + OnNext(value:T) : void
}
class WithoutCurrentEnumerable <<sealed>> {
    + WithoutCurrentEnumerable(parent:AsyncReactiveProperty<T>)
    + GetAsyncEnumerator(cancellationToken:CancellationToken) : IUniTaskAsyncEnumerator<T>
}
class Enumerator <<sealed>> {
    + Enumerator(parent:AsyncReactiveProperty<T>, cancellationToken:CancellationToken, publishCurrentValue:bool)
    + MoveNextAsync() : UniTask<bool>
    + DisposeAsync() : UniTask
    + OnNext(value:T) : void
    + OnCanceled(cancellationToken:CancellationToken) : void
    + OnCompleted() : void
    + OnError(ex:Exception) : void
}
class WaitAsyncSource <<sealed>> {
    + {static} Create(parent:ReadOnlyAsyncReactiveProperty<T>, cancellationToken:CancellationToken, token:short) : IUniTaskSource<T>
    + GetResult(token:short) : T
    + OnCompleted(continuation:Action<object>, state:object, token:short) : void
    + GetStatus(token:short) : UniTaskStatus
    + UnsafeGetStatus() : UniTaskStatus
    + OnCanceled(cancellationToken:CancellationToken) : void
    + OnCompleted() : void
    + OnError(ex:Exception) : void
    + OnNext(value:T) : void
}
class WithoutCurrentEnumerable <<sealed>> {
    + WithoutCurrentEnumerable(parent:ReadOnlyAsyncReactiveProperty<T>)
    + GetAsyncEnumerator(cancellationToken:CancellationToken) : IUniTaskAsyncEnumerator<T>
}
class Enumerator <<sealed>> {
    + Enumerator(parent:ReadOnlyAsyncReactiveProperty<T>, cancellationToken:CancellationToken, publishCurrentValue:bool)
    + MoveNextAsync() : UniTask<bool>
    + DisposeAsync() : UniTask
    + OnNext(value:T) : void
    + OnCanceled(cancellationToken:CancellationToken) : void
    + OnCompleted() : void
    + OnError(ex:Exception) : void
}
class "IUniTaskSource`1"<T> {
}
class "ITriggerHandler`1"<T> {
}
class "ITaskPoolNode`1"<T> {
}
class "IUniTaskAsyncEnumerator`1"<T> {
}
"IUniTaskAsyncEnumerable`1" "<T>" <|- - "IReadOnlyAsyncReactiveProperty`1"
"IReadOnlyAsyncReactiveProperty`1" "<T>" <|- - "IAsyncReactiveProperty`1"
"IAsyncReactiveProperty`1" "<T>" <|- - "AsyncReactiveProperty`1"
IDisposable <|- - "AsyncReactiveProperty`1"
"IReadOnlyAsyncReactiveProperty`1" "<T>" <|- - "ReadOnlyAsyncReactiveProperty`1"
IDisposable <|- - "ReadOnlyAsyncReactiveProperty`1"
"AsyncReactiveProperty`1" +- - WaitAsyncSource
"IUniTaskSource`1" "<T>" <|- - WaitAsyncSource
"ITriggerHandler`1" "<T>" <|- - WaitAsyncSource
"ITaskPoolNode`1" "<WaitAsyncSource>" <|- - WaitAsyncSource
"AsyncReactiveProperty`1" +- - WithoutCurrentEnumerable
"IUniTaskAsyncEnumerable`1" "<T>" <|- - WithoutCurrentEnumerable
"AsyncReactiveProperty`1" +- - Enumerator
MoveNextSource <|- - Enumerator
"IUniTaskAsyncEnumerator`1" "<T>" <|- - Enumerator
"ITriggerHandler`1" "<T>" <|- - Enumerator
Enumerator - -> "Current" T
"ReadOnlyAsyncReactiveProperty`1" +- - WaitAsyncSource
"IUniTaskSource`1" "<T>" <|- - WaitAsyncSource
"ITriggerHandler`1" "<T>" <|- - WaitAsyncSource
"ITaskPoolNode`1" "<WaitAsyncSource>" <|- - WaitAsyncSource
"ReadOnlyAsyncReactiveProperty`1" +- - WithoutCurrentEnumerable
"IUniTaskAsyncEnumerable`1" "<T>" <|- - WithoutCurrentEnumerable
"ReadOnlyAsyncReactiveProperty`1" +- - Enumerator
MoveNextSource <|- - Enumerator
"IUniTaskAsyncEnumerator`1" "<T>" <|- - Enumerator
"ITriggerHandler`1" "<T>" <|- - Enumerator
Enumerator - -> "Current" T
class AsyncUnit <<struct>> {
    + <<override>> GetHashCode() : int
    + Equals(other:AsyncUnit) : bool
    + <<override>> ToString() : string
}
class "IEquatable`1"<T> {
}
"IEquatable`1" "<AsyncUnit>" <|- - AsyncUnit
AsyncUnit o-> "Default" AsyncUnit
class CancellationTokenEqualityComparer {
    + Equals(x:CancellationToken, y:CancellationToken) : bool
    + GetHashCode(obj:CancellationToken) : int
}
class "IEqualityComparer`1"<T> {
}
"IEqualityComparer`1" "<CancellationToken>" <|- - CancellationTokenEqualityComparer
CancellationTokenEqualityComparer o-> "Default<CancellationToken>" "IEqualityComparer`1"
class CancellationTokenExtensions <<static>> {
    + {static} ToCancellationToken(task:UniTask) : CancellationToken
    + {static} ToCancellationToken(task:UniTask, linkToken:CancellationToken) : CancellationToken
    + {static} ToCancellationToken(task:UniTask<T>) : CancellationToken
    + {static} ToCancellationToken(task:UniTask<T>, linkToken:CancellationToken) : CancellationToken
    + {static} ToUniTask(cancellationToken:CancellationToken) : (UniTask, CancellationTokenRegistration)
    + {static} WaitUntilCanceled(cancellationToken:CancellationToken) : CancellationTokenAwaitable
    + {static} RegisterWithoutCaptureExecutionContext(cancellationToken:CancellationToken, callback:Action) : CancellationTokenRegistration
    + {static} RegisterWithoutCaptureExecutionContext(cancellationToken:CancellationToken, callback:Action<object>, state:object) : CancellationTokenRegistration
    + {static} AddTo(disposable:IDisposable, cancellationToken:CancellationToken) : CancellationTokenRegistration
}
class CancellationTokenAwaitable <<struct>> {
    + CancellationTokenAwaitable(cancellationToken:CancellationToken)
    + GetAwaiter() : Awaiter
}
class Awaiter <<struct>> {
    + Awaiter(cancellationToken:CancellationToken)
    + IsCompleted : bool <<get>>
    + GetResult() : void
    + OnCompleted(continuation:Action) : void
    + UnsafeOnCompleted(continuation:Action) : void
}
CancellationTokenAwaitable +- - Awaiter
ICriticalNotifyCompletion <|- - Awaiter
class CancellationTokenSourceExtensions <<static>> <<partial>> {
    + {static} CancelAfterSlim(cts:CancellationTokenSource, millisecondsDelay:int, delayType:DelayType, delayTiming:PlayerLoopTiming) : IDisposable
    + {static} CancelAfterSlim(cts:CancellationTokenSource, delayTimeSpan:TimeSpan, delayType:DelayType, delayTiming:PlayerLoopTiming) : IDisposable
    + {static} RegisterRaiseCancelOnDestroy(cts:CancellationTokenSource, component:Component) : void
    + {static} RegisterRaiseCancelOnDestroy(cts:CancellationTokenSource, gameObject:GameObject) : void
}
class Channel <<static>> {
    + {static} CreateSingleConsumerUnbounded() : Channel<T>
}
abstract class "Channel`2"<TWrite,TRead> {
}
abstract class "Channel`1"<T> {
}
abstract class "ChannelReader`1"<T> {
    + {abstract} TryRead(item:T) : bool
    + {abstract} WaitToReadAsync(cancellationToken:CancellationToken) : UniTask<bool>
    + <<virtual>> ReadAsync(cancellationToken:CancellationToken) : UniTask<T>
    + {abstract} ReadAllAsync(cancellationToken:CancellationToken) : IUniTaskAsyncEnumerable<T>
}
abstract class "ChannelWriter`1"<T> {
    + {abstract} TryWrite(item:T) : bool
    + {abstract} TryComplete(error:Exception) : bool
    + Complete(error:Exception) : void
}
class ChannelClosedException <<partial>> {
    + ChannelClosedException()
    + ChannelClosedException(message:string)
    + ChannelClosedException(innerException:Exception)
    + ChannelClosedException(message:string, innerException:Exception)
}
class "SingleConsumerUnboundedChannel`1"<T> {
    + SingleConsumerUnboundedChannel()
}
class SingleConsumerUnboundedChannelWriter <<sealed>> {
    + SingleConsumerUnboundedChannelWriter(parent:SingleConsumerUnboundedChannel<T>)
    + <<override>> TryWrite(item:T) : bool
    + <<override>> TryComplete(error:Exception) : bool
}
class SingleConsumerUnboundedChannelReader <<sealed>> {
    + SingleConsumerUnboundedChannelReader(parent:SingleConsumerUnboundedChannel<T>)
    + <<override>> TryRead(item:T) : bool
    + <<override>> WaitToReadAsync(cancellationToken:CancellationToken) : UniTask<bool>
    + SingalContinuation() : void
    + SingalCancellation(cancellationToken:CancellationToken) : void
    + SingalCompleted(error:Exception) : void
    + <<override>> ReadAllAsync(cancellationToken:CancellationToken) : IUniTaskAsyncEnumerable<T>
}
class "IUniTaskSource`1"<T> {
}
class ReadAllAsyncEnumerable <<sealed>> {
    + ReadAllAsyncEnumerable(parent:SingleConsumerUnboundedChannelReader, cancellationToken:CancellationToken)
    + GetAsyncEnumerator(cancellationToken:CancellationToken) : IUniTaskAsyncEnumerator<T>
    + MoveNextAsync() : UniTask<bool>
    + DisposeAsync() : UniTask
}
class "IUniTaskAsyncEnumerable`1"<T> {
}
class "IUniTaskAsyncEnumerator`1"<T> {
}
"Channel`2" - -> "Reader<TRead>" "ChannelReader`1"
"Channel`2" - -> "Writer<TWrite>" "ChannelWriter`1"
"Channel`2" "<T,T>" <|- - "Channel`1"
"ChannelReader`1" - -> "Completion" UniTask
InvalidOperationException <|- - ChannelClosedException
"Channel`1" "<T>" <|- - "SingleConsumerUnboundedChannel`1"
"SingleConsumerUnboundedChannel`1" +- - SingleConsumerUnboundedChannelWriter
"ChannelWriter`1" "<T>" <|- - SingleConsumerUnboundedChannelWriter
"SingleConsumerUnboundedChannel`1" +- - SingleConsumerUnboundedChannelReader
"ChannelReader`1" "<T>" <|- - SingleConsumerUnboundedChannelReader
"IUniTaskSource`1" "<bool>" <|- - SingleConsumerUnboundedChannelReader
SingleConsumerUnboundedChannelReader - -> "Completion" UniTask
SingleConsumerUnboundedChannelReader +- - ReadAllAsyncEnumerable
"IUniTaskAsyncEnumerable`1" "<T>" <|- - ReadAllAsyncEnumerable
"IUniTaskAsyncEnumerator`1" "<T>" <|- - ReadAllAsyncEnumerable
ReadAllAsyncEnumerable - -> "Current" T
class EnumerableAsyncExtensions <<static>> {
    + {static} Select(source:IEnumerable<T>, selector:Func<T, UniTask>) : IEnumerable<UniTask>
    + {static} Select(source:IEnumerable<T>, selector:Func<T, UniTask<TR>>) : IEnumerable<UniTask<TR>>
    + {static} Select(source:IEnumerable<T>, selector:Func<T, int, UniTask>) : IEnumerable<UniTask>
    + {static} Select(source:IEnumerable<T>, selector:Func<T, int, UniTask<TR>>) : IEnumerable<UniTask<TR>>
}
class EnumeratorAsyncExtensions <<static>> {
    + {static} GetAwaiter(enumerator:T) : UniTask.Awaiter
    + {static} WithCancellation(enumerator:IEnumerator, cancellationToken:CancellationToken) : UniTask
    + {static} ToUniTask(enumerator:IEnumerator, timing:PlayerLoopTiming, cancellationToken:CancellationToken) : UniTask
    + {static} ToUniTask(enumerator:IEnumerator, coroutineRunner:MonoBehaviour) : UniTask
}
class EnumeratorPromise <<sealed>> {
    + {static} Create(innerEnumerator:IEnumerator, timing:PlayerLoopTiming, cancellationToken:CancellationToken, token:short) : IUniTaskSource
    + GetResult(token:short) : void
    + GetStatus(token:short) : UniTaskStatus
    + UnsafeGetStatus() : UniTaskStatus
    + OnCompleted(continuation:Action<object>, state:object, token:short) : void
    + MoveNext() : bool
}
class "ITaskPoolNode`1"<T> {
}
EnumeratorAsyncExtensions +- - EnumeratorPromise
IUniTaskSource <|- - EnumeratorPromise
IPlayerLoopItem <|- - EnumeratorPromise
"ITaskPoolNode`1" "<EnumeratorPromise>" <|- - EnumeratorPromise
class ExceptionExtensions <<static>> {
    + {static} IsOperationCanceledException(exception:Exception) : bool
}
interface "IUniTaskAsyncEnumerable`1"<out T> {
}
interface "IUniTaskAsyncEnumerator`1"<out T> {
}
interface IUniTaskAsyncDisposable {
}
interface "IUniTaskOrderedAsyncEnumerable`1"<TElement> {
}
interface "IConnectableUniTaskAsyncEnumerable`1"<out T> {
}
class UniTaskAsyncEnumerableExtensions <<static>> {
    + {static} WithCancellation(source:IUniTaskAsyncEnumerable<T>, cancellationToken:CancellationToken) : UniTaskCancelableAsyncEnumerable<T>
}
class "UniTaskCancelableAsyncEnumerable`1"<T> <<struct>> {
    + GetAsyncEnumerator() : Enumerator
}
class Enumerator <<struct>> {
    + MoveNextAsync() : UniTask<bool>
    + DisposeAsync() : UniTask
}
IUniTaskAsyncDisposable <|- - "IUniTaskAsyncEnumerator`1"
"IUniTaskAsyncEnumerable`1" "<TElement>" <|- - "IUniTaskOrderedAsyncEnumerable`1"
"IUniTaskAsyncEnumerable`1" "<T>" <|- - "IConnectableUniTaskAsyncEnumerable`1"
"UniTaskCancelableAsyncEnumerable`1" +- - Enumerator
Enumerator - -> "Current" T
enum UniTaskStatus {
    Pending= 0,
    Succeeded= 1,
    Faulted= 2,
    Canceled= 3,
}
interface IUniTaskSource {
}
interface "IUniTaskSource`1"<out T> {
    <<new>> + GetStatus(token:short) : UniTaskStatus
    <<new>> + OnCompleted(continuation:Action<object>, state:object, token:short) : void
}
class UniTaskStatusExtensions <<static>> {
    + {static} IsCompleted(status:UniTaskStatus) : bool
    + {static} IsCompletedSuccessfully(status:UniTaskStatus) : bool
    + {static} IsCanceled(status:UniTaskStatus) : bool
    + {static} IsFaulted(status:UniTaskStatus) : bool
}
class "IValueTaskSource`1"<T> {
}
IUniTaskSource <|- - "IUniTaskSource`1"
abstract class MoveNextSource {
    + GetResult(token:short) : bool
    + GetStatus(token:short) : UniTaskStatus
    + OnCompleted(continuation:Action<object>, state:object, token:short) : void
    + UnsafeGetStatus() : UniTaskStatus
}
class "IUniTaskSource`1"<T> {
}
"IUniTaskSource`1" "<bool>" <|- - MoveNextSource
class UniTaskLoopRunners <<static>> {
}
enum PlayerLoopTiming {
    Initialization= 0,
    LastInitialization= 1,
    EarlyUpdate= 2,
    LastEarlyUpdate= 3,
    FixedUpdate= 4,
    LastFixedUpdate= 5,
    PreUpdate= 6,
    LastPreUpdate= 7,
    Update= 8,
    LastUpdate= 9,
    PreLateUpdate= 10,
    LastPreLateUpdate= 11,
    PostLateUpdate= 12,
    LastPostLateUpdate= 13,
}
enum InjectPlayerLoopTimings {
    All=
            Initialization | LastInitialization |
            EarlyUpdate | LastEarlyUpdate |
            FixedUpdate | LastFixedUpdate |
            PreUpdate | LastPreUpdate |
            Update | LastUpdate |
            PreLateUpdate | LastPreLateUpdate |
            PostLateUpdate | LastPostLateUpdate,
    Standard=
            Initialization |
            EarlyUpdate |
            FixedUpdate |
            PreUpdate |
            Update |
            PreLateUpdate |
            PostLateUpdate | LastPostLateUpdate,
    Minimum=
            Update | FixedUpdate | LastPostLateUpdate,
    Initialization= 1,
    LastInitialization= 2,
    EarlyUpdate= 4,
    LastEarlyUpdate= 8,
    FixedUpdate= 16,
    LastFixedUpdate= 32,
    PreUpdate= 64,
    LastPreUpdate= 128,
    Update= 256,
    LastUpdate= 512,
    PreLateUpdate= 1024,
    LastPreLateUpdate= 2048,
    PostLateUpdate= 4096,
    LastPostLateUpdate= 8192,
}
interface IPlayerLoopItem {
}
class PlayerLoopHelper <<static>> {
    + {static} MainThreadId : int <<get>>
    + {static} IsMainThread : bool <<get>>
    + {static} Initialize(playerLoop:PlayerLoopSystem, injectTimings:InjectPlayerLoopTimings) : void
    + {static} AddAction(timing:PlayerLoopTiming, action:IPlayerLoopItem) : void
    + {static} AddContinuation(timing:PlayerLoopTiming, continuation:Action) : void
}
class UniTaskLoopRunnerInitialization <<struct>> {
}
class UniTaskLoopRunnerEarlyUpdate <<struct>> {
}
class UniTaskLoopRunnerFixedUpdate <<struct>> {
}
class UniTaskLoopRunnerPreUpdate <<struct>> {
}
class UniTaskLoopRunnerUpdate <<struct>> {
}
class UniTaskLoopRunnerPreLateUpdate <<struct>> {
}
class UniTaskLoopRunnerPostLateUpdate <<struct>> {
}
class UniTaskLoopRunnerLastInitialization <<struct>> {
}
class UniTaskLoopRunnerLastEarlyUpdate <<struct>> {
}
class UniTaskLoopRunnerLastFixedUpdate <<struct>> {
}
class UniTaskLoopRunnerLastPreUpdate <<struct>> {
}
class UniTaskLoopRunnerLastUpdate <<struct>> {
}
class UniTaskLoopRunnerLastPreLateUpdate <<struct>> {
}
class UniTaskLoopRunnerLastPostLateUpdate <<struct>> {
}
class UniTaskLoopRunnerYieldInitialization <<struct>> {
}
class UniTaskLoopRunnerYieldEarlyUpdate <<struct>> {
}
class UniTaskLoopRunnerYieldFixedUpdate <<struct>> {
}
class UniTaskLoopRunnerYieldPreUpdate <<struct>> {
}
class UniTaskLoopRunnerYieldUpdate <<struct>> {
}
class UniTaskLoopRunnerYieldPreLateUpdate <<struct>> {
}
class UniTaskLoopRunnerYieldPostLateUpdate <<struct>> {
}
class UniTaskLoopRunnerLastYieldInitialization <<struct>> {
}
class UniTaskLoopRunnerLastYieldEarlyUpdate <<struct>> {
}
class UniTaskLoopRunnerLastYieldFixedUpdate <<struct>> {
}
class UniTaskLoopRunnerLastYieldPreUpdate <<struct>> {
}
class UniTaskLoopRunnerLastYieldUpdate <<struct>> {
}
class UniTaskLoopRunnerLastYieldPreLateUpdate <<struct>> {
}
class UniTaskLoopRunnerLastYieldPostLateUpdate <<struct>> {
}
PlayerLoopHelper - -> "UnitySynchronizationContext" SynchronizationContext
UniTaskLoopRunners +- - UniTaskLoopRunnerInitialization
UniTaskLoopRunners +- - UniTaskLoopRunnerEarlyUpdate
UniTaskLoopRunners +- - UniTaskLoopRunnerFixedUpdate
UniTaskLoopRunners +- - UniTaskLoopRunnerPreUpdate
UniTaskLoopRunners +- - UniTaskLoopRunnerUpdate
UniTaskLoopRunners +- - UniTaskLoopRunnerPreLateUpdate
UniTaskLoopRunners +- - UniTaskLoopRunnerPostLateUpdate
UniTaskLoopRunners +- - UniTaskLoopRunnerLastInitialization
UniTaskLoopRunners +- - UniTaskLoopRunnerLastEarlyUpdate
UniTaskLoopRunners +- - UniTaskLoopRunnerLastFixedUpdate
UniTaskLoopRunners +- - UniTaskLoopRunnerLastPreUpdate
UniTaskLoopRunners +- - UniTaskLoopRunnerLastUpdate
UniTaskLoopRunners +- - UniTaskLoopRunnerLastPreLateUpdate
UniTaskLoopRunners +- - UniTaskLoopRunnerLastPostLateUpdate
UniTaskLoopRunners +- - UniTaskLoopRunnerYieldInitialization
UniTaskLoopRunners +- - UniTaskLoopRunnerYieldEarlyUpdate
UniTaskLoopRunners +- - UniTaskLoopRunnerYieldFixedUpdate
UniTaskLoopRunners +- - UniTaskLoopRunnerYieldPreUpdate
UniTaskLoopRunners +- - UniTaskLoopRunnerYieldUpdate
UniTaskLoopRunners +- - UniTaskLoopRunnerYieldPreLateUpdate
UniTaskLoopRunners +- - UniTaskLoopRunnerYieldPostLateUpdate
UniTaskLoopRunners +- - UniTaskLoopRunnerLastYieldInitialization
UniTaskLoopRunners +- - UniTaskLoopRunnerLastYieldEarlyUpdate
UniTaskLoopRunners +- - UniTaskLoopRunnerLastYieldFixedUpdate
UniTaskLoopRunners +- - UniTaskLoopRunnerLastYieldPreUpdate
UniTaskLoopRunners +- - UniTaskLoopRunnerLastYieldUpdate
UniTaskLoopRunners +- - UniTaskLoopRunnerLastYieldPreLateUpdate
UniTaskLoopRunners +- - UniTaskLoopRunnerLastYieldPostLateUpdate
abstract class PlayerLoopTimer {
    + {static} Create(interval:TimeSpan, periodic:bool, delayType:DelayType, playerLoopTiming:PlayerLoopTiming, cancellationToken:CancellationToken, timerCallback:Action<object>, state:object) : PlayerLoopTimer
    + {static} StartNew(interval:TimeSpan, periodic:bool, delayType:DelayType, playerLoopTiming:PlayerLoopTiming, cancellationToken:CancellationToken, timerCallback:Action<object>, state:object) : PlayerLoopTimer
    + Restart() : void
    + Restart(interval:TimeSpan) : void
    + Stop() : void
    + Dispose() : void
}
class DeltaTimePlayerLoopTimer <<sealed>> {
    + DeltaTimePlayerLoopTimer(interval:TimeSpan, periodic:bool, playerLoopTiming:PlayerLoopTiming, cancellationToken:CancellationToken, timerCallback:Action<object>, state:object)
}
class IgnoreTimeScalePlayerLoopTimer <<sealed>> {
    + IgnoreTimeScalePlayerLoopTimer(interval:TimeSpan, periodic:bool, playerLoopTiming:PlayerLoopTiming, cancellationToken:CancellationToken, timerCallback:Action<object>, state:object)
}
class RealtimePlayerLoopTimer <<sealed>> {
    + RealtimePlayerLoopTimer(interval:TimeSpan, periodic:bool, playerLoopTiming:PlayerLoopTiming, cancellationToken:CancellationToken, timerCallback:Action<object>, state:object)
}
IDisposable <|- - PlayerLoopTimer
IPlayerLoopItem <|- - PlayerLoopTimer
PlayerLoopTimer <|- - DeltaTimePlayerLoopTimer
PlayerLoopTimer <|- - IgnoreTimeScalePlayerLoopTimer
PlayerLoopTimer <|- - RealtimePlayerLoopTimer
class Progress <<static>> {
    + {static} Create(handler:Action<T>) : IProgress<T>
    + {static} CreateOnlyValueChanged(handler:Action<T>, comparer:IEqualityComparer<T>) : IProgress<T>
}
class "NullProgress`1"<T> <<sealed>> {
    + Report(value:T) : void
}
class "AnonymousProgress`1"<T> <<sealed>> {
    + AnonymousProgress(action:Action<T>)
    + Report(value:T) : void
}
class "OnlyValueChangedProgress`1"<T> <<sealed>> {
    + OnlyValueChangedProgress(action:Action<T>, comparer:IEqualityComparer<T>)
    + Report(value:T) : void
}
class "IProgress`1"<T> {
}
Progress +- - "NullProgress`1"
"IProgress`1" "<T>" <|- - "NullProgress`1"
"NullProgress`1" o-> "Instance<T>" "IProgress`1"
Progress +- - "AnonymousProgress`1"
"IProgress`1" "<T>" <|- - "AnonymousProgress`1"
Progress +- - "OnlyValueChangedProgress`1"
"IProgress`1" "<T>" <|- - "OnlyValueChangedProgress`1"
class TaskPool <<static>> {
    + {static} SetMaxPoolSize(maxPoolSize:int) : void
    + {static} GetCacheSizeInfo() : IEnumerable<(Type, int)>
    + {static} RegisterSizeGetter(type:Type, getSize:Func<int>) : void
}
interface "ITaskPoolNode`1"<T> {
}
class "TaskPool`1"<T> <<struct>> {
    + Size : int <<get>>
    + TryPop(result:T) : bool
    + TryPush(item:T) : bool
}
class TimeoutController <<sealed>> {
    + TimeoutController(delayType:DelayType, delayTiming:PlayerLoopTiming)
    + TimeoutController(linkCancellationTokenSource:CancellationTokenSource, delayType:DelayType, delayTiming:PlayerLoopTiming)
    + Timeout(millisecondsTimeout:int) : CancellationToken
    + Timeout(timeout:TimeSpan) : CancellationToken
    + IsTimeout() : bool
    + Reset() : void
    + Dispose() : void
}
IDisposable <|- - TimeoutController
interface "ITriggerHandler`1"<T> {
}
class "TriggerEvent`1"<T> <<struct>> {
    + SetResult(value:T) : void
    + SetCanceled(cancellationToken:CancellationToken) : void
    + SetCompleted() : void
    + SetError(exception:Exception) : void
    + Add(handler:ITriggerHandler<T>) : void
    + Remove(handler:ITriggerHandler<T>) : void
}
class UniTask <<struct>> {
    + {static} ToCoroutine(taskFactory:Func<UniTask>) : IEnumerator
}
class AwaiterActions <<static>> {
}
class UniTask <<struct>> {
    + UniTask(source:IUniTaskSource, token:short)
    + GetAwaiter() : Awaiter
    + SuppressCancellationThrow() : UniTask<bool>
    + <<override>> ToString() : string
    + Preserve() : UniTask
    + AsAsyncUnitUniTask() : UniTask<AsyncUnit>
}
class "UniTask`1"<T> <<struct>> {
    + UniTask(result:T)
    + UniTask(source:IUniTaskSource<T>, token:short)
    + GetAwaiter() : Awaiter
    + Preserve() : UniTask<T>
    + AsUniTask() : UniTask
    + SuppressCancellationThrow() : UniTask<(bool IsCanceled, T Result)>
    + <<override>> ToString() : string
}
class AsyncUnitSource <<sealed>> {
    + AsyncUnitSource(source:IUniTaskSource)
    + GetResult(token:short) : AsyncUnit
    + GetStatus(token:short) : UniTaskStatus
    + OnCompleted(continuation:Action<object>, state:object, token:short) : void
    + UnsafeGetStatus() : UniTaskStatus
}
class IsCanceledSource <<sealed>> {
    + IsCanceledSource(source:IUniTaskSource)
    + GetResult(token:short) : bool
    + GetStatus(token:short) : UniTaskStatus
    + UnsafeGetStatus() : UniTaskStatus
    + OnCompleted(continuation:Action<object>, state:object, token:short) : void
}
class MemoizeSource <<sealed>> {
    + MemoizeSource(source:IUniTaskSource)
    + GetResult(token:short) : void
    + GetStatus(token:short) : UniTaskStatus
    + OnCompleted(continuation:Action<object>, state:object, token:short) : void
    + UnsafeGetStatus() : UniTaskStatus
}
class Awaiter <<struct>> {
    + Awaiter(task:UniTask)
    + IsCompleted : bool <<get>>
    + GetResult() : void
    + OnCompleted(continuation:Action) : void
    + UnsafeOnCompleted(continuation:Action) : void
    + SourceOnCompleted(continuation:Action<object>, state:object) : void
}
class "AsyncUniTaskMethodBuilder`1"<T> {
}
class "ValueTask`1"<T> {
}
class IsCanceledSource <<sealed>> {
    + IsCanceledSource(source:IUniTaskSource<T>)
    + GetResult(token:short) : (bool, T)
    + GetStatus(token:short) : UniTaskStatus
    + UnsafeGetStatus() : UniTaskStatus
    + OnCompleted(continuation:Action<object>, state:object, token:short) : void
}
class MemoizeSource <<sealed>> {
    + MemoizeSource(source:IUniTaskSource<T>)
    + GetResult(token:short) : T
    + GetStatus(token:short) : UniTaskStatus
    + OnCompleted(continuation:Action<object>, state:object, token:short) : void
    + UnsafeGetStatus() : UniTaskStatus
}
class Awaiter <<struct>> {
    + Awaiter(task:UniTask<T>)
    + IsCompleted : bool <<get>>
    + GetResult() : T
    + OnCompleted(continuation:Action) : void
    + UnsafeOnCompleted(continuation:Action) : void
    + SourceOnCompleted(continuation:Action<object>, state:object) : void
}
class "IUniTaskSource`1"<T> {
}
UniTask - -> "Status" UniTaskStatus
"UniTask`1" - -> "Status" UniTaskStatus
UniTask +- - AsyncUnitSource
"IUniTaskSource`1" "<AsyncUnit>" <|- - AsyncUnitSource
UniTask +- - IsCanceledSource
"IUniTaskSource`1" "<bool>" <|- - IsCanceledSource
UniTask +- - MemoizeSource
IUniTaskSource <|- - MemoizeSource
UniTask +- - Awaiter
ICriticalNotifyCompletion <|- - Awaiter
"UniTask`1" +- - IsCanceledSource
"IUniTaskSource`1" "<(bool, T)>" <|- - IsCanceledSource
"UniTask`1" +- - MemoizeSource
"IUniTaskSource`1" "<T>" <|- - MemoizeSource
"UniTask`1" +- - Awaiter
ICriticalNotifyCompletion <|- - Awaiter
enum DelayType {
    DeltaTime,
    UnscaledDeltaTime,
    Realtime,
}
class UniTask <<struct>> {
    + {static} Yield() : YieldAwaitable
    + {static} Yield(timing:PlayerLoopTiming) : YieldAwaitable
    + {static} Yield(cancellationToken:CancellationToken) : UniTask
    + {static} Yield(timing:PlayerLoopTiming, cancellationToken:CancellationToken) : UniTask
    + {static} NextFrame() : UniTask
    + {static} NextFrame(timing:PlayerLoopTiming) : UniTask
    + {static} NextFrame(cancellationToken:CancellationToken) : UniTask
    + {static} NextFrame(timing:PlayerLoopTiming, cancellationToken:CancellationToken) : UniTask
    + {static} WaitForEndOfFrame() : YieldAwaitable
    + {static} WaitForEndOfFrame(cancellationToken:CancellationToken) : UniTask
    + {static} WaitForEndOfFrame(coroutineRunner:MonoBehaviour, cancellationToken:CancellationToken) : UniTask
    + {static} WaitForFixedUpdate() : YieldAwaitable
    + {static} WaitForFixedUpdate(cancellationToken:CancellationToken) : UniTask
    + {static} DelayFrame(delayFrameCount:int, delayTiming:PlayerLoopTiming, cancellationToken:CancellationToken) : UniTask
    + {static} Delay(millisecondsDelay:int, ignoreTimeScale:bool, delayTiming:PlayerLoopTiming, cancellationToken:CancellationToken) : UniTask
    + {static} Delay(delayTimeSpan:TimeSpan, ignoreTimeScale:bool, delayTiming:PlayerLoopTiming, cancellationToken:CancellationToken) : UniTask
    + {static} Delay(millisecondsDelay:int, delayType:DelayType, delayTiming:PlayerLoopTiming, cancellationToken:CancellationToken) : UniTask
    + {static} Delay(delayTimeSpan:TimeSpan, delayType:DelayType, delayTiming:PlayerLoopTiming, cancellationToken:CancellationToken) : UniTask
}
class YieldAwaitable <<struct>> {
    + YieldAwaitable(timing:PlayerLoopTiming)
    + GetAwaiter() : Awaiter
    + ToUniTask() : UniTask
}
class YieldPromise <<sealed>> {
    + {static} Create(timing:PlayerLoopTiming, cancellationToken:CancellationToken, token:short) : IUniTaskSource
    + GetResult(token:short) : void
    + GetStatus(token:short) : UniTaskStatus
    + UnsafeGetStatus() : UniTaskStatus
    + OnCompleted(continuation:Action<object>, state:object, token:short) : void
    + MoveNext() : bool
}
class NextFramePromise <<sealed>> {
    + {static} Create(timing:PlayerLoopTiming, cancellationToken:CancellationToken, token:short) : IUniTaskSource
    + GetResult(token:short) : void
    + GetStatus(token:short) : UniTaskStatus
    + UnsafeGetStatus() : UniTaskStatus
    + OnCompleted(continuation:Action<object>, state:object, token:short) : void
    + MoveNext() : bool
}
class WaitForEndOfFramePromise <<sealed>> {
    + {static} Create(coroutineRunner:MonoBehaviour, cancellationToken:CancellationToken, token:short) : IUniTaskSource
    + GetResult(token:short) : void
    + GetStatus(token:short) : UniTaskStatus
    + UnsafeGetStatus() : UniTaskStatus
    + OnCompleted(continuation:Action<object>, state:object, token:short) : void
    + Reset() : void
}
class DelayFramePromise <<sealed>> {
    + {static} Create(delayFrameCount:int, timing:PlayerLoopTiming, cancellationToken:CancellationToken, token:short) : IUniTaskSource
    + GetResult(token:short) : void
    + GetStatus(token:short) : UniTaskStatus
    + UnsafeGetStatus() : UniTaskStatus
    + OnCompleted(continuation:Action<object>, state:object, token:short) : void
    + MoveNext() : bool
}
class DelayPromise <<sealed>> {
    + {static} Create(delayTimeSpan:TimeSpan, timing:PlayerLoopTiming, cancellationToken:CancellationToken, token:short) : IUniTaskSource
    + GetResult(token:short) : void
    + GetStatus(token:short) : UniTaskStatus
    + UnsafeGetStatus() : UniTaskStatus
    + OnCompleted(continuation:Action<object>, state:object, token:short) : void
    + MoveNext() : bool
}
class DelayIgnoreTimeScalePromise <<sealed>> {
    + {static} Create(delayFrameTimeSpan:TimeSpan, timing:PlayerLoopTiming, cancellationToken:CancellationToken, token:short) : IUniTaskSource
    + GetResult(token:short) : void
    + GetStatus(token:short) : UniTaskStatus
    + UnsafeGetStatus() : UniTaskStatus
    + OnCompleted(continuation:Action<object>, state:object, token:short) : void
    + MoveNext() : bool
}
class DelayRealtimePromise <<sealed>> {
    + {static} Create(delayTimeSpan:TimeSpan, timing:PlayerLoopTiming, cancellationToken:CancellationToken, token:short) : IUniTaskSource
    + GetResult(token:short) : void
    + GetStatus(token:short) : UniTaskStatus
    + UnsafeGetStatus() : UniTaskStatus
    + OnCompleted(continuation:Action<object>, state:object, token:short) : void
    + MoveNext() : bool
}
class Awaiter <<struct>> {
    + Awaiter(timing:PlayerLoopTiming)
    + IsCompleted : bool <<get>>
    + GetResult() : void
    + OnCompleted(continuation:Action) : void
    + UnsafeOnCompleted(continuation:Action) : void
}
class "ITaskPoolNode`1"<T> {
}
UniTask +- - YieldPromise
IUniTaskSource <|- - YieldPromise
IPlayerLoopItem <|- - YieldPromise
"ITaskPoolNode`1" "<YieldPromise>" <|- - YieldPromise
UniTask +- - NextFramePromise
IUniTaskSource <|- - NextFramePromise
IPlayerLoopItem <|- - NextFramePromise
"ITaskPoolNode`1" "<NextFramePromise>" <|- - NextFramePromise
UniTask +- - WaitForEndOfFramePromise
IUniTaskSource <|- - WaitForEndOfFramePromise
"ITaskPoolNode`1" "<WaitForEndOfFramePromise>" <|- - WaitForEndOfFramePromise
UniTask +- - DelayFramePromise
IUniTaskSource <|- - DelayFramePromise
IPlayerLoopItem <|- - DelayFramePromise
"ITaskPoolNode`1" "<DelayFramePromise>" <|- - DelayFramePromise
UniTask +- - DelayPromise
IUniTaskSource <|- - DelayPromise
IPlayerLoopItem <|- - DelayPromise
"ITaskPoolNode`1" "<DelayPromise>" <|- - DelayPromise
UniTask +- - DelayIgnoreTimeScalePromise
IUniTaskSource <|- - DelayIgnoreTimeScalePromise
IPlayerLoopItem <|- - DelayIgnoreTimeScalePromise
"ITaskPoolNode`1" "<DelayIgnoreTimeScalePromise>" <|- - DelayIgnoreTimeScalePromise
UniTask +- - DelayRealtimePromise
IUniTaskSource <|- - DelayRealtimePromise
IPlayerLoopItem <|- - DelayRealtimePromise
"ITaskPoolNode`1" "<DelayRealtimePromise>" <|- - DelayRealtimePromise
YieldAwaitable +- - Awaiter
ICriticalNotifyCompletion <|- - Awaiter
class UniTask <<struct>> {
    + {static} FromException(ex:Exception) : UniTask
    + {static} FromException(ex:Exception) : UniTask<T>
    + {static} FromResult(value:T) : UniTask<T>
    + {static} FromCanceled(cancellationToken:CancellationToken) : UniTask
    + {static} FromCanceled(cancellationToken:CancellationToken) : UniTask<T>
    + {static} Create(factory:Func<UniTask>) : UniTask
    + {static} Create(factory:Func<UniTask<T>>) : UniTask<T>
    + {static} Lazy(factory:Func<UniTask>) : AsyncLazy
    + {static} Lazy(factory:Func<UniTask<T>>) : AsyncLazy<T>
    + {static} Void(asyncAction:Func<UniTaskVoid>) : void
    + {static} Void(asyncAction:Func<CancellationToken, UniTaskVoid>, cancellationToken:CancellationToken) : void
    + {static} Void(asyncAction:Func<T, UniTaskVoid>, state:T) : void
    + {static} Action(asyncAction:Func<UniTaskVoid>) : Action
    + {static} Action(asyncAction:Func<CancellationToken, UniTaskVoid>, cancellationToken:CancellationToken) : Action
    + {static} Defer(factory:Func<UniTask>) : UniTask
    + {static} Defer(factory:Func<UniTask<T>>) : UniTask<T>
    + {static} Never(cancellationToken:CancellationToken) : UniTask
    + {static} Never(cancellationToken:CancellationToken) : UniTask<T>
}
class CompletedTasks <<static>> {
}
class "CanceledUniTaskCache`1"<T> <<static>> {
}
class ExceptionResultSource <<sealed>> {
    + ExceptionResultSource(exception:Exception)
    + GetResult(token:short) : void
    + GetStatus(token:short) : UniTaskStatus
    + UnsafeGetStatus() : UniTaskStatus
    + OnCompleted(continuation:Action<object>, state:object, token:short) : void
}
class "ExceptionResultSource`1"<T> <<sealed>> {
    + ExceptionResultSource(exception:Exception)
    + GetResult(token:short) : T
    + GetStatus(token:short) : UniTaskStatus
    + UnsafeGetStatus() : UniTaskStatus
    + OnCompleted(continuation:Action<object>, state:object, token:short) : void
}
class CanceledResultSource <<sealed>> {
    + CanceledResultSource(cancellationToken:CancellationToken)
    + GetResult(token:short) : void
    + GetStatus(token:short) : UniTaskStatus
    + UnsafeGetStatus() : UniTaskStatus
    + OnCompleted(continuation:Action<object>, state:object, token:short) : void
}
class "CanceledResultSource`1"<T> <<sealed>> {
    + CanceledResultSource(cancellationToken:CancellationToken)
    + GetResult(token:short) : T
    + GetStatus(token:short) : UniTaskStatus
    + UnsafeGetStatus() : UniTaskStatus
    + OnCompleted(continuation:Action<object>, state:object, token:short) : void
}
class DeferPromise <<sealed>> {
    + DeferPromise(factory:Func<UniTask>)
    + GetResult(token:short) : void
    + GetStatus(token:short) : UniTaskStatus
    + OnCompleted(continuation:Action<object>, state:object, token:short) : void
    + UnsafeGetStatus() : UniTaskStatus
}
class "DeferPromise`1"<T> <<sealed>> {
    + DeferPromise(factory:Func<UniTask<T>>)
    + GetResult(token:short) : T
    + GetStatus(token:short) : UniTaskStatus
    + OnCompleted(continuation:Action<object>, state:object, token:short) : void
    + UnsafeGetStatus() : UniTaskStatus
}
class "NeverPromise`1"<T> <<sealed>> {
    + NeverPromise(cancellationToken:CancellationToken)
    + GetResult(token:short) : T
    + GetStatus(token:short) : UniTaskStatus
    + UnsafeGetStatus() : UniTaskStatus
    + OnCompleted(continuation:Action<object>, state:object, token:short) : void
}
class "UniTask`1"<T> {
}
class "IUniTaskSource`1"<T> {
}
UniTask o-> "CompletedTask" UniTask
CompletedTasks o-> "AsyncUnit<AsyncUnit>" "UniTask`1"
CompletedTasks o-> "True<bool>" "UniTask`1"
CompletedTasks o-> "False<bool>" "UniTask`1"
CompletedTasks o-> "Zero<int>" "UniTask`1"
CompletedTasks o-> "MinusOne<int>" "UniTask`1"
CompletedTasks o-> "One<int>" "UniTask`1"
UniTask +- - "CanceledUniTaskCache`1"
"CanceledUniTaskCache`1" - -> "Task<T>" "UniTask`1"
UniTask +- - ExceptionResultSource
IUniTaskSource <|- - ExceptionResultSource
UniTask +- - "ExceptionResultSource`1"
"IUniTaskSource`1" "<T>" <|- - "ExceptionResultSource`1"
UniTask +- - CanceledResultSource
IUniTaskSource <|- - CanceledResultSource
UniTask +- - "CanceledResultSource`1"
"IUniTaskSource`1" "<T>" <|- - "CanceledResultSource`1"
UniTask +- - DeferPromise
IUniTaskSource <|- - DeferPromise
UniTask +- - "DeferPromise`1"
"IUniTaskSource`1" "<T>" <|- - "DeferPromise`1"
UniTask +- - "NeverPromise`1"
"IUniTaskSource`1" "<T>" <|- - "NeverPromise`1"
class UniTask <<struct>> {
    + {static} Run(action:Action, configureAwait:bool, cancellationToken:CancellationToken) : UniTask
    + {static} Run(action:Action<object>, state:object, configureAwait:bool, cancellationToken:CancellationToken) : UniTask
    + {static} Run(action:Func<UniTask>, configureAwait:bool, cancellationToken:CancellationToken) : UniTask
    + {static} Run(action:Func<object, UniTask>, state:object, configureAwait:bool, cancellationToken:CancellationToken) : UniTask
    + {static} Run(func:Func<T>, configureAwait:bool, cancellationToken:CancellationToken) : UniTask<T>
    + {static} Run(func:Func<UniTask<T>>, configureAwait:bool, cancellationToken:CancellationToken) : UniTask<T>
    + {static} Run(func:Func<object, T>, state:object, configureAwait:bool, cancellationToken:CancellationToken) : UniTask<T>
    + {static} Run(func:Func<object, UniTask<T>>, state:object, configureAwait:bool, cancellationToken:CancellationToken) : UniTask<T>
    + {static} <<async>> RunOnThreadPool(action:Action, configureAwait:bool, cancellationToken:CancellationToken) : UniTask
    + {static} <<async>> RunOnThreadPool(action:Action<object>, state:object, configureAwait:bool, cancellationToken:CancellationToken) : UniTask
    + {static} <<async>> RunOnThreadPool(action:Func<UniTask>, configureAwait:bool, cancellationToken:CancellationToken) : UniTask
    + {static} <<async>> RunOnThreadPool(action:Func<object, UniTask>, state:object, configureAwait:bool, cancellationToken:CancellationToken) : UniTask
    + {static} <<async>> RunOnThreadPool(func:Func<T>, configureAwait:bool, cancellationToken:CancellationToken) : UniTask<T>
    + {static} <<async>> RunOnThreadPool(func:Func<UniTask<T>>, configureAwait:bool, cancellationToken:CancellationToken) : UniTask<T>
    + {static} <<async>> RunOnThreadPool(func:Func<object, T>, state:object, configureAwait:bool, cancellationToken:CancellationToken) : UniTask<T>
    + {static} <<async>> RunOnThreadPool(func:Func<object, UniTask<T>>, state:object, configureAwait:bool, cancellationToken:CancellationToken) : UniTask<T>
}
class UniTask <<struct>> {
    + {static} SwitchToThreadPool() : SwitchToThreadPoolAwaitable
    + {static} SwitchToTaskPool() : SwitchToTaskPoolAwaitable
    + {static} SwitchToSynchronizationContext(synchronizationContext:SynchronizationContext, cancellationToken:CancellationToken) : SwitchToSynchronizationContextAwaitable
    + {static} ReturnToSynchronizationContext(synchronizationContext:SynchronizationContext, cancellationToken:CancellationToken) : ReturnToSynchronizationContext
    + {static} ReturnToCurrentSynchronizationContext(dontPostWhenSameContext:bool, cancellationToken:CancellationToken) : ReturnToSynchronizationContext
}
class SwitchToThreadPoolAwaitable <<struct>> {
    + GetAwaiter() : Awaiter
}
class SwitchToTaskPoolAwaitable <<struct>> {
    + GetAwaiter() : Awaiter
}
class SwitchToSynchronizationContextAwaitable <<struct>> {
    + SwitchToSynchronizationContextAwaitable(synchronizationContext:SynchronizationContext, cancellationToken:CancellationToken)
    + GetAwaiter() : Awaiter
}
class ReturnToSynchronizationContext <<struct>> {
    + ReturnToSynchronizationContext(syncContext:SynchronizationContext, dontPostWhenSameContext:bool, cancellationToken:CancellationToken)
    + DisposeAsync() : Awaiter
}
class Awaiter <<struct>> {
    + IsCompleted : bool <<get>>
    + GetResult() : void
    + OnCompleted(continuation:Action) : void
    + UnsafeOnCompleted(continuation:Action) : void
}
class Awaiter <<struct>> {
    + IsCompleted : bool <<get>>
    + GetResult() : void
    + OnCompleted(continuation:Action) : void
    + UnsafeOnCompleted(continuation:Action) : void
}
class Awaiter <<struct>> {
    + Awaiter(synchronizationContext:SynchronizationContext, cancellationToken:CancellationToken)
    + IsCompleted : bool <<get>>
    + GetResult() : void
    + OnCompleted(continuation:Action) : void
    + UnsafeOnCompleted(continuation:Action) : void
}
class Awaiter <<struct>> {
    + Awaiter(synchronizationContext:SynchronizationContext, dontPostWhenSameContext:bool, cancellationToken:CancellationToken)
    + GetAwaiter() : Awaiter
    + IsCompleted : bool <<get>>
    + GetResult() : void
    + OnCompleted(continuation:Action) : void
    + UnsafeOnCompleted(continuation:Action) : void
}
SwitchToThreadPoolAwaitable +- - Awaiter
ICriticalNotifyCompletion <|- - Awaiter
SwitchToTaskPoolAwaitable +- - Awaiter
ICriticalNotifyCompletion <|- - Awaiter
SwitchToSynchronizationContextAwaitable +- - Awaiter
ICriticalNotifyCompletion <|- - Awaiter
ReturnToSynchronizationContext +- - Awaiter
ICriticalNotifyCompletion <|- - Awaiter
class UniTask <<struct>> {
    + {static} WaitUntil(predicate:Func<bool>, timing:PlayerLoopTiming, cancellationToken:CancellationToken) : UniTask
    + {static} WaitWhile(predicate:Func<bool>, timing:PlayerLoopTiming, cancellationToken:CancellationToken) : UniTask
    + {static} WaitUntilCanceled(cancellationToken:CancellationToken, timing:PlayerLoopTiming) : UniTask
    + {static} WaitUntilValueChanged(target:T, monitorFunction:Func<T, U>, monitorTiming:PlayerLoopTiming, equalityComparer:IEqualityComparer<U>, cancellationToken:CancellationToken) : UniTask<U>
}
class WaitUntilPromise <<sealed>> {
    + {static} Create(predicate:Func<bool>, timing:PlayerLoopTiming, cancellationToken:CancellationToken, token:short) : IUniTaskSource
    + GetResult(token:short) : void
    + GetStatus(token:short) : UniTaskStatus
    + UnsafeGetStatus() : UniTaskStatus
    + OnCompleted(continuation:Action<object>, state:object, token:short) : void
    + MoveNext() : bool
}
class WaitWhilePromise <<sealed>> {
    + {static} Create(predicate:Func<bool>, timing:PlayerLoopTiming, cancellationToken:CancellationToken, token:short) : IUniTaskSource
    + GetResult(token:short) : void
    + GetStatus(token:short) : UniTaskStatus
    + UnsafeGetStatus() : UniTaskStatus
    + OnCompleted(continuation:Action<object>, state:object, token:short) : void
    + MoveNext() : bool
}
class WaitUntilCanceledPromise <<sealed>> {
    + {static} Create(cancellationToken:CancellationToken, timing:PlayerLoopTiming, token:short) : IUniTaskSource
    + GetResult(token:short) : void
    + GetStatus(token:short) : UniTaskStatus
    + UnsafeGetStatus() : UniTaskStatus
    + OnCompleted(continuation:Action<object>, state:object, token:short) : void
    + MoveNext() : bool
}
class "WaitUntilValueChangedUnityObjectPromise`2"<T,U> <<sealed>> {
    + {static} Create(target:T, monitorFunction:Func<T, U>, equalityComparer:IEqualityComparer<U>, timing:PlayerLoopTiming, cancellationToken:CancellationToken, token:short) : IUniTaskSource<U>
    + GetResult(token:short) : U
    + GetStatus(token:short) : UniTaskStatus
    + UnsafeGetStatus() : UniTaskStatus
    + OnCompleted(continuation:Action<object>, state:object, token:short) : void
    + MoveNext() : bool
}
class "WaitUntilValueChangedStandardObjectPromise`2"<T,U> <<sealed>> {
    + {static} Create(target:T, monitorFunction:Func<T, U>, equalityComparer:IEqualityComparer<U>, timing:PlayerLoopTiming, cancellationToken:CancellationToken, token:short) : IUniTaskSource<U>
    + GetResult(token:short) : U
    + GetStatus(token:short) : UniTaskStatus
    + UnsafeGetStatus() : UniTaskStatus
    + OnCompleted(continuation:Action<object>, state:object, token:short) : void
    + MoveNext() : bool
}
class "ITaskPoolNode`1"<T> {
}
class "IUniTaskSource`1"<T> {
}
UniTask +- - WaitUntilPromise
IUniTaskSource <|- - WaitUntilPromise
IPlayerLoopItem <|- - WaitUntilPromise
"ITaskPoolNode`1" "<WaitUntilPromise>" <|- - WaitUntilPromise
UniTask +- - WaitWhilePromise
IUniTaskSource <|- - WaitWhilePromise
IPlayerLoopItem <|- - WaitWhilePromise
"ITaskPoolNode`1" "<WaitWhilePromise>" <|- - WaitWhilePromise
UniTask +- - WaitUntilCanceledPromise
IUniTaskSource <|- - WaitUntilCanceledPromise
IPlayerLoopItem <|- - WaitUntilCanceledPromise
"ITaskPoolNode`1" "<WaitUntilCanceledPromise>" <|- - WaitUntilCanceledPromise
UniTask +- - "WaitUntilValueChangedUnityObjectPromise`2"
"IUniTaskSource`1" "<U>" <|- - "WaitUntilValueChangedUnityObjectPromise`2"
IPlayerLoopItem <|- - "WaitUntilValueChangedUnityObjectPromise`2"
"ITaskPoolNode`1" "<WaitUntilValueChangedUnityObjectPromise<T, U>>" <|- - "WaitUntilValueChangedUnityObjectPromise`2"
UniTask +- - "WaitUntilValueChangedStandardObjectPromise`2"
"IUniTaskSource`1" "<U>" <|- - "WaitUntilValueChangedStandardObjectPromise`2"
IPlayerLoopItem <|- - "WaitUntilValueChangedStandardObjectPromise`2"
"ITaskPoolNode`1" "<WaitUntilValueChangedStandardObjectPromise<T, U>>" <|- - "WaitUntilValueChangedStandardObjectPromise`2"
class UniTask <<struct>> {
    + {static} WhenAll(tasks:UniTask<T>[]) : UniTask<T[]>
    + {static} WhenAll(tasks:IEnumerable<UniTask<T>>) : UniTask<T[]>
    + {static} WhenAll(tasks:UniTask[]) : UniTask
    + {static} WhenAll(tasks:IEnumerable<UniTask>) : UniTask
}
class "WhenAllPromise`1"<T> <<sealed>> {
    + WhenAllPromise(tasks:UniTask<T>[], tasksLength:int)
    + GetResult(token:short) : T[]
    + GetStatus(token:short) : UniTaskStatus
    + UnsafeGetStatus() : UniTaskStatus
    + OnCompleted(continuation:Action<object>, state:object, token:short) : void
}
class WhenAllPromise <<sealed>> {
    + WhenAllPromise(tasks:UniTask[], tasksLength:int)
    + GetResult(token:short) : void
    + GetStatus(token:short) : UniTaskStatus
    + UnsafeGetStatus() : UniTaskStatus
    + OnCompleted(continuation:Action<object>, state:object, token:short) : void
}
class "IUniTaskSource`1"<T> {
}
UniTask +- - "WhenAllPromise`1"
"IUniTaskSource`1" "<T[]>" <|- - "WhenAllPromise`1"
UniTask +- - WhenAllPromise
IUniTaskSource <|- - WhenAllPromise
class UniTask <<struct>> {
    + {static} WhenAll(task1:UniTask<T1>, task2:UniTask<T2>) : UniTask<(T1, T2)>
    + {static} WhenAll(task1:UniTask<T1>, task2:UniTask<T2>, task3:UniTask<T3>) : UniTask<(T1, T2, T3)>
    + {static} WhenAll(task1:UniTask<T1>, task2:UniTask<T2>, task3:UniTask<T3>, task4:UniTask<T4>) : UniTask<(T1, T2, T3, T4)>
    + {static} WhenAll(task1:UniTask<T1>, task2:UniTask<T2>, task3:UniTask<T3>, task4:UniTask<T4>, task5:UniTask<T5>) : UniTask<(T1, T2, T3, T4, T5)>
    + {static} WhenAll(task1:UniTask<T1>, task2:UniTask<T2>, task3:UniTask<T3>, task4:UniTask<T4>, task5:UniTask<T5>, task6:UniTask<T6>) : UniTask<(T1, T2, T3, T4, T5, T6)>
    + {static} WhenAll(task1:UniTask<T1>, task2:UniTask<T2>, task3:UniTask<T3>, task4:UniTask<T4>, task5:UniTask<T5>, task6:UniTask<T6>, task7:UniTask<T7>) : UniTask<(T1, T2, T3, T4, T5, T6, T7)>
    + {static} WhenAll(task1:UniTask<T1>, task2:UniTask<T2>, task3:UniTask<T3>, task4:UniTask<T4>, task5:UniTask<T5>, task6:UniTask<T6>, task7:UniTask<T7>, task8:UniTask<T8>) : UniTask<(T1, T2, T3, T4, T5, T6, T7, T8)>
    + {static} WhenAll(task1:UniTask<T1>, task2:UniTask<T2>, task3:UniTask<T3>, task4:UniTask<T4>, task5:UniTask<T5>, task6:UniTask<T6>, task7:UniTask<T7>, task8:UniTask<T8>, task9:UniTask<T9>) : UniTask<(T1, T2, T3, T4, T5, T6, T7, T8, T9)>
    + {static} WhenAll(task1:UniTask<T1>, task2:UniTask<T2>, task3:UniTask<T3>, task4:UniTask<T4>, task5:UniTask<T5>, task6:UniTask<T6>, task7:UniTask<T7>, task8:UniTask<T8>, task9:UniTask<T9>, task10:UniTask<T10>) : UniTask<(T1, T2, T3, T4, T5, T6, T7, T8, T9, T10)>
    + {static} WhenAll(task1:UniTask<T1>, task2:UniTask<T2>, task3:UniTask<T3>, task4:UniTask<T4>, task5:UniTask<T5>, task6:UniTask<T6>, task7:UniTask<T7>, task8:UniTask<T8>, task9:UniTask<T9>, task10:UniTask<T10>, task11:UniTask<T11>) : UniTask<(T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11)>
    + {static} WhenAll(task1:UniTask<T1>, task2:UniTask<T2>, task3:UniTask<T3>, task4:UniTask<T4>, task5:UniTask<T5>, task6:UniTask<T6>, task7:UniTask<T7>, task8:UniTask<T8>, task9:UniTask<T9>, task10:UniTask<T10>, task11:UniTask<T11>, task12:UniTask<T12>) : UniTask<(T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12)>
    + {static} WhenAll(task1:UniTask<T1>, task2:UniTask<T2>, task3:UniTask<T3>, task4:UniTask<T4>, task5:UniTask<T5>, task6:UniTask<T6>, task7:UniTask<T7>, task8:UniTask<T8>, task9:UniTask<T9>, task10:UniTask<T10>, task11:UniTask<T11>, task12:UniTask<T12>, task13:UniTask<T13>) : UniTask<(T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13)>
    + {static} WhenAll(task1:UniTask<T1>, task2:UniTask<T2>, task3:UniTask<T3>, task4:UniTask<T4>, task5:UniTask<T5>, task6:UniTask<T6>, task7:UniTask<T7>, task8:UniTask<T8>, task9:UniTask<T9>, task10:UniTask<T10>, task11:UniTask<T11>, task12:UniTask<T12>, task13:UniTask<T13>, task14:UniTask<T14>) : UniTask<(T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14)>
    + {static} WhenAll(task1:UniTask<T1>, task2:UniTask<T2>, task3:UniTask<T3>, task4:UniTask<T4>, task5:UniTask<T5>, task6:UniTask<T6>, task7:UniTask<T7>, task8:UniTask<T8>, task9:UniTask<T9>, task10:UniTask<T10>, task11:UniTask<T11>, task12:UniTask<T12>, task13:UniTask<T13>, task14:UniTask<T14>, task15:UniTask<T15>) : UniTask<(T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15)>
}
class "WhenAllPromise`2"<T1,T2> <<sealed>> {
    + WhenAllPromise(task1:UniTask<T1>, task2:UniTask<T2>)
    + GetResult(token:short) : (T1, T2)
    + GetStatus(token:short) : UniTaskStatus
    + UnsafeGetStatus() : UniTaskStatus
    + OnCompleted(continuation:Action<object>, state:object, token:short) : void
}
class "WhenAllPromise`3"<T1,T2,T3> <<sealed>> {
    + WhenAllPromise(task1:UniTask<T1>, task2:UniTask<T2>, task3:UniTask<T3>)
    + GetResult(token:short) : (T1, T2, T3)
    + GetStatus(token:short) : UniTaskStatus
    + UnsafeGetStatus() : UniTaskStatus
    + OnCompleted(continuation:Action<object>, state:object, token:short) : void
}
class "WhenAllPromise`4"<T1,T2,T3,T4> <<sealed>> {
    + WhenAllPromise(task1:UniTask<T1>, task2:UniTask<T2>, task3:UniTask<T3>, task4:UniTask<T4>)
    + GetResult(token:short) : (T1, T2, T3, T4)
    + GetStatus(token:short) : UniTaskStatus
    + UnsafeGetStatus() : UniTaskStatus
    + OnCompleted(continuation:Action<object>, state:object, token:short) : void
}
class "WhenAllPromise`5"<T1,T2,T3,T4,T5> <<sealed>> {
    + WhenAllPromise(task1:UniTask<T1>, task2:UniTask<T2>, task3:UniTask<T3>, task4:UniTask<T4>, task5:UniTask<T5>)
    + GetResult(token:short) : (T1, T2, T3, T4, T5)
    + GetStatus(token:short) : UniTaskStatus
    + UnsafeGetStatus() : UniTaskStatus
    + OnCompleted(continuation:Action<object>, state:object, token:short) : void
}
class "WhenAllPromise`6"<T1,T2,T3,T4,T5,T6> <<sealed>> {
    + WhenAllPromise(task1:UniTask<T1>, task2:UniTask<T2>, task3:UniTask<T3>, task4:UniTask<T4>, task5:UniTask<T5>, task6:UniTask<T6>)
    + GetResult(token:short) : (T1, T2, T3, T4, T5, T6)
    + GetStatus(token:short) : UniTaskStatus
    + UnsafeGetStatus() : UniTaskStatus
    + OnCompleted(continuation:Action<object>, state:object, token:short) : void
}
class "WhenAllPromise`7"<T1,T2,T3,T4,T5,T6,T7> <<sealed>> {
    + WhenAllPromise(task1:UniTask<T1>, task2:UniTask<T2>, task3:UniTask<T3>, task4:UniTask<T4>, task5:UniTask<T5>, task6:UniTask<T6>, task7:UniTask<T7>)
    + GetResult(token:short) : (T1, T2, T3, T4, T5, T6, T7)
    + GetStatus(token:short) : UniTaskStatus
    + UnsafeGetStatus() : UniTaskStatus
    + OnCompleted(continuation:Action<object>, state:object, token:short) : void
}
class "WhenAllPromise`8"<T1,T2,T3,T4,T5,T6,T7,T8> <<sealed>> {
    + WhenAllPromise(task1:UniTask<T1>, task2:UniTask<T2>, task3:UniTask<T3>, task4:UniTask<T4>, task5:UniTask<T5>, task6:UniTask<T6>, task7:UniTask<T7>, task8:UniTask<T8>)
    + GetResult(token:short) : (T1, T2, T3, T4, T5, T6, T7, T8)
    + GetStatus(token:short) : UniTaskStatus
    + UnsafeGetStatus() : UniTaskStatus
    + OnCompleted(continuation:Action<object>, state:object, token:short) : void
}
class "WhenAllPromise`9"<T1,T2,T3,T4,T5,T6,T7,T8,T9> <<sealed>> {
    + WhenAllPromise(task1:UniTask<T1>, task2:UniTask<T2>, task3:UniTask<T3>, task4:UniTask<T4>, task5:UniTask<T5>, task6:UniTask<T6>, task7:UniTask<T7>, task8:UniTask<T8>, task9:UniTask<T9>)
    + GetResult(token:short) : (T1, T2, T3, T4, T5, T6, T7, T8, T9)
    + GetStatus(token:short) : UniTaskStatus
    + UnsafeGetStatus() : UniTaskStatus
    + OnCompleted(continuation:Action<object>, state:object, token:short) : void
}
class "WhenAllPromise`10"<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10> <<sealed>> {
    + WhenAllPromise(task1:UniTask<T1>, task2:UniTask<T2>, task3:UniTask<T3>, task4:UniTask<T4>, task5:UniTask<T5>, task6:UniTask<T6>, task7:UniTask<T7>, task8:UniTask<T8>, task9:UniTask<T9>, task10:UniTask<T10>)
    + GetResult(token:short) : (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10)
    + GetStatus(token:short) : UniTaskStatus
    + UnsafeGetStatus() : UniTaskStatus
    + OnCompleted(continuation:Action<object>, state:object, token:short) : void
}
class "WhenAllPromise`11"<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11> <<sealed>> {
    + WhenAllPromise(task1:UniTask<T1>, task2:UniTask<T2>, task3:UniTask<T3>, task4:UniTask<T4>, task5:UniTask<T5>, task6:UniTask<T6>, task7:UniTask<T7>, task8:UniTask<T8>, task9:UniTask<T9>, task10:UniTask<T10>, task11:UniTask<T11>)
    + GetResult(token:short) : (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11)
    + GetStatus(token:short) : UniTaskStatus
    + UnsafeGetStatus() : UniTaskStatus
    + OnCompleted(continuation:Action<object>, state:object, token:short) : void
}
class "WhenAllPromise`12"<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12> <<sealed>> {
    + WhenAllPromise(task1:UniTask<T1>, task2:UniTask<T2>, task3:UniTask<T3>, task4:UniTask<T4>, task5:UniTask<T5>, task6:UniTask<T6>, task7:UniTask<T7>, task8:UniTask<T8>, task9:UniTask<T9>, task10:UniTask<T10>, task11:UniTask<T11>, task12:UniTask<T12>)
    + GetResult(token:short) : (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12)
    + GetStatus(token:short) : UniTaskStatus
    + UnsafeGetStatus() : UniTaskStatus
    + OnCompleted(continuation:Action<object>, state:object, token:short) : void
}
class "WhenAllPromise`13"<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13> <<sealed>> {
    + WhenAllPromise(task1:UniTask<T1>, task2:UniTask<T2>, task3:UniTask<T3>, task4:UniTask<T4>, task5:UniTask<T5>, task6:UniTask<T6>, task7:UniTask<T7>, task8:UniTask<T8>, task9:UniTask<T9>, task10:UniTask<T10>, task11:UniTask<T11>, task12:UniTask<T12>, task13:UniTask<T13>)
    + GetResult(token:short) : (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13)
    + GetStatus(token:short) : UniTaskStatus
    + UnsafeGetStatus() : UniTaskStatus
    + OnCompleted(continuation:Action<object>, state:object, token:short) : void
}
class "WhenAllPromise`14"<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14> <<sealed>> {
    + WhenAllPromise(task1:UniTask<T1>, task2:UniTask<T2>, task3:UniTask<T3>, task4:UniTask<T4>, task5:UniTask<T5>, task6:UniTask<T6>, task7:UniTask<T7>, task8:UniTask<T8>, task9:UniTask<T9>, task10:UniTask<T10>, task11:UniTask<T11>, task12:UniTask<T12>, task13:UniTask<T13>, task14:UniTask<T14>)
    + GetResult(token:short) : (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14)
    + GetStatus(token:short) : UniTaskStatus
    + UnsafeGetStatus() : UniTaskStatus
    + OnCompleted(continuation:Action<object>, state:object, token:short) : void
}
class "WhenAllPromise`15"<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15> <<sealed>> {
    + WhenAllPromise(task1:UniTask<T1>, task2:UniTask<T2>, task3:UniTask<T3>, task4:UniTask<T4>, task5:UniTask<T5>, task6:UniTask<T6>, task7:UniTask<T7>, task8:UniTask<T8>, task9:UniTask<T9>, task10:UniTask<T10>, task11:UniTask<T11>, task12:UniTask<T12>, task13:UniTask<T13>, task14:UniTask<T14>, task15:UniTask<T15>)
    + GetResult(token:short) : (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15)
    + GetStatus(token:short) : UniTaskStatus
    + UnsafeGetStatus() : UniTaskStatus
    + OnCompleted(continuation:Action<object>, state:object, token:short) : void
}
class "IUniTaskSource`1"<T> {
}
UniTask +- - "WhenAllPromise`2"
"IUniTaskSource`1" "<(T1, T2)>" <|- - "WhenAllPromise`2"
UniTask +- - "WhenAllPromise`3"
"IUniTaskSource`1" "<(T1, T2, T3)>" <|- - "WhenAllPromise`3"
UniTask +- - "WhenAllPromise`4"
"IUniTaskSource`1" "<(T1, T2, T3, T4)>" <|- - "WhenAllPromise`4"
UniTask +- - "WhenAllPromise`5"
"IUniTaskSource`1" "<(T1, T2, T3, T4, T5)>" <|- - "WhenAllPromise`5"
UniTask +- - "WhenAllPromise`6"
"IUniTaskSource`1" "<(T1, T2, T3, T4, T5, T6)>" <|- - "WhenAllPromise`6"
UniTask +- - "WhenAllPromise`7"
"IUniTaskSource`1" "<(T1, T2, T3, T4, T5, T6, T7)>" <|- - "WhenAllPromise`7"
UniTask +- - "WhenAllPromise`8"
"IUniTaskSource`1" "<(T1, T2, T3, T4, T5, T6, T7, T8)>" <|- - "WhenAllPromise`8"
UniTask +- - "WhenAllPromise`9"
"IUniTaskSource`1" "<(T1, T2, T3, T4, T5, T6, T7, T8, T9)>" <|- - "WhenAllPromise`9"
UniTask +- - "WhenAllPromise`10"
"IUniTaskSource`1" "<(T1, T2, T3, T4, T5, T6, T7, T8, T9, T10)>" <|- - "WhenAllPromise`10"
UniTask +- - "WhenAllPromise`11"
"IUniTaskSource`1" "<(T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11)>" <|- - "WhenAllPromise`11"
UniTask +- - "WhenAllPromise`12"
"IUniTaskSource`1" "<(T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12)>" <|- - "WhenAllPromise`12"
UniTask +- - "WhenAllPromise`13"
"IUniTaskSource`1" "<(T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13)>" <|- - "WhenAllPromise`13"
UniTask +- - "WhenAllPromise`14"
"IUniTaskSource`1" "<(T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14)>" <|- - "WhenAllPromise`14"
UniTask +- - "WhenAllPromise`15"
"IUniTaskSource`1" "<(T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15)>" <|- - "WhenAllPromise`15"
class UniTask <<struct>> {
    + {static} WhenAny(leftTask:UniTask<T>, rightTask:UniTask) : UniTask<(bool hasResultLeft, T result)>
    + {static} WhenAny(tasks:UniTask<T>[]) : UniTask<(int winArgumentIndex, T result)>
    + {static} WhenAny(tasks:IEnumerable<UniTask<T>>) : UniTask<(int winArgumentIndex, T result)>
    + {static} WhenAny(tasks:UniTask[]) : UniTask<int>
    + {static} WhenAny(tasks:IEnumerable<UniTask>) : UniTask<int>
}
class "WhenAnyLRPromise`1"<T> <<sealed>> {
    + WhenAnyLRPromise(leftTask:UniTask<T>, rightTask:UniTask)
    + GetResult(token:short) : (bool, T)
    + GetStatus(token:short) : UniTaskStatus
    + OnCompleted(continuation:Action<object>, state:object, token:short) : void
    + UnsafeGetStatus() : UniTaskStatus
}
class "WhenAnyPromise`1"<T> <<sealed>> {
    + WhenAnyPromise(tasks:UniTask<T>[], tasksLength:int)
    + GetResult(token:short) : (int, T)
    + GetStatus(token:short) : UniTaskStatus
    + OnCompleted(continuation:Action<object>, state:object, token:short) : void
    + UnsafeGetStatus() : UniTaskStatus
}
class WhenAnyPromise <<sealed>> {
    + WhenAnyPromise(tasks:UniTask[], tasksLength:int)
    + GetResult(token:short) : int
    + GetStatus(token:short) : UniTaskStatus
    + OnCompleted(continuation:Action<object>, state:object, token:short) : void
    + UnsafeGetStatus() : UniTaskStatus
}
class "IUniTaskSource`1"<T> {
}
UniTask +- - "WhenAnyLRPromise`1"
"IUniTaskSource`1" "<(bool, T)>" <|- - "WhenAnyLRPromise`1"
UniTask +- - "WhenAnyPromise`1"
"IUniTaskSource`1" "<(int, T)>" <|- - "WhenAnyPromise`1"
UniTask +- - WhenAnyPromise
"IUniTaskSource`1" "<int>" <|- - WhenAnyPromise
class UniTask <<struct>> {
    + {static} WhenAny(task1:UniTask<T1>, task2:UniTask<T2>) : UniTask<(int winArgumentIndex, T1 result1, T2 result2)>
    + {static} WhenAny(task1:UniTask<T1>, task2:UniTask<T2>, task3:UniTask<T3>) : UniTask<(int winArgumentIndex, T1 result1, T2 result2, T3 result3)>
    + {static} WhenAny(task1:UniTask<T1>, task2:UniTask<T2>, task3:UniTask<T3>, task4:UniTask<T4>) : UniTask<(int winArgumentIndex, T1 result1, T2 result2, T3 result3, T4 result4)>
    + {static} WhenAny(task1:UniTask<T1>, task2:UniTask<T2>, task3:UniTask<T3>, task4:UniTask<T4>, task5:UniTask<T5>) : UniTask<(int winArgumentIndex, T1 result1, T2 result2, T3 result3, T4 result4, T5 result5)>
    + {static} WhenAny(task1:UniTask<T1>, task2:UniTask<T2>, task3:UniTask<T3>, task4:UniTask<T4>, task5:UniTask<T5>, task6:UniTask<T6>) : UniTask<(int winArgumentIndex, T1 result1, T2 result2, T3 result3, T4 result4, T5 result5, T6 result6)>
    + {static} WhenAny(task1:UniTask<T1>, task2:UniTask<T2>, task3:UniTask<T3>, task4:UniTask<T4>, task5:UniTask<T5>, task6:UniTask<T6>, task7:UniTask<T7>) : UniTask<(int winArgumentIndex, T1 result1, T2 result2, T3 result3, T4 result4, T5 result5, T6 result6, T7 result7)>
    + {static} WhenAny(task1:UniTask<T1>, task2:UniTask<T2>, task3:UniTask<T3>, task4:UniTask<T4>, task5:UniTask<T5>, task6:UniTask<T6>, task7:UniTask<T7>, task8:UniTask<T8>) : UniTask<(int winArgumentIndex, T1 result1, T2 result2, T3 result3, T4 result4, T5 result5, T6 result6, T7 result7, T8 result8)>
    + {static} WhenAny(task1:UniTask<T1>, task2:UniTask<T2>, task3:UniTask<T3>, task4:UniTask<T4>, task5:UniTask<T5>, task6:UniTask<T6>, task7:UniTask<T7>, task8:UniTask<T8>, task9:UniTask<T9>) : UniTask<(int winArgumentIndex, T1 result1, T2 result2, T3 result3, T4 result4, T5 result5, T6 result6, T7 result7, T8 result8, T9 result9)>
    + {static} WhenAny(task1:UniTask<T1>, task2:UniTask<T2>, task3:UniTask<T3>, task4:UniTask<T4>, task5:UniTask<T5>, task6:UniTask<T6>, task7:UniTask<T7>, task8:UniTask<T8>, task9:UniTask<T9>, task10:UniTask<T10>) : UniTask<(int winArgumentIndex, T1 result1, T2 result2, T3 result3, T4 result4, T5 result5, T6 result6, T7 result7, T8 result8, T9 result9, T10 result10)>
    + {static} WhenAny(task1:UniTask<T1>, task2:UniTask<T2>, task3:UniTask<T3>, task4:UniTask<T4>, task5:UniTask<T5>, task6:UniTask<T6>, task7:UniTask<T7>, task8:UniTask<T8>, task9:UniTask<T9>, task10:UniTask<T10>, task11:UniTask<T11>) : UniTask<(int winArgumentIndex, T1 result1, T2 result2, T3 result3, T4 result4, T5 result5, T6 result6, T7 result7, T8 result8, T9 result9, T10 result10, T11 result11)>
    + {static} WhenAny(task1:UniTask<T1>, task2:UniTask<T2>, task3:UniTask<T3>, task4:UniTask<T4>, task5:UniTask<T5>, task6:UniTask<T6>, task7:UniTask<T7>, task8:UniTask<T8>, task9:UniTask<T9>, task10:UniTask<T10>, task11:UniTask<T11>, task12:UniTask<T12>) : UniTask<(int winArgumentIndex, T1 result1, T2 result2, T3 result3, T4 result4, T5 result5, T6 result6, T7 result7, T8 result8, T9 result9, T10 result10, T11 result11, T12 result12)>
    + {static} WhenAny(task1:UniTask<T1>, task2:UniTask<T2>, task3:UniTask<T3>, task4:UniTask<T4>, task5:UniTask<T5>, task6:UniTask<T6>, task7:UniTask<T7>, task8:UniTask<T8>, task9:UniTask<T9>, task10:UniTask<T10>, task11:UniTask<T11>, task12:UniTask<T12>, task13:UniTask<T13>) : UniTask<(int winArgumentIndex, T1 result1, T2 result2, T3 result3, T4 result4, T5 result5, T6 result6, T7 result7, T8 result8, T9 result9, T10 result10, T11 result11, T12 result12, T13 result13)>
    + {static} WhenAny(task1:UniTask<T1>, task2:UniTask<T2>, task3:UniTask<T3>, task4:UniTask<T4>, task5:UniTask<T5>, task6:UniTask<T6>, task7:UniTask<T7>, task8:UniTask<T8>, task9:UniTask<T9>, task10:UniTask<T10>, task11:UniTask<T11>, task12:UniTask<T12>, task13:UniTask<T13>, task14:UniTask<T14>) : UniTask<(int winArgumentIndex, T1 result1, T2 result2, T3 result3, T4 result4, T5 result5, T6 result6, T7 result7, T8 result8, T9 result9, T10 result10, T11 result11, T12 result12, T13 result13, T14 result14)>
    + {static} WhenAny(task1:UniTask<T1>, task2:UniTask<T2>, task3:UniTask<T3>, task4:UniTask<T4>, task5:UniTask<T5>, task6:UniTask<T6>, task7:UniTask<T7>, task8:UniTask<T8>, task9:UniTask<T9>, task10:UniTask<T10>, task11:UniTask<T11>, task12:UniTask<T12>, task13:UniTask<T13>, task14:UniTask<T14>, task15:UniTask<T15>) : UniTask<(int winArgumentIndex, T1 result1, T2 result2, T3 result3, T4 result4, T5 result5, T6 result6, T7 result7, T8 result8, T9 result9, T10 result10, T11 result11, T12 result12, T13 result13, T14 result14, T15 result15)>
}
class "WhenAnyPromise`2"<T1,T2> <<sealed>> {
    + WhenAnyPromise(task1:UniTask<T1>, task2:UniTask<T2>)
    + GetResult(token:short) : (int, T1 result1, T2 result2)
    + GetStatus(token:short) : UniTaskStatus
    + OnCompleted(continuation:Action<object>, state:object, token:short) : void
    + UnsafeGetStatus() : UniTaskStatus
}
class "WhenAnyPromise`3"<T1,T2,T3> <<sealed>> {
    + WhenAnyPromise(task1:UniTask<T1>, task2:UniTask<T2>, task3:UniTask<T3>)
    + GetResult(token:short) : (int, T1 result1, T2 result2, T3 result3)
    + GetStatus(token:short) : UniTaskStatus
    + OnCompleted(continuation:Action<object>, state:object, token:short) : void
    + UnsafeGetStatus() : UniTaskStatus
}
class "WhenAnyPromise`4"<T1,T2,T3,T4> <<sealed>> {
    + WhenAnyPromise(task1:UniTask<T1>, task2:UniTask<T2>, task3:UniTask<T3>, task4:UniTask<T4>)
    + GetResult(token:short) : (int, T1 result1, T2 result2, T3 result3, T4 result4)
    + GetStatus(token:short) : UniTaskStatus
    + OnCompleted(continuation:Action<object>, state:object, token:short) : void
    + UnsafeGetStatus() : UniTaskStatus
}
class "WhenAnyPromise`5"<T1,T2,T3,T4,T5> <<sealed>> {
    + WhenAnyPromise(task1:UniTask<T1>, task2:UniTask<T2>, task3:UniTask<T3>, task4:UniTask<T4>, task5:UniTask<T5>)
    + GetResult(token:short) : (int, T1 result1, T2 result2, T3 result3, T4 result4, T5 result5)
    + GetStatus(token:short) : UniTaskStatus
    + OnCompleted(continuation:Action<object>, state:object, token:short) : void
    + UnsafeGetStatus() : UniTaskStatus
}
class "WhenAnyPromise`6"<T1,T2,T3,T4,T5,T6> <<sealed>> {
    + WhenAnyPromise(task1:UniTask<T1>, task2:UniTask<T2>, task3:UniTask<T3>, task4:UniTask<T4>, task5:UniTask<T5>, task6:UniTask<T6>)
    + GetResult(token:short) : (int, T1 result1, T2 result2, T3 result3, T4 result4, T5 result5, T6 result6)
    + GetStatus(token:short) : UniTaskStatus
    + OnCompleted(continuation:Action<object>, state:object, token:short) : void
    + UnsafeGetStatus() : UniTaskStatus
}
class "WhenAnyPromise`7"<T1,T2,T3,T4,T5,T6,T7> <<sealed>> {
    + WhenAnyPromise(task1:UniTask<T1>, task2:UniTask<T2>, task3:UniTask<T3>, task4:UniTask<T4>, task5:UniTask<T5>, task6:UniTask<T6>, task7:UniTask<T7>)
    + GetResult(token:short) : (int, T1 result1, T2 result2, T3 result3, T4 result4, T5 result5, T6 result6, T7 result7)
    + GetStatus(token:short) : UniTaskStatus
    + OnCompleted(continuation:Action<object>, state:object, token:short) : void
    + UnsafeGetStatus() : UniTaskStatus
}
class "WhenAnyPromise`8"<T1,T2,T3,T4,T5,T6,T7,T8> <<sealed>> {
    + WhenAnyPromise(task1:UniTask<T1>, task2:UniTask<T2>, task3:UniTask<T3>, task4:UniTask<T4>, task5:UniTask<T5>, task6:UniTask<T6>, task7:UniTask<T7>, task8:UniTask<T8>)
    + GetResult(token:short) : (int, T1 result1, T2 result2, T3 result3, T4 result4, T5 result5, T6 result6, T7 result7, T8 result8)
    + GetStatus(token:short) : UniTaskStatus
    + OnCompleted(continuation:Action<object>, state:object, token:short) : void
    + UnsafeGetStatus() : UniTaskStatus
}
class "WhenAnyPromise`9"<T1,T2,T3,T4,T5,T6,T7,T8,T9> <<sealed>> {
    + WhenAnyPromise(task1:UniTask<T1>, task2:UniTask<T2>, task3:UniTask<T3>, task4:UniTask<T4>, task5:UniTask<T5>, task6:UniTask<T6>, task7:UniTask<T7>, task8:UniTask<T8>, task9:UniTask<T9>)
    + GetResult(token:short) : (int, T1 result1, T2 result2, T3 result3, T4 result4, T5 result5, T6 result6, T7 result7, T8 result8, T9 result9)
    + GetStatus(token:short) : UniTaskStatus
    + OnCompleted(continuation:Action<object>, state:object, token:short) : void
    + UnsafeGetStatus() : UniTaskStatus
}
class "WhenAnyPromise`10"<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10> <<sealed>> {
    + WhenAnyPromise(task1:UniTask<T1>, task2:UniTask<T2>, task3:UniTask<T3>, task4:UniTask<T4>, task5:UniTask<T5>, task6:UniTask<T6>, task7:UniTask<T7>, task8:UniTask<T8>, task9:UniTask<T9>, task10:UniTask<T10>)
    + GetResult(token:short) : (int, T1 result1, T2 result2, T3 result3, T4 result4, T5 result5, T6 result6, T7 result7, T8 result8, T9 result9, T10 result10)
    + GetStatus(token:short) : UniTaskStatus
    + OnCompleted(continuation:Action<object>, state:object, token:short) : void
    + UnsafeGetStatus() : UniTaskStatus
}
class "WhenAnyPromise`11"<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11> <<sealed>> {
    + WhenAnyPromise(task1:UniTask<T1>, task2:UniTask<T2>, task3:UniTask<T3>, task4:UniTask<T4>, task5:UniTask<T5>, task6:UniTask<T6>, task7:UniTask<T7>, task8:UniTask<T8>, task9:UniTask<T9>, task10:UniTask<T10>, task11:UniTask<T11>)
    + GetResult(token:short) : (int, T1 result1, T2 result2, T3 result3, T4 result4, T5 result5, T6 result6, T7 result7, T8 result8, T9 result9, T10 result10, T11 result11)
    + GetStatus(token:short) : UniTaskStatus
    + OnCompleted(continuation:Action<object>, state:object, token:short) : void
    + UnsafeGetStatus() : UniTaskStatus
}
class "WhenAnyPromise`12"<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12> <<sealed>> {
    + WhenAnyPromise(task1:UniTask<T1>, task2:UniTask<T2>, task3:UniTask<T3>, task4:UniTask<T4>, task5:UniTask<T5>, task6:UniTask<T6>, task7:UniTask<T7>, task8:UniTask<T8>, task9:UniTask<T9>, task10:UniTask<T10>, task11:UniTask<T11>, task12:UniTask<T12>)
    + GetResult(token:short) : (int, T1 result1, T2 result2, T3 result3, T4 result4, T5 result5, T6 result6, T7 result7, T8 result8, T9 result9, T10 result10, T11 result11, T12 result12)
    + GetStatus(token:short) : UniTaskStatus
    + OnCompleted(continuation:Action<object>, state:object, token:short) : void
    + UnsafeGetStatus() : UniTaskStatus
}
class "WhenAnyPromise`13"<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13> <<sealed>> {
    + WhenAnyPromise(task1:UniTask<T1>, task2:UniTask<T2>, task3:UniTask<T3>, task4:UniTask<T4>, task5:UniTask<T5>, task6:UniTask<T6>, task7:UniTask<T7>, task8:UniTask<T8>, task9:UniTask<T9>, task10:UniTask<T10>, task11:UniTask<T11>, task12:UniTask<T12>, task13:UniTask<T13>)
    + GetResult(token:short) : (int, T1 result1, T2 result2, T3 result3, T4 result4, T5 result5, T6 result6, T7 result7, T8 result8, T9 result9, T10 result10, T11 result11, T12 result12, T13 result13)
    + GetStatus(token:short) : UniTaskStatus
    + OnCompleted(continuation:Action<object>, state:object, token:short) : void
    + UnsafeGetStatus() : UniTaskStatus
}
class "WhenAnyPromise`14"<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14> <<sealed>> {
    + WhenAnyPromise(task1:UniTask<T1>, task2:UniTask<T2>, task3:UniTask<T3>, task4:UniTask<T4>, task5:UniTask<T5>, task6:UniTask<T6>, task7:UniTask<T7>, task8:UniTask<T8>, task9:UniTask<T9>, task10:UniTask<T10>, task11:UniTask<T11>, task12:UniTask<T12>, task13:UniTask<T13>, task14:UniTask<T14>)
    + GetResult(token:short) : (int, T1 result1, T2 result2, T3 result3, T4 result4, T5 result5, T6 result6, T7 result7, T8 result8, T9 result9, T10 result10, T11 result11, T12 result12, T13 result13, T14 result14)
    + GetStatus(token:short) : UniTaskStatus
    + OnCompleted(continuation:Action<object>, state:object, token:short) : void
    + UnsafeGetStatus() : UniTaskStatus
}
class "WhenAnyPromise`15"<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15> <<sealed>> {
    + WhenAnyPromise(task1:UniTask<T1>, task2:UniTask<T2>, task3:UniTask<T3>, task4:UniTask<T4>, task5:UniTask<T5>, task6:UniTask<T6>, task7:UniTask<T7>, task8:UniTask<T8>, task9:UniTask<T9>, task10:UniTask<T10>, task11:UniTask<T11>, task12:UniTask<T12>, task13:UniTask<T13>, task14:UniTask<T14>, task15:UniTask<T15>)
    + GetResult(token:short) : (int, T1 result1, T2 result2, T3 result3, T4 result4, T5 result5, T6 result6, T7 result7, T8 result8, T9 result9, T10 result10, T11 result11, T12 result12, T13 result13, T14 result14, T15 result15)
    + GetStatus(token:short) : UniTaskStatus
    + OnCompleted(continuation:Action<object>, state:object, token:short) : void
    + UnsafeGetStatus() : UniTaskStatus
}
class "IUniTaskSource`1"<T> {
}
UniTask +- - "WhenAnyPromise`2"
"IUniTaskSource`1" "<(int, T1 result1, T2 result2)>" <|- - "WhenAnyPromise`2"
UniTask +- - "WhenAnyPromise`3"
"IUniTaskSource`1" "<(int, T1 result1, T2 result2, T3 result3)>" <|- - "WhenAnyPromise`3"
UniTask +- - "WhenAnyPromise`4"
"IUniTaskSource`1" "<(int, T1 result1, T2 result2, T3 result3, T4 result4)>" <|- - "WhenAnyPromise`4"
UniTask +- - "WhenAnyPromise`5"
"IUniTaskSource`1" "<(int, T1 result1, T2 result2, T3 result3, T4 result4, T5 result5)>" <|- - "WhenAnyPromise`5"
UniTask +- - "WhenAnyPromise`6"
"IUniTaskSource`1" "<(int, T1 result1, T2 result2, T3 result3, T4 result4, T5 result5, T6 result6)>" <|- - "WhenAnyPromise`6"
UniTask +- - "WhenAnyPromise`7"
"IUniTaskSource`1" "<(int, T1 result1, T2 result2, T3 result3, T4 result4, T5 result5, T6 result6, T7 result7)>" <|- - "WhenAnyPromise`7"
UniTask +- - "WhenAnyPromise`8"
"IUniTaskSource`1" "<(int, T1 result1, T2 result2, T3 result3, T4 result4, T5 result5, T6 result6, T7 result7, T8 result8)>" <|- - "WhenAnyPromise`8"
UniTask +- - "WhenAnyPromise`9"
"IUniTaskSource`1" "<(int, T1 result1, T2 result2, T3 result3, T4 result4, T5 result5, T6 result6, T7 result7, T8 result8, T9 result9)>" <|- - "WhenAnyPromise`9"
UniTask +- - "WhenAnyPromise`10"
"IUniTaskSource`1" "<(int, T1 result1, T2 result2, T3 result3, T4 result4, T5 result5, T6 result6, T7 result7, T8 result8, T9 result9, T10 result10)>" <|- - "WhenAnyPromise`10"
UniTask +- - "WhenAnyPromise`11"
"IUniTaskSource`1" "<(int, T1 result1, T2 result2, T3 result3, T4 result4, T5 result5, T6 result6, T7 result7, T8 result8, T9 result9, T10 result10, T11 result11)>" <|- - "WhenAnyPromise`11"
UniTask +- - "WhenAnyPromise`12"
"IUniTaskSource`1" "<(int, T1 result1, T2 result2, T3 result3, T4 result4, T5 result5, T6 result6, T7 result7, T8 result8, T9 result9, T10 result10, T11 result11, T12 result12)>" <|- - "WhenAnyPromise`12"
UniTask +- - "WhenAnyPromise`13"
"IUniTaskSource`1" "<(int, T1 result1, T2 result2, T3 result3, T4 result4, T5 result5, T6 result6, T7 result7, T8 result8, T9 result9, T10 result10, T11 result11, T12 result12, T13 result13)>" <|- - "WhenAnyPromise`13"
UniTask +- - "WhenAnyPromise`14"
"IUniTaskSource`1" "<(int, T1 result1, T2 result2, T3 result3, T4 result4, T5 result5, T6 result6, T7 result7, T8 result8, T9 result9, T10 result10, T11 result11, T12 result12, T13 result13, T14 result14)>" <|- - "WhenAnyPromise`14"
UniTask +- - "WhenAnyPromise`15"
"IUniTaskSource`1" "<(int, T1 result1, T2 result2, T3 result3, T4 result4, T5 result5, T6 result6, T7 result7, T8 result8, T9 result9, T10 result10, T11 result11, T12 result12, T13 result13, T14 result14, T15 result15)>" <|- - "WhenAnyPromise`15"
interface IResolvePromise {
}
interface "IResolvePromise`1"<T> {
}
interface IRejectPromise {
}
interface ICancelPromise {
}
interface "IPromise`1"<T> {
}
interface IPromise {
}
class ExceptionHolder {
    + ExceptionHolder(exception:ExceptionDispatchInfo)
    + GetException() : ExceptionDispatchInfo
}
class "UniTaskCompletionSourceCore`1"<TResult> <<struct>> {
    + Reset() : void
    + TrySetResult(result:TResult) : bool
    + TrySetException(error:Exception) : bool
    + TrySetCanceled(cancellationToken:CancellationToken) : bool
    + Version : short <<get>>
    + GetStatus(token:short) : UniTaskStatus
    + UnsafeGetStatus() : UniTaskStatus
    + GetResult(token:short) : TResult
    + OnCompleted(continuation:Action<object>, state:object, token:short) : void
}
class UniTaskCompletionSourceCoreShared <<static>> {
}
class AutoResetUniTaskCompletionSource {
    + {static} Create() : AutoResetUniTaskCompletionSource
    + {static} CreateFromCanceled(cancellationToken:CancellationToken, token:short) : AutoResetUniTaskCompletionSource
    + {static} CreateFromException(exception:Exception, token:short) : AutoResetUniTaskCompletionSource
    + {static} CreateCompleted(token:short) : AutoResetUniTaskCompletionSource
    + TrySetResult() : bool
    + TrySetCanceled(cancellationToken:CancellationToken) : bool
    + TrySetException(exception:Exception) : bool
    + GetResult(token:short) : void
    + GetStatus(token:short) : UniTaskStatus
    + UnsafeGetStatus() : UniTaskStatus
    + OnCompleted(continuation:Action<object>, state:object, token:short) : void
}
class "AutoResetUniTaskCompletionSource`1"<T> {
    + {static} Create() : AutoResetUniTaskCompletionSource<T>
    + {static} CreateFromCanceled(cancellationToken:CancellationToken, token:short) : AutoResetUniTaskCompletionSource<T>
    + {static} CreateFromException(exception:Exception, token:short) : AutoResetUniTaskCompletionSource<T>
    + {static} CreateFromResult(result:T, token:short) : AutoResetUniTaskCompletionSource<T>
    + TrySetResult(result:T) : bool
    + TrySetCanceled(cancellationToken:CancellationToken) : bool
    + TrySetException(exception:Exception) : bool
    + GetResult(token:short) : T
    + GetStatus(token:short) : UniTaskStatus
    + UnsafeGetStatus() : UniTaskStatus
    + OnCompleted(continuation:Action<object>, state:object, token:short) : void
}
class UniTaskCompletionSource {
    + UniTaskCompletionSource()
    + TrySetResult() : bool
    + TrySetCanceled(cancellationToken:CancellationToken) : bool
    + TrySetException(exception:Exception) : bool
    + GetResult(token:short) : void
    + GetStatus(token:short) : UniTaskStatus
    + UnsafeGetStatus() : UniTaskStatus
    + OnCompleted(continuation:Action<object>, state:object, token:short) : void
}
class "UniTaskCompletionSource`1"<T> {
    + UniTaskCompletionSource()
    + TrySetResult(result:T) : bool
    + TrySetCanceled(cancellationToken:CancellationToken) : bool
    + TrySetException(exception:Exception) : bool
    + GetResult(token:short) : T
    + GetStatus(token:short) : UniTaskStatus
    + UnsafeGetStatus() : UniTaskStatus
    + OnCompleted(continuation:Action<object>, state:object, token:short) : void
}
class "ITaskPoolNode`1"<T> {
}
class "IUniTaskSource`1"<T> {
}
class "UniTask`1"<T> {
}
"IResolvePromise`1" "<T>" <|- - "IPromise`1"
IRejectPromise <|- - "IPromise`1"
ICancelPromise <|- - "IPromise`1"
IResolvePromise <|- - IPromise
IRejectPromise <|- - IPromise
ICancelPromise <|- - IPromise
IUniTaskSource <|- - AutoResetUniTaskCompletionSource
"ITaskPoolNode`1" "<AutoResetUniTaskCompletionSource>" <|- - AutoResetUniTaskCompletionSource
IPromise <|- - AutoResetUniTaskCompletionSource
AutoResetUniTaskCompletionSource - -> "Task" UniTask
"IUniTaskSource`1" "<T>" <|- - "AutoResetUniTaskCompletionSource`1"
"ITaskPoolNode`1" "<AutoResetUniTaskCompletionSource<T>>" <|- - "AutoResetUniTaskCompletionSource`1"
"IPromise`1" "<T>" <|- - "AutoResetUniTaskCompletionSource`1"
"AutoResetUniTaskCompletionSource`1" - -> "Task<T>" "UniTask`1"
IUniTaskSource <|- - UniTaskCompletionSource
IPromise <|- - UniTaskCompletionSource
UniTaskCompletionSource - -> "Task" UniTask
"IUniTaskSource`1" "<T>" <|- - "UniTaskCompletionSource`1"
"IPromise`1" "<T>" <|- - "UniTaskCompletionSource`1"
"UniTaskCompletionSource`1" - -> "Task<T>" "UniTask`1"
class UniTaskExtensions <<static>> <<partial>> {
    + {static} AsUniTask(task:Task<T>, useCurrentSynchronizationContext:bool) : UniTask<T>
    + {static} AsUniTask(task:Task, useCurrentSynchronizationContext:bool) : UniTask
    + {static} AsTask(task:UniTask<T>) : Task<T>
    + {static} AsTask(task:UniTask) : Task
    + {static} ToAsyncLazy(task:UniTask) : AsyncLazy
    + {static} ToAsyncLazy(task:UniTask<T>) : AsyncLazy<T>
    + {static} AttachExternalCancellation(task:UniTask, cancellationToken:CancellationToken) : UniTask
    + {static} AttachExternalCancellation(task:UniTask<T>, cancellationToken:CancellationToken) : UniTask<T>
    + {static} Forget(task:UniTask) : void
    + {static} Forget(task:UniTask, exceptionHandler:Action<Exception>, handleExceptionOnMainThread:bool) : void
    + {static} Forget(task:UniTask<T>) : void
    + {static} Forget(task:UniTask<T>, exceptionHandler:Action<Exception>, handleExceptionOnMainThread:bool) : void
    + {static} <<async>> ContinueWith(task:UniTask<T>, continuationFunction:Action<T>) : UniTask
    + {static} <<async>> ContinueWith(task:UniTask<T>, continuationFunction:Func<T, UniTask>) : UniTask
    + {static} <<async>> ContinueWith(task:UniTask<T>, continuationFunction:Func<T, TR>) : UniTask<TR>
    + {static} <<async>> ContinueWith(task:UniTask<T>, continuationFunction:Func<T, UniTask<TR>>) : UniTask<TR>
    + {static} <<async>> ContinueWith(task:UniTask, continuationFunction:Action) : UniTask
    + {static} <<async>> ContinueWith(task:UniTask, continuationFunction:Func<UniTask>) : UniTask
    + {static} <<async>> ContinueWith(task:UniTask, continuationFunction:Func<T>) : UniTask<T>
    + {static} <<async>> ContinueWith(task:UniTask, continuationFunction:Func<UniTask<T>>) : UniTask<T>
    + {static} <<async>> Unwrap(task:UniTask<UniTask<T>>) : UniTask<T>
    + {static} <<async>> Unwrap(task:UniTask<UniTask>) : UniTask
    + {static} <<async>> Unwrap(task:Task<UniTask<T>>) : UniTask<T>
    + {static} <<async>> Unwrap(task:Task<UniTask<T>>, continueOnCapturedContext:bool) : UniTask<T>
    + {static} <<async>> Unwrap(task:Task<UniTask>) : UniTask
    + {static} <<async>> Unwrap(task:Task<UniTask>, continueOnCapturedContext:bool) : UniTask
    + {static} <<async>> Unwrap(task:UniTask<Task<T>>) : UniTask<T>
    + {static} <<async>> Unwrap(task:UniTask<Task<T>>, continueOnCapturedContext:bool) : UniTask<T>
    + {static} <<async>> Unwrap(task:UniTask<Task>) : UniTask
    + {static} <<async>> Unwrap(task:UniTask<Task>, continueOnCapturedContext:bool) : UniTask
}
class AttachExternalCancellationSource <<sealed>> {
    + AttachExternalCancellationSource(task:UniTask, cancellationToken:CancellationToken)
    + GetResult(token:short) : void
    + GetStatus(token:short) : UniTaskStatus
    + OnCompleted(continuation:Action<object>, state:object, token:short) : void
    + UnsafeGetStatus() : UniTaskStatus
}
class "AttachExternalCancellationSource`1"<T> <<sealed>> {
    + AttachExternalCancellationSource(task:UniTask<T>, cancellationToken:CancellationToken)
    + GetResult(token:short) : T
    + GetStatus(token:short) : UniTaskStatus
    + OnCompleted(continuation:Action<object>, state:object, token:short) : void
    + UnsafeGetStatus() : UniTaskStatus
}
class "IUniTaskSource`1"<T> {
}
UniTaskExtensions +- - AttachExternalCancellationSource
IUniTaskSource <|- - AttachExternalCancellationSource
UniTaskExtensions +- - "AttachExternalCancellationSource`1"
"IUniTaskSource`1" "<T>" <|- - "AttachExternalCancellationSource`1"
class UniTaskExtensions <<static>> <<partial>> {
    + {static} GetAwaiter(tasks:UniTask[]) : UniTask.Awaiter
    + {static} GetAwaiter(tasks:IEnumerable<UniTask>) : UniTask.Awaiter
    + {static} GetAwaiter(tasks:UniTask<T>[]) : UniTask<T[]>.Awaiter
    + {static} GetAwaiter(tasks:IEnumerable<UniTask<T>>) : UniTask<T[]>.Awaiter
    + {static} GetAwaiter(tasks:(UniTask<T1> task1, UniTask<T2> task2)) : UniTask<(T1, T2)>.Awaiter
    + {static} GetAwaiter(tasks:(UniTask<T1> task1, UniTask<T2> task2, UniTask<T3> task3)) : UniTask<(T1, T2, T3)>.Awaiter
    + {static} GetAwaiter(tasks:(UniTask<T1> task1, UniTask<T2> task2, UniTask<T3> task3, UniTask<T4> task4)) : UniTask<(T1, T2, T3, T4)>.Awaiter
    + {static} GetAwaiter(tasks:(UniTask<T1> task1, UniTask<T2> task2, UniTask<T3> task3, UniTask<T4> task4, UniTask<T5> task5)) : UniTask<(T1, T2, T3, T4, T5)>.Awaiter
    + {static} GetAwaiter(tasks:(UniTask<T1> task1, UniTask<T2> task2, UniTask<T3> task3, UniTask<T4> task4, UniTask<T5> task5, UniTask<T6> task6)) : UniTask<(T1, T2, T3, T4, T5, T6)>.Awaiter
    + {static} GetAwaiter(tasks:(UniTask<T1> task1, UniTask<T2> task2, UniTask<T3> task3, UniTask<T4> task4, UniTask<T5> task5, UniTask<T6> task6, UniTask<T7> task7)) : UniTask<(T1, T2, T3, T4, T5, T6, T7)>.Awaiter
    + {static} GetAwaiter(tasks:(UniTask<T1> task1, UniTask<T2> task2, UniTask<T3> task3, UniTask<T4> task4, UniTask<T5> task5, UniTask<T6> task6, UniTask<T7> task7, UniTask<T8> task8)) : UniTask<(T1, T2, T3, T4, T5, T6, T7, T8)>.Awaiter
    + {static} GetAwaiter(tasks:(UniTask<T1> task1, UniTask<T2> task2, UniTask<T3> task3, UniTask<T4> task4, UniTask<T5> task5, UniTask<T6> task6, UniTask<T7> task7, UniTask<T8> task8, UniTask<T9> task9)) : UniTask<(T1, T2, T3, T4, T5, T6, T7, T8, T9)>.Awaiter
    + {static} GetAwaiter(tasks:(UniTask<T1> task1, UniTask<T2> task2, UniTask<T3> task3, UniTask<T4> task4, UniTask<T5> task5, UniTask<T6> task6, UniTask<T7> task7, UniTask<T8> task8, UniTask<T9> task9, UniTask<T10> task10)) : UniTask<(T1, T2, T3, T4, T5, T6, T7, T8, T9, T10)>.Awaiter
    + {static} GetAwaiter(tasks:(UniTask<T1> task1, UniTask<T2> task2, UniTask<T3> task3, UniTask<T4> task4, UniTask<T5> task5, UniTask<T6> task6, UniTask<T7> task7, UniTask<T8> task8, UniTask<T9> task9, UniTask<T10> task10, UniTask<T11> task11)) : UniTask<(T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11)>.Awaiter
    + {static} GetAwaiter(tasks:(UniTask<T1> task1, UniTask<T2> task2, UniTask<T3> task3, UniTask<T4> task4, UniTask<T5> task5, UniTask<T6> task6, UniTask<T7> task7, UniTask<T8> task8, UniTask<T9> task9, UniTask<T10> task10, UniTask<T11> task11, UniTask<T12> task12)) : UniTask<(T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12)>.Awaiter
    + {static} GetAwaiter(tasks:(UniTask<T1> task1, UniTask<T2> task2, UniTask<T3> task3, UniTask<T4> task4, UniTask<T5> task5, UniTask<T6> task6, UniTask<T7> task7, UniTask<T8> task8, UniTask<T9> task9, UniTask<T10> task10, UniTask<T11> task11, UniTask<T12> task12, UniTask<T13> task13)) : UniTask<(T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13)>.Awaiter
    + {static} GetAwaiter(tasks:(UniTask<T1> task1, UniTask<T2> task2, UniTask<T3> task3, UniTask<T4> task4, UniTask<T5> task5, UniTask<T6> task6, UniTask<T7> task7, UniTask<T8> task8, UniTask<T9> task9, UniTask<T10> task10, UniTask<T11> task11, UniTask<T12> task12, UniTask<T13> task13, UniTask<T14> task14)) : UniTask<(T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14)>.Awaiter
    + {static} GetAwaiter(tasks:(UniTask<T1> task1, UniTask<T2> task2, UniTask<T3> task3, UniTask<T4> task4, UniTask<T5> task5, UniTask<T6> task6, UniTask<T7> task7, UniTask<T8> task8, UniTask<T9> task9, UniTask<T10> task10, UniTask<T11> task11, UniTask<T12> task12, UniTask<T13> task13, UniTask<T14> task14, UniTask<T15> task15)) : UniTask<(T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15)>.Awaiter
    + {static} GetAwaiter(tasks:(UniTask task1, UniTask task2)) : UniTask.Awaiter
    + {static} GetAwaiter(tasks:(UniTask task1, UniTask task2, UniTask task3)) : UniTask.Awaiter
    + {static} GetAwaiter(tasks:(UniTask task1, UniTask task2, UniTask task3, UniTask task4)) : UniTask.Awaiter
    + {static} GetAwaiter(tasks:(UniTask task1, UniTask task2, UniTask task3, UniTask task4, UniTask task5)) : UniTask.Awaiter
    + {static} GetAwaiter(tasks:(UniTask task1, UniTask task2, UniTask task3, UniTask task4, UniTask task5, UniTask task6)) : UniTask.Awaiter
    + {static} GetAwaiter(tasks:(UniTask task1, UniTask task2, UniTask task3, UniTask task4, UniTask task5, UniTask task6, UniTask task7)) : UniTask.Awaiter
    + {static} GetAwaiter(tasks:(UniTask task1, UniTask task2, UniTask task3, UniTask task4, UniTask task5, UniTask task6, UniTask task7, UniTask task8)) : UniTask.Awaiter
    + {static} GetAwaiter(tasks:(UniTask task1, UniTask task2, UniTask task3, UniTask task4, UniTask task5, UniTask task6, UniTask task7, UniTask task8, UniTask task9)) : UniTask.Awaiter
    + {static} GetAwaiter(tasks:(UniTask task1, UniTask task2, UniTask task3, UniTask task4, UniTask task5, UniTask task6, UniTask task7, UniTask task8, UniTask task9, UniTask task10)) : UniTask.Awaiter
    + {static} GetAwaiter(tasks:(UniTask task1, UniTask task2, UniTask task3, UniTask task4, UniTask task5, UniTask task6, UniTask task7, UniTask task8, UniTask task9, UniTask task10, UniTask task11)) : UniTask.Awaiter
    + {static} GetAwaiter(tasks:(UniTask task1, UniTask task2, UniTask task3, UniTask task4, UniTask task5, UniTask task6, UniTask task7, UniTask task8, UniTask task9, UniTask task10, UniTask task11, UniTask task12)) : UniTask.Awaiter
    + {static} GetAwaiter(tasks:(UniTask task1, UniTask task2, UniTask task3, UniTask task4, UniTask task5, UniTask task6, UniTask task7, UniTask task8, UniTask task9, UniTask task10, UniTask task11, UniTask task12, UniTask task13)) : UniTask.Awaiter
    + {static} GetAwaiter(tasks:(UniTask task1, UniTask task2, UniTask task3, UniTask task4, UniTask task5, UniTask task6, UniTask task7, UniTask task8, UniTask task9, UniTask task10, UniTask task11, UniTask task12, UniTask task13, UniTask task14)) : UniTask.Awaiter
    + {static} GetAwaiter(tasks:(UniTask task1, UniTask task2, UniTask task3, UniTask task4, UniTask task5, UniTask task6, UniTask task7, UniTask task8, UniTask task9, UniTask task10, UniTask task11, UniTask task12, UniTask task13, UniTask task14, UniTask task15)) : UniTask.Awaiter
}
class UniTaskObservableExtensions <<static>> {
    + {static} ToUniTask(source:IObservable<T>, useFirstValue:bool, cancellationToken:CancellationToken) : UniTask<T>
    + {static} ToObservable(task:UniTask<T>) : IObservable<T>
    + {static} ToObservable(task:UniTask) : IObservable<AsyncUnit>
}
class EmptyDisposable {
    + Dispose() : void
}
class SingleAssignmentDisposable <<sealed>> {
    + IsDisposed : bool <<get>>
    + Dispose() : void
}
class "AsyncSubject`1"<T> <<sealed>> {
    + Value : T <<get>>
    + HasObservers : bool <<get>>
    + IsCompleted : bool <<get>>
    + OnCompleted() : void
    + OnError(error:Exception) : void
    + OnNext(value:T) : void
    + Subscribe(observer:IObserver<T>) : IDisposable
    + Dispose() : void
}
class "ListObserver`1"<T> {
    + ListObserver(observers:ImmutableList<IObserver<T>>)
    + OnCompleted() : void
    + OnError(error:Exception) : void
    + OnNext(value:T) : void
}
class "EmptyObserver`1"<T> {
    + OnCompleted() : void
    + OnError(error:Exception) : void
    + OnNext(value:T) : void
}
class "ThrowObserver`1"<T> {
    + OnCompleted() : void
    + OnError(error:Exception) : void
    + OnNext(value:T) : void
}
class "DisposedObserver`1"<T> {
    + OnCompleted() : void
    + OnError(error:Exception) : void
    + OnNext(value:T) : void
}
class "ImmutableList`1"<T> {
    + ImmutableList(data:T[])
    + Add(value:T) : ImmutableList<T>
    + Remove(value:T) : ImmutableList<T>
    + IndexOf(value:T) : int
}
class "ToUniTaskObserver`1"<T> {
    + ToUniTaskObserver(promise:UniTaskCompletionSource<T>, disposable:SingleAssignmentDisposable, cancellationToken:CancellationToken)
    + OnNext(value:T) : void
    + OnError(error:Exception) : void
    + OnCompleted() : void
}
class "FirstValueToUniTaskObserver`1"<T> {
    + FirstValueToUniTaskObserver(promise:UniTaskCompletionSource<T>, disposable:SingleAssignmentDisposable, cancellationToken:CancellationToken)
    + OnNext(value:T) : void
    + OnError(error:Exception) : void
    + OnCompleted() : void
}
class "ReturnObservable`1"<T> {
    + ReturnObservable(value:T)
    + Subscribe(observer:IObserver<T>) : IDisposable
}
class "ThrowObservable`1"<T> {
    + ThrowObservable(value:Exception)
    + Subscribe(observer:IObserver<T>) : IDisposable
}
class "IObservable`1"<T> {
}
class "IObserver`1"<T> {
}
class Subscription {
    + Subscription(parent:AsyncSubject<T>, unsubscribeTarget:IObserver<T>)
    + Dispose() : void
}
IDisposable <|- - EmptyDisposable
EmptyDisposable o-> "Instance" EmptyDisposable
IDisposable <|- - SingleAssignmentDisposable
SingleAssignmentDisposable - -> "Disposable" IDisposable
"IObservable`1" "<T>" <|- - "AsyncSubject`1"
"IObserver`1" "<T>" <|- - "AsyncSubject`1"
"IObserver`1" "<T>" <|- - "ListObserver`1"
"IObserver`1" "<T>" <|- - "EmptyObserver`1"
"EmptyObserver`1" o-> "Instance<T>" "EmptyObserver`1"
"IObserver`1" "<T>" <|- - "ThrowObserver`1"
"ThrowObserver`1" o-> "Instance<T>" "ThrowObserver`1"
"IObserver`1" "<T>" <|- - "DisposedObserver`1"
"DisposedObserver`1" o-> "Instance<T>" "DisposedObserver`1"
"ImmutableList`1" o-> "Empty<T>" "ImmutableList`1"
UniTaskObservableExtensions +- - "ToUniTaskObserver`1"
"IObserver`1" "<T>" <|- - "ToUniTaskObserver`1"
UniTaskObservableExtensions +- - "FirstValueToUniTaskObserver`1"
"IObserver`1" "<T>" <|- - "FirstValueToUniTaskObserver`1"
UniTaskObservableExtensions +- - "ReturnObservable`1"
"IObservable`1" "<T>" <|- - "ReturnObservable`1"
UniTaskObservableExtensions +- - "ThrowObservable`1"
"IObservable`1" "<T>" <|- - "ThrowObservable`1"
"AsyncSubject`1" +- - Subscription
IDisposable <|- - Subscription
class UniTaskScheduler <<static>> {
    + {static}  <<event>> UnobservedTaskException : Action<Exception> 
    + {static} PropagateOperationCanceledException : bool = false
}
class UniTaskSynchronizationContext {
    + <<override>> Send(d:SendOrPostCallback, state:object) : void
    + <<override>> Post(d:SendOrPostCallback, state:object) : void
    + <<override>> OperationStarted() : void
    + <<override>> OperationCompleted() : void
    + <<override>> CreateCopy() : SynchronizationContext
}
class Callback <<struct>> {
    + Callback(callback:SendOrPostCallback, state:object)
    + Invoke() : void
}
SynchronizationContext <|- - UniTaskSynchronizationContext
UniTaskSynchronizationContext +- - Callback
class UniTaskVoid <<struct>> {
    + Forget() : void
}
class UnityAsyncExtensions <<static>> <<partial>> {
    + {static} GetAwaiter(asyncOperation:AsyncGPUReadbackRequest) : UniTask<AsyncGPUReadbackRequest>.Awaiter
    + {static} WithCancellation(asyncOperation:AsyncGPUReadbackRequest, cancellationToken:CancellationToken) : UniTask<AsyncGPUReadbackRequest>
    + {static} ToUniTask(asyncOperation:AsyncGPUReadbackRequest, timing:PlayerLoopTiming, cancellationToken:CancellationToken) : UniTask<AsyncGPUReadbackRequest>
}
class AsyncGPUReadbackRequestAwaiterConfiguredSource <<sealed>> {
    + {static} Create(asyncOperation:AsyncGPUReadbackRequest, timing:PlayerLoopTiming, cancellationToken:CancellationToken, token:short) : IUniTaskSource<AsyncGPUReadbackRequest>
    + GetResult(token:short) : AsyncGPUReadbackRequest
    + GetStatus(token:short) : UniTaskStatus
    + UnsafeGetStatus() : UniTaskStatus
    + OnCompleted(continuation:Action<object>, state:object, token:short) : void
    + MoveNext() : bool
}
class "IUniTaskSource`1"<T> {
}
class "ITaskPoolNode`1"<T> {
}
UnityAsyncExtensions +- - AsyncGPUReadbackRequestAwaiterConfiguredSource
"IUniTaskSource`1" "<AsyncGPUReadbackRequest>" <|- - AsyncGPUReadbackRequestAwaiterConfiguredSource
IPlayerLoopItem <|- - AsyncGPUReadbackRequestAwaiterConfiguredSource
"ITaskPoolNode`1" "<AsyncGPUReadbackRequestAwaiterConfiguredSource>" <|- - AsyncGPUReadbackRequestAwaiterConfiguredSource
class UnityAsyncExtensions <<static>> <<partial>> {
    + {static} GetAwaiter(asyncOperation:AsyncOperation) : AsyncOperationAwaiter
    + {static} WithCancellation(asyncOperation:AsyncOperation, cancellationToken:CancellationToken) : UniTask
    + {static} ToUniTask(asyncOperation:AsyncOperation, progress:IProgress<float>, timing:PlayerLoopTiming, cancellationToken:CancellationToken) : UniTask
    + {static} GetAwaiter(asyncOperation:ResourceRequest) : ResourceRequestAwaiter
    + {static} WithCancellation(asyncOperation:ResourceRequest, cancellationToken:CancellationToken) : UniTask<UnityEngine.Object>
    + {static} ToUniTask(asyncOperation:ResourceRequest, progress:IProgress<float>, timing:PlayerLoopTiming, cancellationToken:CancellationToken) : UniTask<UnityEngine.Object>
}
class AsyncOperationAwaiter <<struct>> {
    + AsyncOperationAwaiter(asyncOperation:AsyncOperation)
    + IsCompleted : bool <<get>>
    + GetResult() : void
    + OnCompleted(continuation:Action) : void
    + UnsafeOnCompleted(continuation:Action) : void
}
class AsyncOperationConfiguredSource <<sealed>> {
    + {static} Create(asyncOperation:AsyncOperation, timing:PlayerLoopTiming, progress:IProgress<float>, cancellationToken:CancellationToken, token:short) : IUniTaskSource
    + GetResult(token:short) : void
    + GetStatus(token:short) : UniTaskStatus
    + UnsafeGetStatus() : UniTaskStatus
    + OnCompleted(continuation:Action<object>, state:object, token:short) : void
    + MoveNext() : bool
}
class ResourceRequestAwaiter <<struct>> {
    + ResourceRequestAwaiter(asyncOperation:ResourceRequest)
    + IsCompleted : bool <<get>>
    + GetResult() : UnityEngine.Object
    + OnCompleted(continuation:Action) : void
    + UnsafeOnCompleted(continuation:Action) : void
}
class ResourceRequestConfiguredSource <<sealed>> {
    + {static} Create(asyncOperation:ResourceRequest, timing:PlayerLoopTiming, progress:IProgress<float>, cancellationToken:CancellationToken, token:short) : IUniTaskSource<UnityEngine.Object>
    + GetResult(token:short) : UnityEngine.Object
    + GetStatus(token:short) : UniTaskStatus
    + UnsafeGetStatus() : UniTaskStatus
    + OnCompleted(continuation:Action<object>, state:object, token:short) : void
    + MoveNext() : bool
}
class "ITaskPoolNode`1"<T> {
}
class "IUniTaskSource`1"<T> {
}
UnityAsyncExtensions +- - AsyncOperationAwaiter
ICriticalNotifyCompletion <|- - AsyncOperationAwaiter
UnityAsyncExtensions +- - AsyncOperationConfiguredSource
IUniTaskSource <|- - AsyncOperationConfiguredSource
IPlayerLoopItem <|- - AsyncOperationConfiguredSource
"ITaskPoolNode`1" "<AsyncOperationConfiguredSource>" <|- - AsyncOperationConfiguredSource
UnityAsyncExtensions +- - ResourceRequestAwaiter
ICriticalNotifyCompletion <|- - ResourceRequestAwaiter
UnityAsyncExtensions +- - ResourceRequestConfiguredSource
"IUniTaskSource`1" "<UnityEngine.Object>" <|- - ResourceRequestConfiguredSource
IPlayerLoopItem <|- - ResourceRequestConfiguredSource
"ITaskPoolNode`1" "<ResourceRequestConfiguredSource>" <|- - ResourceRequestConfiguredSource
class UnityAsyncExtensions <<static>> <<partial>> {
    + {static} StartAsyncCoroutine(monoBehaviour:UnityEngine.MonoBehaviour, asyncCoroutine:Func<CancellationToken, UniTask>) : UniTask
}
class UnityAsyncExtensions <<static>> <<partial>> {
    + {static} GetAsyncEventHandler(unityEvent:UnityEvent, cancellationToken:CancellationToken) : AsyncUnityEventHandler
    + {static} OnInvokeAsync(unityEvent:UnityEvent, cancellationToken:CancellationToken) : UniTask
    + {static} OnInvokeAsAsyncEnumerable(unityEvent:UnityEvent, cancellationToken:CancellationToken) : IUniTaskAsyncEnumerable<AsyncUnit>
    + {static} GetAsyncEventHandler(unityEvent:UnityEvent<T>, cancellationToken:CancellationToken) : AsyncUnityEventHandler<T>
    + {static} OnInvokeAsync(unityEvent:UnityEvent<T>, cancellationToken:CancellationToken) : UniTask<T>
    + {static} OnInvokeAsAsyncEnumerable(unityEvent:UnityEvent<T>, cancellationToken:CancellationToken) : IUniTaskAsyncEnumerable<T>
    + {static} GetAsyncClickEventHandler(button:Button) : IAsyncClickEventHandler
    + {static} GetAsyncClickEventHandler(button:Button, cancellationToken:CancellationToken) : IAsyncClickEventHandler
    + {static} OnClickAsync(button:Button) : UniTask
    + {static} OnClickAsync(button:Button, cancellationToken:CancellationToken) : UniTask
    + {static} OnClickAsAsyncEnumerable(button:Button) : IUniTaskAsyncEnumerable<AsyncUnit>
    + {static} OnClickAsAsyncEnumerable(button:Button, cancellationToken:CancellationToken) : IUniTaskAsyncEnumerable<AsyncUnit>
    + {static} GetAsyncValueChangedEventHandler(toggle:Toggle) : IAsyncValueChangedEventHandler<bool>
    + {static} GetAsyncValueChangedEventHandler(toggle:Toggle, cancellationToken:CancellationToken) : IAsyncValueChangedEventHandler<bool>
    + {static} OnValueChangedAsync(toggle:Toggle) : UniTask<bool>
    + {static} OnValueChangedAsync(toggle:Toggle, cancellationToken:CancellationToken) : UniTask<bool>
    + {static} OnValueChangedAsAsyncEnumerable(toggle:Toggle) : IUniTaskAsyncEnumerable<bool>
    + {static} OnValueChangedAsAsyncEnumerable(toggle:Toggle, cancellationToken:CancellationToken) : IUniTaskAsyncEnumerable<bool>
    + {static} GetAsyncValueChangedEventHandler(scrollbar:Scrollbar) : IAsyncValueChangedEventHandler<float>
    + {static} GetAsyncValueChangedEventHandler(scrollbar:Scrollbar, cancellationToken:CancellationToken) : IAsyncValueChangedEventHandler<float>
    + {static} OnValueChangedAsync(scrollbar:Scrollbar) : UniTask<float>
    + {static} OnValueChangedAsync(scrollbar:Scrollbar, cancellationToken:CancellationToken) : UniTask<float>
    + {static} OnValueChangedAsAsyncEnumerable(scrollbar:Scrollbar) : IUniTaskAsyncEnumerable<float>
    + {static} OnValueChangedAsAsyncEnumerable(scrollbar:Scrollbar, cancellationToken:CancellationToken) : IUniTaskAsyncEnumerable<float>
    + {static} GetAsyncValueChangedEventHandler(scrollRect:ScrollRect) : IAsyncValueChangedEventHandler<Vector2>
    + {static} GetAsyncValueChangedEventHandler(scrollRect:ScrollRect, cancellationToken:CancellationToken) : IAsyncValueChangedEventHandler<Vector2>
    + {static} OnValueChangedAsync(scrollRect:ScrollRect) : UniTask<Vector2>
    + {static} OnValueChangedAsync(scrollRect:ScrollRect, cancellationToken:CancellationToken) : UniTask<Vector2>
    + {static} OnValueChangedAsAsyncEnumerable(scrollRect:ScrollRect) : IUniTaskAsyncEnumerable<Vector2>
    + {static} OnValueChangedAsAsyncEnumerable(scrollRect:ScrollRect, cancellationToken:CancellationToken) : IUniTaskAsyncEnumerable<Vector2>
    + {static} GetAsyncValueChangedEventHandler(slider:Slider) : IAsyncValueChangedEventHandler<float>
    + {static} GetAsyncValueChangedEventHandler(slider:Slider, cancellationToken:CancellationToken) : IAsyncValueChangedEventHandler<float>
    + {static} OnValueChangedAsync(slider:Slider) : UniTask<float>
    + {static} OnValueChangedAsync(slider:Slider, cancellationToken:CancellationToken) : UniTask<float>
    + {static} OnValueChangedAsAsyncEnumerable(slider:Slider) : IUniTaskAsyncEnumerable<float>
    + {static} OnValueChangedAsAsyncEnumerable(slider:Slider, cancellationToken:CancellationToken) : IUniTaskAsyncEnumerable<float>
    + {static} GetAsyncEndEditEventHandler(inputField:InputField) : IAsyncEndEditEventHandler<string>
    + {static} GetAsyncEndEditEventHandler(inputField:InputField, cancellationToken:CancellationToken) : IAsyncEndEditEventHandler<string>
    + {static} OnEndEditAsync(inputField:InputField) : UniTask<string>
    + {static} OnEndEditAsync(inputField:InputField, cancellationToken:CancellationToken) : UniTask<string>
    + {static} OnEndEditAsAsyncEnumerable(inputField:InputField) : IUniTaskAsyncEnumerable<string>
    + {static} OnEndEditAsAsyncEnumerable(inputField:InputField, cancellationToken:CancellationToken) : IUniTaskAsyncEnumerable<string>
    + {static} GetAsyncValueChangedEventHandler(inputField:InputField) : IAsyncValueChangedEventHandler<string>
    + {static} GetAsyncValueChangedEventHandler(inputField:InputField, cancellationToken:CancellationToken) : IAsyncValueChangedEventHandler<string>
    + {static} OnValueChangedAsync(inputField:InputField) : UniTask<string>
    + {static} OnValueChangedAsync(inputField:InputField, cancellationToken:CancellationToken) : UniTask<string>
    + {static} OnValueChangedAsAsyncEnumerable(inputField:InputField) : IUniTaskAsyncEnumerable<string>
    + {static} OnValueChangedAsAsyncEnumerable(inputField:InputField, cancellationToken:CancellationToken) : IUniTaskAsyncEnumerable<string>
    + {static} GetAsyncValueChangedEventHandler(dropdown:Dropdown) : IAsyncValueChangedEventHandler<int>
    + {static} GetAsyncValueChangedEventHandler(dropdown:Dropdown, cancellationToken:CancellationToken) : IAsyncValueChangedEventHandler<int>
    + {static} OnValueChangedAsync(dropdown:Dropdown) : UniTask<int>
    + {static} OnValueChangedAsync(dropdown:Dropdown, cancellationToken:CancellationToken) : UniTask<int>
    + {static} OnValueChangedAsAsyncEnumerable(dropdown:Dropdown) : IUniTaskAsyncEnumerable<int>
    + {static} OnValueChangedAsAsyncEnumerable(dropdown:Dropdown, cancellationToken:CancellationToken) : IUniTaskAsyncEnumerable<int>
}
interface IAsyncClickEventHandler {
}
interface "IAsyncValueChangedEventHandler`1"<T> {
}
interface "IAsyncEndEditEventHandler`1"<T> {
}
interface "IAsyncEndTextSelectionEventHandler`1"<T> {
}
interface "IAsyncTextSelectionEventHandler`1"<T> {
}
interface "IAsyncDeselectEventHandler`1"<T> {
}
interface "IAsyncSelectEventHandler`1"<T> {
}
interface "IAsyncSubmitEventHandler`1"<T> {
}
class TextSelectionEventConverter {
    + TextSelectionEventConverter(unityEvent:UnityEvent<string, int, int>)
    + Dispose() : void
}
class AsyncUnityEventHandler {
    + AsyncUnityEventHandler(unityEvent:UnityEvent, cancellationToken:CancellationToken, callOnce:bool)
    + OnInvokeAsync() : UniTask
    + Dispose() : void
}
class "AsyncUnityEventHandler`1"<T> {
    + AsyncUnityEventHandler(unityEvent:UnityEvent<T>, cancellationToken:CancellationToken, callOnce:bool)
    + OnInvokeAsync() : UniTask<T>
    + Dispose() : void
}
class UnityEventHandlerAsyncEnumerable {
    + UnityEventHandlerAsyncEnumerable(unityEvent:UnityEvent, cancellationToken:CancellationToken)
    + GetAsyncEnumerator(cancellationToken:CancellationToken) : IUniTaskAsyncEnumerator<AsyncUnit>
}
class "UnityEventHandlerAsyncEnumerable`1"<T> {
    + UnityEventHandlerAsyncEnumerable(unityEvent:UnityEvent<T>, cancellationToken:CancellationToken)
    + GetAsyncEnumerator(cancellationToken:CancellationToken) : IUniTaskAsyncEnumerator<T>
}
class "UnityEvent`1"<T> {
}
class "IUniTaskSource`1"<T> {
}
class "IUniTaskAsyncEnumerable`1"<T> {
}
class UnityEventHandlerAsyncEnumerator {
    + UnityEventHandlerAsyncEnumerator(unityEvent:UnityEvent, cancellationToken1:CancellationToken, cancellationToken2:CancellationToken)
    + MoveNextAsync() : UniTask<bool>
    + DisposeAsync() : UniTask
}
class UnityEventHandlerAsyncEnumerator {
    + UnityEventHandlerAsyncEnumerator(unityEvent:UnityEvent<T>, cancellationToken1:CancellationToken, cancellationToken2:CancellationToken)
    + MoveNextAsync() : UniTask<bool>
    + DisposeAsync() : UniTask
}
class "IUniTaskAsyncEnumerator`1"<T> {
}
IDisposable <|- - IAsyncClickEventHandler
IDisposable <|- - "IAsyncValueChangedEventHandler`1"
IDisposable <|- - "IAsyncEndEditEventHandler`1"
IDisposable <|- - "IAsyncEndTextSelectionEventHandler`1"
IDisposable <|- - "IAsyncTextSelectionEventHandler`1"
IDisposable <|- - "IAsyncDeselectEventHandler`1"
IDisposable <|- - "IAsyncSelectEventHandler`1"
IDisposable <|- - "IAsyncSubmitEventHandler`1"
"UnityEvent`1" "<(string, int, int)>" <|- - TextSelectionEventConverter
IDisposable <|- - TextSelectionEventConverter
IUniTaskSource <|- - AsyncUnityEventHandler
IDisposable <|- - AsyncUnityEventHandler
IAsyncClickEventHandler <|- - AsyncUnityEventHandler
"IUniTaskSource`1" "<T>" <|- - "AsyncUnityEventHandler`1"
IDisposable <|- - "AsyncUnityEventHandler`1"
"IAsyncValueChangedEventHandler`1" "<T>" <|- - "AsyncUnityEventHandler`1"
"IAsyncEndEditEventHandler`1" "<T>" <|- - "AsyncUnityEventHandler`1"
"IAsyncEndTextSelectionEventHandler`1" "<T>" <|- - "AsyncUnityEventHandler`1"
"IAsyncTextSelectionEventHandler`1" "<T>" <|- - "AsyncUnityEventHandler`1"
"IAsyncDeselectEventHandler`1" "<T>" <|- - "AsyncUnityEventHandler`1"
"IAsyncSelectEventHandler`1" "<T>" <|- - "AsyncUnityEventHandler`1"
"IAsyncSubmitEventHandler`1" "<T>" <|- - "AsyncUnityEventHandler`1"
"IUniTaskAsyncEnumerable`1" "<AsyncUnit>" <|- - UnityEventHandlerAsyncEnumerable
"IUniTaskAsyncEnumerable`1" "<T>" <|- - "UnityEventHandlerAsyncEnumerable`1"
UnityEventHandlerAsyncEnumerable +- - UnityEventHandlerAsyncEnumerator
MoveNextSource <|- - UnityEventHandlerAsyncEnumerator
"IUniTaskAsyncEnumerator`1" "<AsyncUnit>" <|- - UnityEventHandlerAsyncEnumerator
UnityEventHandlerAsyncEnumerator - -> "Current" AsyncUnit
"UnityEventHandlerAsyncEnumerable`1" +- - UnityEventHandlerAsyncEnumerator
MoveNextSource <|- - UnityEventHandlerAsyncEnumerator
"IUniTaskAsyncEnumerator`1" "<T>" <|- - UnityEventHandlerAsyncEnumerator
UnityEventHandlerAsyncEnumerator - -> "Current" T
class UnityBindingExtensions <<static>> {
    + {static} BindTo(source:IUniTaskAsyncEnumerable<string>, text:UnityEngine.UI.Text, rebindOnError:bool) : void
    + {static} BindTo(source:IUniTaskAsyncEnumerable<string>, text:UnityEngine.UI.Text, cancellationToken:CancellationToken, rebindOnError:bool) : void
    + {static} BindTo(source:IUniTaskAsyncEnumerable<T>, text:UnityEngine.UI.Text, rebindOnError:bool) : void
    + {static} BindTo(source:IUniTaskAsyncEnumerable<T>, text:UnityEngine.UI.Text, cancellationToken:CancellationToken, rebindOnError:bool) : void
    + {static} BindTo(source:AsyncReactiveProperty<T>, text:UnityEngine.UI.Text, rebindOnError:bool) : void
    + {static} BindTo(source:IUniTaskAsyncEnumerable<bool>, selectable:Selectable, rebindOnError:bool) : void
    + {static} BindTo(source:IUniTaskAsyncEnumerable<bool>, selectable:Selectable, cancellationToken:CancellationToken, rebindOnError:bool) : void
    + {static} BindTo(source:IUniTaskAsyncEnumerable<TSource>, monoBehaviour:TObject, bindAction:Action<TObject, TSource>, rebindOnError:bool) : void
    + {static} BindTo(source:IUniTaskAsyncEnumerable<TSource>, bindTarget:TObject, bindAction:Action<TObject, TSource>, cancellationToken:CancellationToken, rebindOnError:bool) : void
}
class BurstDisassembler <<partial>> {
}
class ARM64InstructionInfo {
}
BurstDisassembler +- - ARM64InstructionInfo
class BurstDisassembler <<partial>> {
}
class LLVMIRInstructionInfo {
}
BurstDisassembler +- - LLVMIRInstructionInfo
class BurstDisassembler <<partial>> {
}
class WasmInstructionInfo {
}
BurstDisassembler +- - WasmInstructionInfo
class BurstDisassembler <<partial>> {
}
class X86AsmInstructionInfo {
}
BurstDisassembler +- - X86AsmInstructionInfo
class BurstInspectorGUI {
    + BurstInspectorGUI()
    + OnEnable() : void
    + OnDisable() : void
    + Update() : void
    + OnGUI() : void
    + {static} IsBurstError(disassembly:string) : bool
}
class BurstMethodTreeView {
    + BurstMethodTreeView(state:TreeViewState, getFilter:Func<string>, getJobListFilterToggles:Func<(bool,bool)>)
    + Initialize(targets:List<BurstCompileTarget>, identicalTargets:bool) : void
    + <<new>> GetSelection() : IList<int>
}
enum AssemblyOptions {
    PlainWithoutDebugInformation= 0,
    PlainWithDebugInformation= 1,
    EnhancedWithMinimalDebugInformation= 2,
    EnhancedWithFullDebugInformation= 3,
    ColouredWithMinimalDebugInformation= 4,
    ColouredWithFullDebugInformation= 5,
}
enum KeyboardOperation {
    SelectAll,
    Copy,
    MoveLeft,
    MoveRight,
    MoveUp,
    MoveDown,
    Search,
    Escape,
    Enter,
}
EditorWindow <|- - BurstInspectorGUI
TreeView <|- - BurstMethodTreeView
BurstInspectorGUI +- - AssemblyOptions
BurstInspectorGUI +- - KeyboardOperation
class BurstMath <<static>> {
}
class BurstMenu <<static>> {
}
class SearchCriteria <<struct>> {
    + <<override>> Equals(obj:object) : bool
    + <<override>> GetHashCode() : int
}
class BurstStringSearch <<static>> {
}
class LabeledPopup <<static>> {
    + {static} Popup(index:int, display:GUIContent, options:string[]) : int
}
class IntegerWrapper <<struct>> {
    + Value : int <<get>>
    + IntegerWrapper(v:int)
}
class PopperCallBack {
    + PopperCallBack(controlID:int)
}
LabeledPopup +- - IntegerWrapper
LabeledPopup +- - PopperCallBack
PopperCallBack o-> "Instance" PopperCallBack
class LongTextArea {
    + GetText : string <<get>>
    + HasSelection : bool <<get>>
    + NrSearchHits : int <<get>>
    + ActiveSearchNr : int <<get>>
    + SetText(jobName:string, textToRender:string, isDarkMode:bool, disassembler:BurstDisassembler, useDisassembler:bool) : void
    + ExpandAllBlocks() : void
    + FocusCodeBlocks() : void
    + SetDisassembler(disassembler:BurstDisassembler) : void
    + Invalidate() : void
    + Interact(workingArea:Rect, eventT:EventType) : void
    + MoveView(dir:Direction, workingArea:Rect) : void
    + StopSelection() : void
    + NextSearchHit(shift:bool, workingArea:Rect) : void
    + StopSearching() : void
    + Render(style:GUIStyle, workingArea:Rect, showBranchMarkers:bool, doSearch:bool, searchCriteria:SearchCriteria, regx:Regex) : bool
}
class Fragment <<struct>> {
    + lineCount : int
    + text : string
}
enum Direction {
    Left,
    Right,
    Up,
    Down,
}
class Branch <<struct>> {
    + UpperAngle : float
    + LowerAngle : float
    + Branch(edge:BurstDisassembler.AsmEdge, startHorizontal:Rect, verticalLine:Rect, endHorizontal:Rect, upperLine:Rect, lowerLine:Rect, angle1:float, angle2:float)
}
class HoverBox <<struct>> {
    + info : string
    + lineNumber : int
    + valid : bool
}
class FragmentSelectionInfo <<struct>> {
    + startY : float
    + lastY : float
    + botY : float
    + startLineEndIdxRel : int
    + startLine : int
    + lastLine : int
    + charsIn : int
    + charsInDrag : int
}
class LineRegRectsCache <<struct>> {
    + startLine : int
    + endLine : int
    + chosenLine : int
    + LinesRegsCached(pressedLine:int) : bool
    + IsRegisterCachedOrClear(pressedLine:int, firstLine:int, lastLine:int) : bool
    + IsLineHighlightCached(linePressed:int, folded:bool) : bool
    + IsRegistersCached(linePressed:int) : bool
    + UpdateRegisters(firstLine:int, lastLine:int, pressedLine:int, RegRects:List<Rect>[]) : void
    + UpdateLineHighlight(pressedLine:int, rect:Rect, folded:bool) : void
    + Clear() : void
}
enum CachedItem {
    None= 0,
    Line= 1,
    Registers= 2,
}
LongTextArea +- - Fragment
LongTextArea +- - Direction
LongTextArea +- - Branch
Branch - -> "StartHorizontal" Rect
Branch - -> "VerticalLine" Rect
Branch - -> "EndHorizontal" Rect
Branch - -> "UpperLine" Rect
Branch - -> "LowerLine" Rect
LongTextArea +- - HoverBox
HoverBox - -> "box" Rect
LongTextArea +- - FragmentSelectionInfo
LongTextArea +- - LineRegRectsCache
LineRegRectsCache - -> "lineHighlight" Rect
LineRegRectsCache +- - CachedItem
enum OptimizeFor {
    Default= 0,
    Performance= 1,
    Size= 2,
    FastCompilation= 3,
    Balanced= 4,
}
enum FloatMode {
    Default= 0,
    Strict= 1,
    Deterministic= 2,
    Fast= 3,
}
enum FloatPrecision {
    Standard= 0,
    High= 1,
    Medium= 2,
    Low= 3,
}
class BurstCompileAttribute {
    + CompileSynchronously : bool <<get>> <<set>>
    + Debug : bool <<get>> <<set>>
    + DisableSafetyChecks : bool <<get>> <<set>>
    + DisableDirectCall : bool <<get>> <<set>>
    + BurstCompileAttribute()
    + BurstCompileAttribute(floatPrecision:FloatPrecision, floatMode:FloatMode)
}
BurstCompileAttribute - -> "FloatMode" FloatMode
BurstCompileAttribute - -> "FloatPrecision" FloatPrecision
BurstCompileAttribute - -> "OptimizeFor" OptimizeFor
class BurstCompiler <<static>> {
    + {static} IsLoadAdditionalLibrarySupported() : bool
    + {static} IsEnabled : bool <<get>>
    + {static} SetExecutionMode(mode:BurstExecutionEnvironment) : void
    + {static} GetExecutionMode() : BurstExecutionEnvironment
    + {static} <<unsafe>> CompileILPPMethod(burstMethodHandle:RuntimeMethodHandle, managedMethodHandle:RuntimeMethodHandle, delegateTypeHandle:RuntimeTypeHandle) : IntPtr
    + {static} <<unsafe>> CompileILPPMethod2(burstMethodHandle:RuntimeMethodHandle) : IntPtr
    + {static} <<unsafe>> GetILPPMethodFunctionPointer(ilppMethod:IntPtr) : void*
    + {static} <<unsafe>> GetILPPMethodFunctionPointer2(ilppMethod:IntPtr, managedMethodHandle:RuntimeMethodHandle, delegateTypeHandle:RuntimeTypeHandle) : void*
    + {static} <<unsafe>> CompileUnsafeStaticMethod(handle:RuntimeMethodHandle) : void*
    + {static} <<unsafe>> CompileFunctionPointer(delegateMethod:T) : FunctionPointer<T>
}
class CommandBuilder {
    + CommandBuilder()
    + Begin(cmd:string) : CommandBuilder
    + With(arg:string) : CommandBuilder
    + With(arg:IntPtr) : CommandBuilder
    + And(sep:char) : CommandBuilder
    + SendToCompiler() : string
}
class StaticTypeReinitAttribute {
    + StaticTypeReinitAttribute(toReinit:Type)
}
class BurstCompilerHelper <<static>> {
    + {static} <<readonly>> IsBurstGenerated : bool
}
class FakeDelegate {
    + FakeDelegate(method:MethodInfo)
}
BurstCompiler o-> "Options" BurstCompilerOptions
BurstCompiler +- - CommandBuilder
BurstCompiler +- - StaticTypeReinitAttribute
Attribute <|- - StaticTypeReinitAttribute
StaticTypeReinitAttribute - -> "reinitType" Type
BurstCompiler +- - BurstCompilerHelper
BurstCompiler +- - FakeDelegate
FakeDelegate - -> "Method" MethodInfo
enum GlobalSafetyChecksSettingKind {
    Off= 0,
    On= 1,
    ForceOn= 2,
}
class BurstCompilerOptions <<sealed>> <<partial>> {
    + IsEnabled : bool <<get>>
    + EnableBurstCompilation : bool <<get>> <<set>>
    + EnableBurstCompileSynchronously : bool <<get>> <<set>>
    + EnableBurstSafetyChecks : bool <<get>> <<set>>
    + ForceEnableBurstSafetyChecks : bool <<get>> <<set>>
    + EnableBurstDebug : bool <<get>> <<set>>
    + DisableOptimizations : bool <<get>> <<set>>
    + EnableFastMath : bool <<get>> <<set>>
}
enum BurstTargetCpu {
    Auto= 0,
    X86_SSE2= 1,
    X86_SSE4= 2,
    X64_SSE2= 3,
    X64_SSE4= 4,
    AVX= 5,
    AVX2= 6,
    WASM32= 7,
    ARMV7A_NEON32= 8,
    ARMV8A_AARCH64= 9,
    THUMB2_NEON32= 10,
    ARMV8A_AARCH64_HALFFP= 11,
    ARMV9A= 12,
}
enum NativeDumpFlags {
    None= 0,
    IL= 1 << 0,
    Unused= 1 << 1,
    IR= 1 << 2,
    IROptimized= 1 << 3,
    Asm= 1 << 4,
    Function= 1 << 5,
    Analysis= 1 << 6,
    IRPassAnalysis= 1 << 7,
    ILPre= 1 << 8,
    IRPerEntryPoint= 1 << 9,
    All= IL | ILPre | IR | IROptimized | IRPerEntryPoint | Asm | Function | Analysis | IRPassAnalysis,
}
enum CompilationPriority {
    EagerCompilationSynchronous= 0,
    Asynchronous= 1,
    ILPP= 2,
    EagerCompilationAsynchronous= 3,
}
class BurstRuntime <<static>> {
    + {static} GetHashCode32() : int
    + {static} GetHashCode32(type:Type) : int
    + {static} GetHashCode64() : long
    + {static} GetHashCode64(type:Type) : long
    + {static} LoadAdditionalLibrary(pathToLibBurstGenerated:string) : bool
    + <<unsafe>> {static} GetUTF8LiteralPointer(str:string, byteCount:int) : byte*
}
class "HashCode32`1"<T> <<struct>> {
    + {static} <<readonly>> Value : int
}
class "HashCode64`1"<T> <<struct>> {
    + {static} <<readonly>> Value : long
}
class PreserveAttribute {
}
BurstRuntime +- - "HashCode32`1"
BurstRuntime +- - "HashCode64`1"
BurstRuntime +- - PreserveAttribute
class BurstString <<static>> <<partial>> {
    + {static} <<unsafe>> CopyFixedString(dest:byte*, destLength:int, src:byte*, srcLength:int) : void
    + {static} <<unsafe>> Format(dest:byte*, destIndex:int, destLength:int, src:byte*, srcLength:int, formatOptionsRaw:int) : void
    + {static} <<unsafe>> Format(dest:byte*, destIndex:int, destLength:int, value:float, formatOptionsRaw:int) : void
    + {static} <<unsafe>> Format(dest:byte*, destIndex:int, destLength:int, value:double, formatOptionsRaw:int) : void
    + {static} <<unsafe>> Format(dest:byte*, destIndex:int, destLength:int, value:bool, formatOptionsRaw:int) : void
    + {static} <<unsafe>> Format(dest:byte*, destIndex:int, destLength:int, value:char, formatOptionsRaw:int) : void
    + {static} <<unsafe>> Format(dest:byte*, destIndex:int, destLength:int, value:byte, formatOptionsRaw:int) : void
    + {static} <<unsafe>> Format(dest:byte*, destIndex:int, destLength:int, value:ushort, formatOptionsRaw:int) : void
    + {static} <<unsafe>> Format(dest:byte*, destIndex:int, destLength:int, value:uint, formatOptionsRaw:int) : void
    + {static} <<unsafe>> Format(dest:byte*, destIndex:int, destLength:int, value:ulong, formatOptionsRaw:int) : void
    + {static} <<unsafe>> Format(dest:byte*, destIndex:int, destLength:int, value:sbyte, formatOptionsRaw:int) : void
    + {static} <<unsafe>> Format(dest:byte*, destIndex:int, destLength:int, value:short, formatOptionsRaw:int) : void
    + {static} <<unsafe>> Format(dest:byte*, destIndex:int, destLength:int, value:int, formatOptionsRaw:int) : void
    + {static} <<unsafe>> Format(dest:byte*, destIndex:int, destLength:int, value:long, formatOptionsRaw:int) : void
    + {static} ParseFormatToFormatOptions(fullFormat:string) : FormatOptions
}
class PreserveAttribute {
}
enum NumberBufferKind {
    Integer,
    Float,
}
class NumberBuffer <<struct>> {
    + NumberBuffer(kind:NumberBufferKind, buffer:byte*, digitsCount:int, scale:int, isNegative:bool)
    + DigitsCount : int
    + Scale : int
    + <<readonly>> IsNegative : bool
    + GetDigitsPointer() : byte*
}
enum NumberFormatKind {
    General,
    Decimal,
    DecimalForceSigned,
    Hexadecimal,
}
class FormatOptions <<struct>> {
    + FormatOptions(kind:NumberFormatKind, alignAndSize:sbyte, specifier:byte, lowercase:bool)
    + AlignAndSize : sbyte
    + Specifier : byte
    + Lowercase : bool
    + Uppercase : bool <<get>>
    + <<unsafe>> EncodeToRaw() : int
    + GetBase() : int
    + <<override>> ToString() : string
}
BurstString +- - PreserveAttribute
BurstString +- - NumberBufferKind
BurstString +- - NumberBuffer
NumberBuffer - -> "Kind" NumberBufferKind
BurstString +- - NumberFormatKind
BurstString +- - FormatOptions
FormatOptions - -> "Kind" NumberFormatKind
class BurstString <<static>> <<partial>> {
}
class tBigInt <<struct>> {
    + GetLength() : int
    + GetBlock(idx:int) : uint
    + SetZero() : void
    + IsZero() : bool
    + SetU64(val:ulong) : void
    + SetU32(val:uint) : void
    + GetU32() : uint
    + m_length : int
    + <<fixed>> m_blocks : uint
}
enum CutoffMode {
    Unique,
    TotalLength,
    FractionLength,
}
enum PrintFloatFormat {
    Positional,
    Scientific,
}
class tFloatUnion32 <<struct>> {
    + IsNegative() : bool
    + GetExponent() : uint
    + GetMantissa() : uint
    + m_floatingPoint : float
    + m_integer : uint
}
class tFloatUnion64 <<struct>> {
    + IsNegative() : bool
    + GetExponent() : uint
    + GetMantissa() : ulong
    + m_floatingPoint : double
    + m_integer : ulong
}
BurstString +- - tBigInt
BurstString +- - CutoffMode
BurstString +- - PrintFloatFormat
BurstString +- - tFloatUnion32
BurstString +- - tFloatUnion64
enum DiagnosticId {
    ERR_InternalCompilerErrorInBackend= 100,
    ERR_InternalCompilerErrorInFunction= 101,
    ERR_InternalCompilerErrorInInstruction= 102,
    ERR_OnlyStaticMethodsAllowed= 1000,
    ERR_UnableToAccessManagedMethod= 1001,
    ERR_UnableToFindInterfaceMethod= 1002,
    ERR_UnexpectedEmptyMethodBody= 1003,
    ERR_ManagedArgumentsNotSupported= 1004,
    ERR_CatchConstructionNotSupported= 1006,
    ERR_CatchAndFilterConstructionNotSupported= 1007,
    ERR_LdfldaWithFixedArrayExpected= 1008,
    ERR_PointerExpected= 1009,
    ERR_LoadingFieldFromManagedObjectNotSupported= 1010,
    ERR_LoadingFieldWithManagedTypeNotSupported= 1011,
    ERR_LoadingArgumentWithManagedTypeNotSupported= 1012,
    ERR_CallingBurstDiscardMethodWithReturnValueNotSupported= 1015,
    ERR_CallingManagedMethodNotSupported= 1016,
    ERR_InstructionUnboxNotSupported= 1019,
    ERR_InstructionBoxNotSupported= 1020,
    ERR_InstructionNewobjWithManagedTypeNotSupported= 1021,
    ERR_AccessingManagedArrayNotSupported= 1022,
    ERR_InstructionLdtokenFieldNotSupported= 1023,
    ERR_InstructionLdtokenMethodNotSupported= 1024,
    ERR_InstructionLdtokenTypeNotSupported= 1025,
    ERR_InstructionLdtokenNotSupported= 1026,
    ERR_InstructionLdvirtftnNotSupported= 1027,
    ERR_InstructionNewarrNotSupported= 1028,
    ERR_InstructionRethrowNotSupported= 1029,
    ERR_InstructionCastclassNotSupported= 1030,
    ERR_InstructionLdftnNotSupported= 1032,
    ERR_InstructionLdstrNotSupported= 1033,
    ERR_InstructionStsfldNotSupported= 1034,
    ERR_InstructionEndfilterNotSupported= 1035,
    ERR_InstructionEndfinallyNotSupported= 1036,
    ERR_InstructionLeaveNotSupported= 1037,
    ERR_InstructionNotSupported= 1038,
    ERR_LoadingFromStaticFieldNotSupported= 1039,
    ERR_LoadingFromNonReadonlyStaticFieldNotSupported= 1040,
    ERR_LoadingFromManagedStaticFieldNotSupported= 1041,
    ERR_LoadingFromManagedNonReadonlyStaticFieldNotSupported= 1042,
    ERR_InstructionStfldToManagedObjectNotSupported= 1043,
    ERR_InstructionLdlenNonConstantLengthNotSupported= 1044,
    ERR_StructWithAutoLayoutNotSupported= 1045,
    ERR_StructWithGenericParametersAndExplicitLayoutNotSupported= 1047,
    ERR_StructSizeNotSupported= 1048,
    ERR_StructZeroSizeNotSupported= 1049,
    ERR_MarshalAsOnFieldNotSupported= 1050,
    ERR_TypeNotSupported= 1051,
    ERR_RequiredTypeModifierNotSupported= 1052,
    ERR_ErrorWhileProcessingVariable= 1053,
    ERR_UnableToResolveType= 1054,
    ERR_UnableToResolveMethod= 1055,
    ERR_ConstructorNotSupported= 1056,
    ERR_FunctionPointerMethodMissingBurstCompileAttribute= 1057,
    ERR_FunctionPointerTypeMissingBurstCompileAttribute= 1058,
    ERR_FunctionPointerMethodAndTypeMissingBurstCompileAttribute= 1059,
    INF_FunctionPointerMethodAndTypeMissingMonoPInvokeCallbackAttribute= 10590,
    ERR_MarshalAsOnParameterNotSupported= 1061,
    ERR_MarshalAsOnReturnTypeNotSupported= 1062,
    ERR_TypeNotBlittableForFunctionPointer= 1063,
    ERR_StructByValueNotSupported= 1064,
    ERR_StructsWithNonUnicodeCharsNotSupported= 1066,
    ERR_VectorsByValueNotSupported= 1067,
    ERR_MissingExternBindings= 1068,
    ERR_MarshalAsNativeTypeOnReturnTypeNotSupported= 1069,
    ERR_AssertTypeNotSupported= 1071,
    ERR_StoringToReadOnlyFieldNotAllowed= 1072,
    ERR_StoringToFieldInReadOnlyParameterNotAllowed= 1073,
    ERR_StoringToReadOnlyParameterNotAllowed= 1074,
    ERR_TypeManagerStaticFieldNotCompatible= 1075,
    ERR_UnableToFindTypeIndexForTypeManagerType= 1076,
    ERR_UnableToFindFieldForTypeManager= 1077,
    ERR_CircularStaticConstructorUsage= 1090,
    ERR_ExternalInternalCallsInStaticConstructorsNotSupported= 1091,
    ERR_PlatformNotSupported= 1092,
    ERR_InitModuleVerificationError= 1093,
    ERR_ModuleVerificationError= 1094,
    ERR_UnableToFindTypeRequiredForTypeManager= 1095,
    ERR_UnexpectedIntegerTypesForBinaryOperation= 1096,
    ERR_BinaryOperationNotSupported= 1097,
    ERR_CalliWithThisNotSupported= 1098,
    ERR_CalliNonCCallingConventionNotSupported= 1099,
    ERR_StringLiteralTooBig= 1100,
    ERR_LdftnNonCCallingConventionNotSupported= 1101,
    ERR_InstructionTargetCpuFeatureNotAllowedInThisBlock= 1200,
    ERR_AssumeRangeTypeMustBeInteger= 1201,
    ERR_AssumeRangeTypeMustBeSameSign= 1202,
    ERR_UnsupportedSpillTransform= 1300,
    ERR_UnsupportedSpillTransformTooManyUsers= 1301,
    ERR_MethodNotSupported= 1302,
    ERR_VectorsLoadFieldIsAddress= 1303,
    ERR_ConstantExpressionRequired= 1304,
    ERR_PointerArgumentsUnexpectedAliasing= 1310,
    ERR_LoopIntrinsicMustBeCalledInsideLoop= 1320,
    ERR_LoopUnexpectedAutoVectorization= 1321,
    WRN_LoopIntrinsicCalledButLoopOptimizedAway= 1322,
    ERR_AssertArgTypesDiffer= 1330,
    ERR_StringInternalCompilerFixedStringTooManyUsers= 1340,
    ERR_StringInvalidFormatMissingClosingBrace= 1341,
    ERR_StringInvalidIntegerForArgumentIndex= 1342,
    ERR_StringInvalidFormatForArgument= 1343,
    ERR_StringArgumentIndexOutOfRange= 1344,
    ERR_StringInvalidArgumentType= 1345,
    ERR_DebugLogNotSupported= 1346,
    ERR_StringInvalidNonLiteralFormat= 1347,
    ERR_StringInvalidStringFormatMethod= 1348,
    ERR_StringInvalidArgument= 1349,
    ERR_StringArrayInvalidArrayCreation= 1350,
    ERR_StringArrayInvalidArraySize= 1351,
    ERR_StringArrayInvalidControlFlow= 1352,
    ERR_StringArrayInvalidArrayIndex= 1353,
    ERR_StringArrayInvalidArrayIndexOutOfRange= 1354,
    ERR_UnmanagedStringMethodMissing= 1355,
    ERR_UnmanagedStringMethodInvalid= 1356,
    ERR_ManagedStaticConstructor= 1360,
    ERR_StaticConstantArrayInStaticConstructor= 1361,
    WRN_ExceptionThrownInNonSafetyCheckGuardedFunction= 1370,
    WRN_ACallToMethodHasBeenDiscarded= 1371,
    ERR_AccessingNestedManagedArrayNotSupported= 1380,
    ERR_LdobjFromANonPointerNonReference= 1381,
    ERR_StringLiteralRequired= 1382,
    ERR_MultiDimensionalArrayUnsupported= 1383,
    ERR_NonBlittableAndNonManagedSequentialStructNotSupported= 1384,
    ERR_VarArgFunctionNotSupported= 1385,
}
interface IFunctionPointer {
}
class "FunctionPointer`1"<T> <<struct>> {
    + FunctionPointer(ptr:IntPtr)
    + Invoke : T <<get>>
    + IsCreated : bool <<get>>
}
IFunctionPointer <|- - "FunctionPointer`1"
"FunctionPointer`1" - -> "Value" IntPtr
class NoAliasAttribute {
}
Attribute <|- - NoAliasAttribute
class SafeStringArrayHelper <<static>> {
    + {static} SerialiseStringArraySafe(array:string[]) : string
    + {static} DeserialiseStringArraySafe(input:string) : string[]
}
class "SharedStatic`1"<T> <<struct>> {
    + {static} GetOrCreate(alignment:uint) : SharedStatic<T>
    + {static} GetOrCreate(alignment:uint) : SharedStatic<T>
    + {static} GetOrCreateUnsafe(alignment:uint, hashCode:long, subHashCode:long) : SharedStatic<T>
    + {static} GetOrCreatePartiallyUnsafeWithHashCode(alignment:uint, hashCode:long) : SharedStatic<T>
    + {static} GetOrCreatePartiallyUnsafeWithSubHashCode(alignment:uint, subHashCode:long) : SharedStatic<T>
    + {static} GetOrCreate(contextType:Type, alignment:uint) : SharedStatic<T>
    + {static} GetOrCreate(contextType:Type, subContextType:Type, alignment:uint) : SharedStatic<T>
}
class SharedStatic <<static>> {
    + {static} <<unsafe>> GetOrCreateSharedStaticInternal(getHashCode64:long, getSubHashCode64:long, sizeOf:uint, alignment:uint) : void*
}
class PreserveAttribute {
}
SharedStatic +- - PreserveAttribute
class AssemblyResolver {
    + AssemblyResolver(readingMode:ReadingMode)
    + LoadDebugSymbols : bool <<get>> <<set>>
    + LoadFromStream(peStream:Stream, pdbStream:Stream, customSymbolReader:ISymbolReaderProvider) : AssemblyDefinition
    + <<override>> Resolve(name:AssemblyNameReference) : AssemblyDefinition
    + TryResolve(name:AssemblyNameReference, assembly:AssemblyDefinition) : bool
    + <<new>> AddSearchDirectory(directory:string) : void
}
class CustomMetadataResolver {
    + CustomMetadataResolver(assemblyResolver:IAssemblyResolver)
    + <<override>> Resolve(method:MethodReference) : MethodDefinition
}
class CustomSymbolReaderProvider {
    + CustomSymbolReaderProvider(logException:Action<string, Exception>)
    + GetSymbolReader(module:ModuleDefinition, fileName:string) : ISymbolReader
    + GetSymbolReader(module:ModuleDefinition, symbolStream:Stream) : ISymbolReader
}
class SafeDebugReaderProvider {
    + SafeDebugReaderProvider(reader:ISymbolReader)
    + Dispose() : void
    + GetWriterProvider() : ISymbolWriterProvider
    + ProcessDebugHeader(header:ImageDebugHeader) : bool
    + Read(method:MethodDefinition) : MethodDebugInformation
}
BaseAssemblyResolver <|- - AssemblyResolver
AssemblyResolver +- - CustomMetadataResolver
MetadataResolver <|- - CustomMetadataResolver
AssemblyResolver +- - CustomSymbolReaderProvider
ISymbolReaderProvider <|- - CustomSymbolReaderProvider
CustomSymbolReaderProvider +- - SafeDebugReaderProvider
ISymbolReader <|- - SafeDebugReaderProvider
class BurstILPostProcessor {
    + IsDebugging : bool
    + DebuggingLevel : int
    + <<override>> <<unsafe>> Process(compiledAssembly:ICompiledAssembly) : ILPostProcessResult
    + <<override>> GetInstance() : ILPostProcessor
    + <<override>> WillProcess(compiledAssembly:ICompiledAssembly) : bool
}
class CachedAssemblyResolver <<sealed>> {
    + <<override>> Resolve(name:AssemblyNameReference) : AssemblyDefinition
}
ILPostProcessor <|- - BurstILPostProcessor
BurstILPostProcessor +- - CachedAssemblyResolver
AssemblyResolver <|- - CachedAssemblyResolver
class CecilExtensions <<static>> {
    + {static} BuildAssemblyQualifiedName(type:TypeReference, builder:StringBuilder) : void
    + {static} BuildReflectionFullName(type:TypeReference, builder:StringBuilder, assemblyQualified:bool) : void
    + {static} BuildReflectionFullName(type:TypeReference, builder:StringBuilder, elementType:TypeReference, assemblyQualified:bool) : void
}
class FunctionPointerInvokeTransform {
    + <<readonly>> {static} enableInvokeAttribute : bool = true
    + <<readonly>> {static} enableCalliOptimisation : bool = false
    + <<readonly>> {static} enableUnmangedFunctionPointerInject : bool = true
    + FunctionPointerInvokeTransform(loader:AssemblyResolver, error:ErrorDiagnosticDelegate, log:LogDelegate, logLevel:int)
    + Initialize(loader:AssemblyResolver, assemblyDefinition:AssemblyDefinition, typeSystem:TypeSystem) : void
    + Run(assemblyDefinition:AssemblyDefinition) : bool
    + CollectDelegateInvokesFromType(type:TypeDefinition) : void
    + Finish() : bool
    + IsInstructionForFunctionPointerInvoke(m:MethodDefinition, i:Instruction) : bool
}
class CaptureInformation <<struct>> {
}
class "List`1"<T> {
}
FunctionPointerInvokeTransform +- - CaptureInformation
CaptureInformation - -> "Operand" MethodReference
CaptureInformation - -> "Captured<Instruction>" "List`1"
class GenericContext <<struct>> {
    + IsEmpty() : bool
    + Resolve(unresolvedMethod:MethodReference) : MethodReference
    + Resolve(typeReference:TypeReference) : TypeReference
    + {static} GetTypeReferenceForPointerOrReference(typeReference:TypeReference) : TypeReference
    + {static} From(typeReference:TypeReference) : GenericContext
    + {static} From(methodReference:MethodReference, typeReference:TypeReference) : GenericContext
    + {static} ContainsGenericParameters(typeReference:TypeReference) : bool
}
GenericContext o-> "None" GenericContext
class ILPostProcessing {
    + <<const>> PostfixManaged : string = "$BurstManaged"
    + ILPostProcessing(loader:AssemblyResolver, isForEditor:bool, error:ErrorDiagnosticDelegate, log:LogDelegate, logLevel:int, skipInitializeOnLoad:bool)
    + _skipInitializeOnLoad : bool
    + IsForEditor : bool <<get>>
    + Run(assemblyDefinition:AssemblyDefinition) : bool
}
class ILPostProcessingLegacy {
    + ILPostProcessingLegacy(loader:AssemblyResolver, isForEditor:bool, error:ErrorDiagnosticDelegate, log:LogDelegate, logLevel:int, skipInitializeOnLoad:bool)
    + _skipInitializeOnLoad : bool
    + IsForEditor : bool <<get>>
    + Run(assemblyDefinition:AssemblyDefinition) : bool
}
class "AsyncOperation`1"<T> {
    + {static} Run(producer:Func<T>, exceptionHandler:Func<Exception, T>, finalHandler:Action) : AsyncOperation<T>
    + Result : T <<get>>
}
"AsyncOperation`1" - -> "Exception" Exception
class Cli <<static>> {
}
class Discovery <<static>> {
    + {static} FindVSWhere() : void
    + {static} GetVisualStudioInstallations() : IEnumerable<IVisualStudioInstallation>
    + {static} TryDiscoverInstallation(editorPath:string, installation:IVisualStudioInstallation) : bool
}
class VsWhereResult {
    + {static} FromJson(json:string) : VsWhereResult
    + ToVisualStudioInstallations() : IEnumerable<VisualStudioInstallation>
}
class VsWhereEntry {
    + displayName : string
    + isPrerelease : bool
    + productPath : string
}
class VsWhereCatalog {
    + productDisplayVersion : string
    + buildVersion : string
}
Discovery +- - VsWhereResult
Discovery +- - VsWhereEntry
VsWhereEntry - -> "catalog" VsWhereCatalog
Discovery +- - VsWhereCatalog
class FileUtility <<static>> {
    + <<const>> WinSeparator : char = '\\'
    + <<const>> UnixSeparator : char = '/'
    + {static} GetPackageAssetFullPath(components:string[]) : string
    + {static} GetAssetFullPath(asset:string) : string
    + {static} NormalizePathSeparators(path:string) : string
    + {static} NormalizeWindowsToUnix(path:string) : string
    + {static} MakeAbsolutePath(path:string) : string
}
class Image <<sealed>> {
    + {static} IsAssembly(file:string) : bool
    + {static} IsAssembly(stream:Stream) : bool
}
IDisposable <|- - Image
class KnownAssemblies <<static>> {
    + <<const>> Bridge : string = "SyntaxTree.VisualStudio.Unity.Bridge"
    + <<const>> Messaging : string = "SyntaxTree.VisualStudio.Unity.Messaging"
    + <<const>> UnityVS : string = "UnityVS.VersionSpecific"
}
class ProcessRunnerResult {
    + Success : bool <<get>> <<set>>
    + Output : string <<get>> <<set>>
    + Error : string <<get>> <<set>>
}
class ProcessRunner <<static>> {
    + <<const>> DefaultTimeoutInMilliseconds : int = 300000
    + {static} ProcessStartInfoFor(filename:string, arguments:string) : ProcessStartInfo
    + {static} StartAndWaitForExit(filename:string, arguments:string, timeoutms:int, onOutputReceived:Action<string>) : ProcessRunnerResult
    + {static} StartAndWaitForExit(processStartInfo:ProcessStartInfo, timeoutms:int, onOutputReceived:Action<string>) : ProcessRunnerResult
}
class Solution {
}
class SolutionParser <<static>> {
    + {static} ParseSolutionFile(filename:string, fileIO:IFileIO) : Solution
    + {static} ParseSolutionContent(content:string) : Solution
}
class SolutionProjectEntry {
    + ProjectFactoryGuid : string <<get>> <<set>>
    + Name : string <<get>> <<set>>
    + FileName : string <<get>> <<set>>
    + ProjectGuid : string <<get>> <<set>>
    + Metadata : string <<get>> <<set>>
    + IsSolutionFolderProjectFactory() : bool
}
class SolutionProperties {
    + Name : string <<get>> <<set>>
    + Type : string <<get>> <<set>>
}
class "IList`1"<T> {
}
SolutionProperties - -> "Entries<KeyValuePair<string, string>>" "IList`1"
class Symbols <<static>> {
    + {static} IsPortableSymbolFile(pdbFile:string) : bool
}
class UnityInstallation <<static>> {
    + {static} IsMainUnityEditorProcess : bool <<get>>
    + {static} IsInSafeMode : bool <<get>>
    + {static} LatestLanguageVersionSupported(assembly:Assembly) : Version
}
class FileUsage {
    + Path : string
}
class UsageUtility <<static>> {
}
class VersionPair <<struct>> {
    + VersionPair(idemajor:int, ideminor:int, languageMajor:int, languageMinor:int)
}
VersionPair - -> "IdeVersion" Version
VersionPair - -> "LanguageVersion" Version
class VisualStudioEditor {
    + CreateIfDoesntExist() : void
    + Initialize(editorInstallationPath:string) : void
    + <<virtual>> TryGetInstallationForPath(editorPath:string, installation:CodeEditor.Installation) : bool
    + OnGUI() : void
    + SyncIfNeeded(addedFiles:string[], deletedFiles:string[], movedFiles:string[], movedFromFiles:string[], importedFiles:string[]) : void
    + SyncAll() : void
    + OpenProject(path:string, line:int, column:int) : bool
}
enum COMIntegrationState {
    Running,
    DisplayProgressBar,
    ClearProgressBar,
    Exited,
}
IExternalCodeEditor <|- - VisualStudioEditor
VisualStudioEditor +- - COMIntegrationState
interface IVisualStudioInstallation {
}
class VisualStudioInstallation {
    + Name : string <<get>> <<set>>
    + Path : string <<get>> <<set>>
    + IsPrerelease : bool <<get>> <<set>>
    + SupportsAnalyzers : bool <<get>>
    + GetAnalyzers() : string[]
    + ToCodeEditorInstallation() : CodeEditor.Installation
}
IVisualStudioInstallation <|- - VisualStudioInstallation
VisualStudioInstallation - -> "Version" Version
VisualStudioInstallation - -> "LatestLanguageVersionSupported" Version
class VisualStudioIntegration {
}
class Client {
    + LastMessage : double <<get>> <<set>>
}
VisualStudioIntegration +- - Client
Client - -> "EndPoint" IPEndPoint
interface IDiscovery {
}
class VSCodeDiscovery {
    + PathCallback() : CodeEditor.Installation[]
}
IDiscovery <|- - VSCodeDiscovery
class VSCodeScriptEditor {
    + TryGetInstallationForPath(editorPath:string, installation:CodeEditor.Installation) : bool
    + OnGUI() : void
    + CreateIfDoesntExist() : void
    + SyncIfNeeded(addedFiles:string[], deletedFiles:string[], movedFiles:string[], movedFromFiles:string[], importedFiles:string[]) : void
    + SyncAll() : void
    + OpenProject(path:string, line:int, column:int) : bool
    + VSCodeScriptEditor(discovery:IDiscovery, projectGeneration:IGenerator)
    + Initialize(editorInstallationPath:string) : void
}
IExternalCodeEditor <|- - VSCodeScriptEditor
class WindowsOnlyAttribute {
    + WindowsOnlyAttribute(reason:string)
}
class TestCompilerAttribute <<sealed>> {
}
Attribute <|- - WindowsOnlyAttribute
TestCaseAttribute <|- - TestCompilerAttribute
ITestBuilder <|- - TestCompilerAttribute
class bool2 <<struct>> {
    + x : bool
    + y : bool
    + bool2(x:bool, y:bool)
    + bool2(xy:bool2)
    + bool2(v:bool)
    + Equals(rhs:bool2) : bool
    + <<override>> Equals(o:object) : bool
    + <<override>> GetHashCode() : int
    + <<override>> ToString() : string
}
class math <<static>> <<partial>> {
    + {static} bool2(x:bool, y:bool) : bool2
    + {static} bool2(xy:bool2) : bool2
    + {static} bool2(v:bool) : bool2
    + {static} hash(v:bool2) : uint
    + {static} hashwide(v:bool2) : uint2
    + {static} shuffle(left:bool2, right:bool2, x:ShuffleComponent) : bool
    + {static} shuffle(left:bool2, right:bool2, x:ShuffleComponent, y:ShuffleComponent) : bool2
    + {static} shuffle(left:bool2, right:bool2, x:ShuffleComponent, y:ShuffleComponent, z:ShuffleComponent) : bool3
    + {static} shuffle(left:bool2, right:bool2, x:ShuffleComponent, y:ShuffleComponent, z:ShuffleComponent, w:ShuffleComponent) : bool4
}
class "IEquatable`1"<T> {
}
class DebuggerProxy <<sealed>> {
    + x : bool
    + y : bool
    + DebuggerProxy(v:bool2)
}
bool2 - -> "xxxx" bool4
bool2 - -> "xxxy" bool4
bool2 - -> "xxyx" bool4
bool2 - -> "xxyy" bool4
bool2 - -> "xyxx" bool4
bool2 - -> "xyxy" bool4
bool2 - -> "xyyx" bool4
bool2 - -> "xyyy" bool4
bool2 - -> "yxxx" bool4
bool2 - -> "yxxy" bool4
bool2 - -> "yxyx" bool4
bool2 - -> "yxyy" bool4
bool2 - -> "yyxx" bool4
bool2 - -> "yyxy" bool4
bool2 - -> "yyyx" bool4
bool2 - -> "yyyy" bool4
bool2 - -> "xxx" bool3
bool2 - -> "xxy" bool3
bool2 - -> "xyx" bool3
bool2 - -> "xyy" bool3
bool2 - -> "yxx" bool3
bool2 - -> "yxy" bool3
bool2 - -> "yyx" bool3
bool2 - -> "yyy" bool3
bool2 - -> "xx" bool2
bool2 - -> "xy" bool2
bool2 - -> "yx" bool2
bool2 - -> "yy" bool2
bool2 +- - DebuggerProxy
class bool2x2 <<struct>> {
    + bool2x2(c0:bool2, c1:bool2)
    + bool2x2(m00:bool, m01:bool, m10:bool, m11:bool)
    + bool2x2(v:bool)
    + Equals(rhs:bool2x2) : bool
    + <<override>> Equals(o:object) : bool
    + <<override>> GetHashCode() : int
    + <<override>> ToString() : string
}
class math <<static>> <<partial>> {
    + {static} bool2x2(c0:bool2, c1:bool2) : bool2x2
    + {static} bool2x2(m00:bool, m01:bool, m10:bool, m11:bool) : bool2x2
    + {static} bool2x2(v:bool) : bool2x2
    + {static} transpose(v:bool2x2) : bool2x2
    + {static} hash(v:bool2x2) : uint
    + {static} hashwide(v:bool2x2) : uint2
}
class "IEquatable`1"<T> {
}
bool2x2 - -> "c0" bool2
bool2x2 - -> "c1" bool2
class bool2x3 <<struct>> {
    + bool2x3(c0:bool2, c1:bool2, c2:bool2)
    + bool2x3(m00:bool, m01:bool, m02:bool, m10:bool, m11:bool, m12:bool)
    + bool2x3(v:bool)
    + Equals(rhs:bool2x3) : bool
    + <<override>> Equals(o:object) : bool
    + <<override>> GetHashCode() : int
    + <<override>> ToString() : string
}
class math <<static>> <<partial>> {
    + {static} bool2x3(c0:bool2, c1:bool2, c2:bool2) : bool2x3
    + {static} bool2x3(m00:bool, m01:bool, m02:bool, m10:bool, m11:bool, m12:bool) : bool2x3
    + {static} bool2x3(v:bool) : bool2x3
    + {static} transpose(v:bool2x3) : bool3x2
    + {static} hash(v:bool2x3) : uint
    + {static} hashwide(v:bool2x3) : uint2
}
class "IEquatable`1"<T> {
}
bool2x3 - -> "c0" bool2
bool2x3 - -> "c1" bool2
bool2x3 - -> "c2" bool2
class bool2x4 <<struct>> {
    + bool2x4(c0:bool2, c1:bool2, c2:bool2, c3:bool2)
    + bool2x4(m00:bool, m01:bool, m02:bool, m03:bool, m10:bool, m11:bool, m12:bool, m13:bool)
    + bool2x4(v:bool)
    + Equals(rhs:bool2x4) : bool
    + <<override>> Equals(o:object) : bool
    + <<override>> GetHashCode() : int
    + <<override>> ToString() : string
}
class math <<static>> <<partial>> {
    + {static} bool2x4(c0:bool2, c1:bool2, c2:bool2, c3:bool2) : bool2x4
    + {static} bool2x4(m00:bool, m01:bool, m02:bool, m03:bool, m10:bool, m11:bool, m12:bool, m13:bool) : bool2x4
    + {static} bool2x4(v:bool) : bool2x4
    + {static} transpose(v:bool2x4) : bool4x2
    + {static} hash(v:bool2x4) : uint
    + {static} hashwide(v:bool2x4) : uint2
}
class "IEquatable`1"<T> {
}
bool2x4 - -> "c0" bool2
bool2x4 - -> "c1" bool2
bool2x4 - -> "c2" bool2
bool2x4 - -> "c3" bool2
class bool3 <<struct>> {
    + x : bool
    + y : bool
    + z : bool
    + bool3(x:bool, y:bool, z:bool)
    + bool3(x:bool, yz:bool2)
    + bool3(xy:bool2, z:bool)
    + bool3(xyz:bool3)
    + bool3(v:bool)
    + Equals(rhs:bool3) : bool
    + <<override>> Equals(o:object) : bool
    + <<override>> GetHashCode() : int
    + <<override>> ToString() : string
}
class math <<static>> <<partial>> {
    + {static} bool3(x:bool, y:bool, z:bool) : bool3
    + {static} bool3(x:bool, yz:bool2) : bool3
    + {static} bool3(xy:bool2, z:bool) : bool3
    + {static} bool3(xyz:bool3) : bool3
    + {static} bool3(v:bool) : bool3
    + {static} hash(v:bool3) : uint
    + {static} hashwide(v:bool3) : uint3
    + {static} shuffle(left:bool3, right:bool3, x:ShuffleComponent) : bool
    + {static} shuffle(left:bool3, right:bool3, x:ShuffleComponent, y:ShuffleComponent) : bool2
    + {static} shuffle(left:bool3, right:bool3, x:ShuffleComponent, y:ShuffleComponent, z:ShuffleComponent) : bool3
    + {static} shuffle(left:bool3, right:bool3, x:ShuffleComponent, y:ShuffleComponent, z:ShuffleComponent, w:ShuffleComponent) : bool4
}
class "IEquatable`1"<T> {
}
class DebuggerProxy <<sealed>> {
    + x : bool
    + y : bool
    + z : bool
    + DebuggerProxy(v:bool3)
}
bool3 - -> "xxxx" bool4
bool3 - -> "xxxy" bool4
bool3 - -> "xxxz" bool4
bool3 - -> "xxyx" bool4
bool3 - -> "xxyy" bool4
bool3 - -> "xxyz" bool4
bool3 - -> "xxzx" bool4
bool3 - -> "xxzy" bool4
bool3 - -> "xxzz" bool4
bool3 - -> "xyxx" bool4
bool3 - -> "xyxy" bool4
bool3 - -> "xyxz" bool4
bool3 - -> "xyyx" bool4
bool3 - -> "xyyy" bool4
bool3 - -> "xyyz" bool4
bool3 - -> "xyzx" bool4
bool3 - -> "xyzy" bool4
bool3 - -> "xyzz" bool4
bool3 - -> "xzxx" bool4
bool3 - -> "xzxy" bool4
bool3 - -> "xzxz" bool4
bool3 - -> "xzyx" bool4
bool3 - -> "xzyy" bool4
bool3 - -> "xzyz" bool4
bool3 - -> "xzzx" bool4
bool3 - -> "xzzy" bool4
bool3 - -> "xzzz" bool4
bool3 - -> "yxxx" bool4
bool3 - -> "yxxy" bool4
bool3 - -> "yxxz" bool4
bool3 - -> "yxyx" bool4
bool3 - -> "yxyy" bool4
bool3 - -> "yxyz" bool4
bool3 - -> "yxzx" bool4
bool3 - -> "yxzy" bool4
bool3 - -> "yxzz" bool4
bool3 - -> "yyxx" bool4
bool3 - -> "yyxy" bool4
bool3 - -> "yyxz" bool4
bool3 - -> "yyyx" bool4
bool3 - -> "yyyy" bool4
bool3 - -> "yyyz" bool4
bool3 - -> "yyzx" bool4
bool3 - -> "yyzy" bool4
bool3 - -> "yyzz" bool4
bool3 - -> "yzxx" bool4
bool3 - -> "yzxy" bool4
bool3 - -> "yzxz" bool4
bool3 - -> "yzyx" bool4
bool3 - -> "yzyy" bool4
bool3 - -> "yzyz" bool4
bool3 - -> "yzzx" bool4
bool3 - -> "yzzy" bool4
bool3 - -> "yzzz" bool4
bool3 - -> "zxxx" bool4
bool3 - -> "zxxy" bool4
bool3 - -> "zxxz" bool4
bool3 - -> "zxyx" bool4
bool3 - -> "zxyy" bool4
bool3 - -> "zxyz" bool4
bool3 - -> "zxzx" bool4
bool3 - -> "zxzy" bool4
bool3 - -> "zxzz" bool4
bool3 - -> "zyxx" bool4
bool3 - -> "zyxy" bool4
bool3 - -> "zyxz" bool4
bool3 - -> "zyyx" bool4
bool3 - -> "zyyy" bool4
bool3 - -> "zyyz" bool4
bool3 - -> "zyzx" bool4
bool3 - -> "zyzy" bool4
bool3 - -> "zyzz" bool4
bool3 - -> "zzxx" bool4
bool3 - -> "zzxy" bool4
bool3 - -> "zzxz" bool4
bool3 - -> "zzyx" bool4
bool3 - -> "zzyy" bool4
bool3 - -> "zzyz" bool4
bool3 - -> "zzzx" bool4
bool3 - -> "zzzy" bool4
bool3 - -> "zzzz" bool4
bool3 - -> "xxx" bool3
bool3 - -> "xxy" bool3
bool3 - -> "xxz" bool3
bool3 - -> "xyx" bool3
bool3 - -> "xyy" bool3
bool3 - -> "xyz" bool3
bool3 - -> "xzx" bool3
bool3 - -> "xzy" bool3
bool3 - -> "xzz" bool3
bool3 - -> "yxx" bool3
bool3 - -> "yxy" bool3
bool3 - -> "yxz" bool3
bool3 - -> "yyx" bool3
bool3 - -> "yyy" bool3
bool3 - -> "yyz" bool3
bool3 - -> "yzx" bool3
bool3 - -> "yzy" bool3
bool3 - -> "yzz" bool3
bool3 - -> "zxx" bool3
bool3 - -> "zxy" bool3
bool3 - -> "zxz" bool3
bool3 - -> "zyx" bool3
bool3 - -> "zyy" bool3
bool3 - -> "zyz" bool3
bool3 - -> "zzx" bool3
bool3 - -> "zzy" bool3
bool3 - -> "zzz" bool3
bool3 - -> "xx" bool2
bool3 - -> "xy" bool2
bool3 - -> "xz" bool2
bool3 - -> "yx" bool2
bool3 - -> "yy" bool2
bool3 - -> "yz" bool2
bool3 - -> "zx" bool2
bool3 - -> "zy" bool2
bool3 - -> "zz" bool2
bool3 +- - DebuggerProxy
class bool3x2 <<struct>> {
    + bool3x2(c0:bool3, c1:bool3)
    + bool3x2(m00:bool, m01:bool, m10:bool, m11:bool, m20:bool, m21:bool)
    + bool3x2(v:bool)
    + Equals(rhs:bool3x2) : bool
    + <<override>> Equals(o:object) : bool
    + <<override>> GetHashCode() : int
    + <<override>> ToString() : string
}
class math <<static>> <<partial>> {
    + {static} bool3x2(c0:bool3, c1:bool3) : bool3x2
    + {static} bool3x2(m00:bool, m01:bool, m10:bool, m11:bool, m20:bool, m21:bool) : bool3x2
    + {static} bool3x2(v:bool) : bool3x2
    + {static} transpose(v:bool3x2) : bool2x3
    + {static} hash(v:bool3x2) : uint
    + {static} hashwide(v:bool3x2) : uint3
}
class "IEquatable`1"<T> {
}
bool3x2 - -> "c0" bool3
bool3x2 - -> "c1" bool3
class bool3x3 <<struct>> {
    + bool3x3(c0:bool3, c1:bool3, c2:bool3)
    + bool3x3(m00:bool, m01:bool, m02:bool, m10:bool, m11:bool, m12:bool, m20:bool, m21:bool, m22:bool)
    + bool3x3(v:bool)
    + Equals(rhs:bool3x3) : bool
    + <<override>> Equals(o:object) : bool
    + <<override>> GetHashCode() : int
    + <<override>> ToString() : string
}
class math <<static>> <<partial>> {
    + {static} bool3x3(c0:bool3, c1:bool3, c2:bool3) : bool3x3
    + {static} bool3x3(m00:bool, m01:bool, m02:bool, m10:bool, m11:bool, m12:bool, m20:bool, m21:bool, m22:bool) : bool3x3
    + {static} bool3x3(v:bool) : bool3x3
    + {static} transpose(v:bool3x3) : bool3x3
    + {static} hash(v:bool3x3) : uint
    + {static} hashwide(v:bool3x3) : uint3
}
class "IEquatable`1"<T> {
}
bool3x3 - -> "c0" bool3
bool3x3 - -> "c1" bool3
bool3x3 - -> "c2" bool3
class bool3x4 <<struct>> {
    + bool3x4(c0:bool3, c1:bool3, c2:bool3, c3:bool3)
    + bool3x4(m00:bool, m01:bool, m02:bool, m03:bool, m10:bool, m11:bool, m12:bool, m13:bool, m20:bool, m21:bool, m22:bool, m23:bool)
    + bool3x4(v:bool)
    + Equals(rhs:bool3x4) : bool
    + <<override>> Equals(o:object) : bool
    + <<override>> GetHashCode() : int
    + <<override>> ToString() : string
}
class math <<static>> <<partial>> {
    + {static} bool3x4(c0:bool3, c1:bool3, c2:bool3, c3:bool3) : bool3x4
    + {static} bool3x4(m00:bool, m01:bool, m02:bool, m03:bool, m10:bool, m11:bool, m12:bool, m13:bool, m20:bool, m21:bool, m22:bool, m23:bool) : bool3x4
    + {static} bool3x4(v:bool) : bool3x4
    + {static} transpose(v:bool3x4) : bool4x3
    + {static} hash(v:bool3x4) : uint
    + {static} hashwide(v:bool3x4) : uint3
}
class "IEquatable`1"<T> {
}
bool3x4 - -> "c0" bool3
bool3x4 - -> "c1" bool3
bool3x4 - -> "c2" bool3
bool3x4 - -> "c3" bool3
class bool4 <<struct>> {
    + x : bool
    + y : bool
    + z : bool
    + w : bool
    + bool4(x:bool, y:bool, z:bool, w:bool)
    + bool4(x:bool, y:bool, zw:bool2)
    + bool4(x:bool, yz:bool2, w:bool)
    + bool4(x:bool, yzw:bool3)
    + bool4(xy:bool2, z:bool, w:bool)
    + bool4(xy:bool2, zw:bool2)
    + bool4(xyz:bool3, w:bool)
    + bool4(xyzw:bool4)
    + bool4(v:bool)
    + Equals(rhs:bool4) : bool
    + <<override>> Equals(o:object) : bool
    + <<override>> GetHashCode() : int
    + <<override>> ToString() : string
}
class math <<static>> <<partial>> {
    + {static} bool4(x:bool, y:bool, z:bool, w:bool) : bool4
    + {static} bool4(x:bool, y:bool, zw:bool2) : bool4
    + {static} bool4(x:bool, yz:bool2, w:bool) : bool4
    + {static} bool4(x:bool, yzw:bool3) : bool4
    + {static} bool4(xy:bool2, z:bool, w:bool) : bool4
    + {static} bool4(xy:bool2, zw:bool2) : bool4
    + {static} bool4(xyz:bool3, w:bool) : bool4
    + {static} bool4(xyzw:bool4) : bool4
    + {static} bool4(v:bool) : bool4
    + {static} hash(v:bool4) : uint
    + {static} hashwide(v:bool4) : uint4
    + {static} shuffle(left:bool4, right:bool4, x:ShuffleComponent) : bool
    + {static} shuffle(left:bool4, right:bool4, x:ShuffleComponent, y:ShuffleComponent) : bool2
    + {static} shuffle(left:bool4, right:bool4, x:ShuffleComponent, y:ShuffleComponent, z:ShuffleComponent) : bool3
    + {static} shuffle(left:bool4, right:bool4, x:ShuffleComponent, y:ShuffleComponent, z:ShuffleComponent, w:ShuffleComponent) : bool4
}
class "IEquatable`1"<T> {
}
class DebuggerProxy <<sealed>> {
    + x : bool
    + y : bool
    + z : bool
    + w : bool
    + DebuggerProxy(v:bool4)
}
bool4 - -> "xxxx" bool4
bool4 - -> "xxxy" bool4
bool4 - -> "xxxz" bool4
bool4 - -> "xxxw" bool4
bool4 - -> "xxyx" bool4
bool4 - -> "xxyy" bool4
bool4 - -> "xxyz" bool4
bool4 - -> "xxyw" bool4
bool4 - -> "xxzx" bool4
bool4 - -> "xxzy" bool4
bool4 - -> "xxzz" bool4
bool4 - -> "xxzw" bool4
bool4 - -> "xxwx" bool4
bool4 - -> "xxwy" bool4
bool4 - -> "xxwz" bool4
bool4 - -> "xxww" bool4
bool4 - -> "xyxx" bool4
bool4 - -> "xyxy" bool4
bool4 - -> "xyxz" bool4
bool4 - -> "xyxw" bool4
bool4 - -> "xyyx" bool4
bool4 - -> "xyyy" bool4
bool4 - -> "xyyz" bool4
bool4 - -> "xyyw" bool4
bool4 - -> "xyzx" bool4
bool4 - -> "xyzy" bool4
bool4 - -> "xyzz" bool4
bool4 - -> "xyzw" bool4
bool4 - -> "xywx" bool4
bool4 - -> "xywy" bool4
bool4 - -> "xywz" bool4
bool4 - -> "xyww" bool4
bool4 - -> "xzxx" bool4
bool4 - -> "xzxy" bool4
bool4 - -> "xzxz" bool4
bool4 - -> "xzxw" bool4
bool4 - -> "xzyx" bool4
bool4 - -> "xzyy" bool4
bool4 - -> "xzyz" bool4
bool4 - -> "xzyw" bool4
bool4 - -> "xzzx" bool4
bool4 - -> "xzzy" bool4
bool4 - -> "xzzz" bool4
bool4 - -> "xzzw" bool4
bool4 - -> "xzwx" bool4
bool4 - -> "xzwy" bool4
bool4 - -> "xzwz" bool4
bool4 - -> "xzww" bool4
bool4 - -> "xwxx" bool4
bool4 - -> "xwxy" bool4
bool4 - -> "xwxz" bool4
bool4 - -> "xwxw" bool4
bool4 - -> "xwyx" bool4
bool4 - -> "xwyy" bool4
bool4 - -> "xwyz" bool4
bool4 - -> "xwyw" bool4
bool4 - -> "xwzx" bool4
bool4 - -> "xwzy" bool4
bool4 - -> "xwzz" bool4
bool4 - -> "xwzw" bool4
bool4 - -> "xwwx" bool4
bool4 - -> "xwwy" bool4
bool4 - -> "xwwz" bool4
bool4 - -> "xwww" bool4
bool4 - -> "yxxx" bool4
bool4 - -> "yxxy" bool4
bool4 - -> "yxxz" bool4
bool4 - -> "yxxw" bool4
bool4 - -> "yxyx" bool4
bool4 - -> "yxyy" bool4
bool4 - -> "yxyz" bool4
bool4 - -> "yxyw" bool4
bool4 - -> "yxzx" bool4
bool4 - -> "yxzy" bool4
bool4 - -> "yxzz" bool4
bool4 - -> "yxzw" bool4
bool4 - -> "yxwx" bool4
bool4 - -> "yxwy" bool4
bool4 - -> "yxwz" bool4
bool4 - -> "yxww" bool4
bool4 - -> "yyxx" bool4
bool4 - -> "yyxy" bool4
bool4 - -> "yyxz" bool4
bool4 - -> "yyxw" bool4
bool4 - -> "yyyx" bool4
bool4 - -> "yyyy" bool4
bool4 - -> "yyyz" bool4
bool4 - -> "yyyw" bool4
bool4 - -> "yyzx" bool4
bool4 - -> "yyzy" bool4
bool4 - -> "yyzz" bool4
bool4 - -> "yyzw" bool4
bool4 - -> "yywx" bool4
bool4 - -> "yywy" bool4
bool4 - -> "yywz" bool4
bool4 - -> "yyww" bool4
bool4 - -> "yzxx" bool4
bool4 - -> "yzxy" bool4
bool4 - -> "yzxz" bool4
bool4 - -> "yzxw" bool4
bool4 - -> "yzyx" bool4
bool4 - -> "yzyy" bool4
bool4 - -> "yzyz" bool4
bool4 - -> "yzyw" bool4
bool4 - -> "yzzx" bool4
bool4 - -> "yzzy" bool4
bool4 - -> "yzzz" bool4
bool4 - -> "yzzw" bool4
bool4 - -> "yzwx" bool4
bool4 - -> "yzwy" bool4
bool4 - -> "yzwz" bool4
bool4 - -> "yzww" bool4
bool4 - -> "ywxx" bool4
bool4 - -> "ywxy" bool4
bool4 - -> "ywxz" bool4
bool4 - -> "ywxw" bool4
bool4 - -> "ywyx" bool4
bool4 - -> "ywyy" bool4
bool4 - -> "ywyz" bool4
bool4 - -> "ywyw" bool4
bool4 - -> "ywzx" bool4
bool4 - -> "ywzy" bool4
bool4 - -> "ywzz" bool4
bool4 - -> "ywzw" bool4
bool4 - -> "ywwx" bool4
bool4 - -> "ywwy" bool4
bool4 - -> "ywwz" bool4
bool4 - -> "ywww" bool4
bool4 - -> "zxxx" bool4
bool4 - -> "zxxy" bool4
bool4 - -> "zxxz" bool4
bool4 - -> "zxxw" bool4
bool4 - -> "zxyx" bool4
bool4 - -> "zxyy" bool4
bool4 - -> "zxyz" bool4
bool4 - -> "zxyw" bool4
bool4 - -> "zxzx" bool4
bool4 - -> "zxzy" bool4
bool4 - -> "zxzz" bool4
bool4 - -> "zxzw" bool4
bool4 - -> "zxwx" bool4
bool4 - -> "zxwy" bool4
bool4 - -> "zxwz" bool4
bool4 - -> "zxww" bool4
bool4 - -> "zyxx" bool4
bool4 - -> "zyxy" bool4
bool4 - -> "zyxz" bool4
bool4 - -> "zyxw" bool4
bool4 - -> "zyyx" bool4
bool4 - -> "zyyy" bool4
bool4 - -> "zyyz" bool4
bool4 - -> "zyyw" bool4
bool4 - -> "zyzx" bool4
bool4 - -> "zyzy" bool4
bool4 - -> "zyzz" bool4
bool4 - -> "zyzw" bool4
bool4 - -> "zywx" bool4
bool4 - -> "zywy" bool4
bool4 - -> "zywz" bool4
bool4 - -> "zyww" bool4
bool4 - -> "zzxx" bool4
bool4 - -> "zzxy" bool4
bool4 - -> "zzxz" bool4
bool4 - -> "zzxw" bool4
bool4 - -> "zzyx" bool4
bool4 - -> "zzyy" bool4
bool4 - -> "zzyz" bool4
bool4 - -> "zzyw" bool4
bool4 - -> "zzzx" bool4
bool4 - -> "zzzy" bool4
bool4 - -> "zzzz" bool4
bool4 - -> "zzzw" bool4
bool4 - -> "zzwx" bool4
bool4 - -> "zzwy" bool4
bool4 - -> "zzwz" bool4
bool4 - -> "zzww" bool4
bool4 - -> "zwxx" bool4
bool4 - -> "zwxy" bool4
bool4 - -> "zwxz" bool4
bool4 - -> "zwxw" bool4
bool4 - -> "zwyx" bool4
bool4 - -> "zwyy" bool4
bool4 - -> "zwyz" bool4
bool4 - -> "zwyw" bool4
bool4 - -> "zwzx" bool4
bool4 - -> "zwzy" bool4
bool4 - -> "zwzz" bool4
bool4 - -> "zwzw" bool4
bool4 - -> "zwwx" bool4
bool4 - -> "zwwy" bool4
bool4 - -> "zwwz" bool4
bool4 - -> "zwww" bool4
bool4 - -> "wxxx" bool4
bool4 - -> "wxxy" bool4
bool4 - -> "wxxz" bool4
bool4 - -> "wxxw" bool4
bool4 - -> "wxyx" bool4
bool4 - -> "wxyy" bool4
bool4 - -> "wxyz" bool4
bool4 - -> "wxyw" bool4
bool4 - -> "wxzx" bool4
bool4 - -> "wxzy" bool4
bool4 - -> "wxzz" bool4
bool4 - -> "wxzw" bool4
bool4 - -> "wxwx" bool4
bool4 - -> "wxwy" bool4
bool4 - -> "wxwz" bool4
bool4 - -> "wxww" bool4
bool4 - -> "wyxx" bool4
bool4 - -> "wyxy" bool4
bool4 - -> "wyxz" bool4
bool4 - -> "wyxw" bool4
bool4 - -> "wyyx" bool4
bool4 - -> "wyyy" bool4
bool4 - -> "wyyz" bool4
bool4 - -> "wyyw" bool4
bool4 - -> "wyzx" bool4
bool4 - -> "wyzy" bool4
bool4 - -> "wyzz" bool4
bool4 - -> "wyzw" bool4
bool4 - -> "wywx" bool4
bool4 - -> "wywy" bool4
bool4 - -> "wywz" bool4
bool4 - -> "wyww" bool4
bool4 - -> "wzxx" bool4
bool4 - -> "wzxy" bool4
bool4 - -> "wzxz" bool4
bool4 - -> "wzxw" bool4
bool4 - -> "wzyx" bool4
bool4 - -> "wzyy" bool4
bool4 - -> "wzyz" bool4
bool4 - -> "wzyw" bool4
bool4 - -> "wzzx" bool4
bool4 - -> "wzzy" bool4
bool4 - -> "wzzz" bool4
bool4 - -> "wzzw" bool4
bool4 - -> "wzwx" bool4
bool4 - -> "wzwy" bool4
bool4 - -> "wzwz" bool4
bool4 - -> "wzww" bool4
bool4 - -> "wwxx" bool4
bool4 - -> "wwxy" bool4
bool4 - -> "wwxz" bool4
bool4 - -> "wwxw" bool4
bool4 - -> "wwyx" bool4
bool4 - -> "wwyy" bool4
bool4 - -> "wwyz" bool4
bool4 - -> "wwyw" bool4
bool4 - -> "wwzx" bool4
bool4 - -> "wwzy" bool4
bool4 - -> "wwzz" bool4
bool4 - -> "wwzw" bool4
bool4 - -> "wwwx" bool4
bool4 - -> "wwwy" bool4
bool4 - -> "wwwz" bool4
bool4 - -> "wwww" bool4
bool4 - -> "xxx" bool3
bool4 - -> "xxy" bool3
bool4 - -> "xxz" bool3
bool4 - -> "xxw" bool3
bool4 - -> "xyx" bool3
bool4 - -> "xyy" bool3
bool4 - -> "xyz" bool3
bool4 - -> "xyw" bool3
bool4 - -> "xzx" bool3
bool4 - -> "xzy" bool3
bool4 - -> "xzz" bool3
bool4 - -> "xzw" bool3
bool4 - -> "xwx" bool3
bool4 - -> "xwy" bool3
bool4 - -> "xwz" bool3
bool4 - -> "xww" bool3
bool4 - -> "yxx" bool3
bool4 - -> "yxy" bool3
bool4 - -> "yxz" bool3
bool4 - -> "yxw" bool3
bool4 - -> "yyx" bool3
bool4 - -> "yyy" bool3
bool4 - -> "yyz" bool3
bool4 - -> "yyw" bool3
bool4 - -> "yzx" bool3
bool4 - -> "yzy" bool3
bool4 - -> "yzz" bool3
bool4 - -> "yzw" bool3
bool4 - -> "ywx" bool3
bool4 - -> "ywy" bool3
bool4 - -> "ywz" bool3
bool4 - -> "yww" bool3
bool4 - -> "zxx" bool3
bool4 - -> "zxy" bool3
bool4 - -> "zxz" bool3
bool4 - -> "zxw" bool3
bool4 - -> "zyx" bool3
bool4 - -> "zyy" bool3
bool4 - -> "zyz" bool3
bool4 - -> "zyw" bool3
bool4 - -> "zzx" bool3
bool4 - -> "zzy" bool3
bool4 - -> "zzz" bool3
bool4 - -> "zzw" bool3
bool4 - -> "zwx" bool3
bool4 - -> "zwy" bool3
bool4 - -> "zwz" bool3
bool4 - -> "zww" bool3
bool4 - -> "wxx" bool3
bool4 - -> "wxy" bool3
bool4 - -> "wxz" bool3
bool4 - -> "wxw" bool3
bool4 - -> "wyx" bool3
bool4 - -> "wyy" bool3
bool4 - -> "wyz" bool3
bool4 - -> "wyw" bool3
bool4 - -> "wzx" bool3
bool4 - -> "wzy" bool3
bool4 - -> "wzz" bool3
bool4 - -> "wzw" bool3
bool4 - -> "wwx" bool3
bool4 - -> "wwy" bool3
bool4 - -> "wwz" bool3
bool4 - -> "www" bool3
bool4 - -> "xx" bool2
bool4 - -> "xy" bool2
bool4 - -> "xz" bool2
bool4 - -> "xw" bool2
bool4 - -> "yx" bool2
bool4 - -> "yy" bool2
bool4 - -> "yz" bool2
bool4 - -> "yw" bool2
bool4 - -> "zx" bool2
bool4 - -> "zy" bool2
bool4 - -> "zz" bool2
bool4 - -> "zw" bool2
bool4 - -> "wx" bool2
bool4 - -> "wy" bool2
bool4 - -> "wz" bool2
bool4 - -> "ww" bool2
bool4 +- - DebuggerProxy
class bool4x2 <<struct>> {
    + bool4x2(c0:bool4, c1:bool4)
    + bool4x2(m00:bool, m01:bool, m10:bool, m11:bool, m20:bool, m21:bool, m30:bool, m31:bool)
    + bool4x2(v:bool)
    + Equals(rhs:bool4x2) : bool
    + <<override>> Equals(o:object) : bool
    + <<override>> GetHashCode() : int
    + <<override>> ToString() : string
}
class math <<static>> <<partial>> {
    + {static} bool4x2(c0:bool4, c1:bool4) : bool4x2
    + {static} bool4x2(m00:bool, m01:bool, m10:bool, m11:bool, m20:bool, m21:bool, m30:bool, m31:bool) : bool4x2
    + {static} bool4x2(v:bool) : bool4x2
    + {static} transpose(v:bool4x2) : bool2x4
    + {static} hash(v:bool4x2) : uint
    + {static} hashwide(v:bool4x2) : uint4
}
class "IEquatable`1"<T> {
}
bool4x2 - -> "c0" bool4
bool4x2 - -> "c1" bool4
class bool4x3 <<struct>> {
    + bool4x3(c0:bool4, c1:bool4, c2:bool4)
    + bool4x3(m00:bool, m01:bool, m02:bool, m10:bool, m11:bool, m12:bool, m20:bool, m21:bool, m22:bool, m30:bool, m31:bool, m32:bool)
    + bool4x3(v:bool)
    + Equals(rhs:bool4x3) : bool
    + <<override>> Equals(o:object) : bool
    + <<override>> GetHashCode() : int
    + <<override>> ToString() : string
}
class math <<static>> <<partial>> {
    + {static} bool4x3(c0:bool4, c1:bool4, c2:bool4) : bool4x3
    + {static} bool4x3(m00:bool, m01:bool, m02:bool, m10:bool, m11:bool, m12:bool, m20:bool, m21:bool, m22:bool, m30:bool, m31:bool, m32:bool) : bool4x3
    + {static} bool4x3(v:bool) : bool4x3
    + {static} transpose(v:bool4x3) : bool3x4
    + {static} hash(v:bool4x3) : uint
    + {static} hashwide(v:bool4x3) : uint4
}
class "IEquatable`1"<T> {
}
bool4x3 - -> "c0" bool4
bool4x3 - -> "c1" bool4
bool4x3 - -> "c2" bool4
class bool4x4 <<struct>> {
    + bool4x4(c0:bool4, c1:bool4, c2:bool4, c3:bool4)
    + bool4x4(m00:bool, m01:bool, m02:bool, m03:bool, m10:bool, m11:bool, m12:bool, m13:bool, m20:bool, m21:bool, m22:bool, m23:bool, m30:bool, m31:bool, m32:bool, m33:bool)
    + bool4x4(v:bool)
    + Equals(rhs:bool4x4) : bool
    + <<override>> Equals(o:object) : bool
    + <<override>> GetHashCode() : int
    + <<override>> ToString() : string
}
class math <<static>> <<partial>> {
    + {static} bool4x4(c0:bool4, c1:bool4, c2:bool4, c3:bool4) : bool4x4
    + {static} bool4x4(m00:bool, m01:bool, m02:bool, m03:bool, m10:bool, m11:bool, m12:bool, m13:bool, m20:bool, m21:bool, m22:bool, m23:bool, m30:bool, m31:bool, m32:bool, m33:bool) : bool4x4
    + {static} bool4x4(v:bool) : bool4x4
    + {static} transpose(v:bool4x4) : bool4x4
    + {static} hash(v:bool4x4) : uint
    + {static} hashwide(v:bool4x4) : uint4
}
class "IEquatable`1"<T> {
}
bool4x4 - -> "c0" bool4
bool4x4 - -> "c1" bool4
bool4x4 - -> "c2" bool4
bool4x4 - -> "c3" bool4
class double2 <<struct>> {
    + x : double
    + y : double
    + double2(x:double, y:double)
    + double2(xy:double2)
    + double2(v:double)
    + double2(v:bool)
    + double2(v:bool2)
    + double2(v:int)
    + double2(v:int2)
    + double2(v:uint)
    + double2(v:uint2)
    + double2(v:half)
    + double2(v:half2)
    + double2(v:float)
    + double2(v:float2)
    + Equals(rhs:double2) : bool
    + <<override>> Equals(o:object) : bool
    + <<override>> GetHashCode() : int
    + <<override>> ToString() : string
    + ToString(format:string, formatProvider:IFormatProvider) : string
}
class math <<static>> <<partial>> {
    + {static} double2(x:double, y:double) : double2
    + {static} double2(xy:double2) : double2
    + {static} double2(v:double) : double2
    + {static} double2(v:bool) : double2
    + {static} double2(v:bool2) : double2
    + {static} double2(v:int) : double2
    + {static} double2(v:int2) : double2
    + {static} double2(v:uint) : double2
    + {static} double2(v:uint2) : double2
    + {static} double2(v:half) : double2
    + {static} double2(v:half2) : double2
    + {static} double2(v:float) : double2
    + {static} double2(v:float2) : double2
    + {static} hash(v:double2) : uint
    + {static} hashwide(v:double2) : uint2
    + {static} shuffle(left:double2, right:double2, x:ShuffleComponent) : double
    + {static} shuffle(left:double2, right:double2, x:ShuffleComponent, y:ShuffleComponent) : double2
    + {static} shuffle(left:double2, right:double2, x:ShuffleComponent, y:ShuffleComponent, z:ShuffleComponent) : double3
    + {static} shuffle(left:double2, right:double2, x:ShuffleComponent, y:ShuffleComponent, z:ShuffleComponent, w:ShuffleComponent) : double4
}
class "IEquatable`1"<T> {
}
class DebuggerProxy <<sealed>> {
    + x : double
    + y : double
    + DebuggerProxy(v:double2)
}
IFormattable <|- - double2
double2 - -> "zero" double2
double2 - -> "xxxx" double4
double2 - -> "xxxy" double4
double2 - -> "xxyx" double4
double2 - -> "xxyy" double4
double2 - -> "xyxx" double4
double2 - -> "xyxy" double4
double2 - -> "xyyx" double4
double2 - -> "xyyy" double4
double2 - -> "yxxx" double4
double2 - -> "yxxy" double4
double2 - -> "yxyx" double4
double2 - -> "yxyy" double4
double2 - -> "yyxx" double4
double2 - -> "yyxy" double4
double2 - -> "yyyx" double4
double2 - -> "yyyy" double4
double2 - -> "xxx" double3
double2 - -> "xxy" double3
double2 - -> "xyx" double3
double2 - -> "xyy" double3
double2 - -> "yxx" double3
double2 - -> "yxy" double3
double2 - -> "yyx" double3
double2 - -> "yyy" double3
double2 - -> "xx" double2
double2 - -> "xy" double2
double2 - -> "yx" double2
double2 - -> "yy" double2
double2 +- - DebuggerProxy
class double2x2 <<struct>> {
    + double2x2(c0:double2, c1:double2)
    + double2x2(m00:double, m01:double, m10:double, m11:double)
    + double2x2(v:double)
    + double2x2(v:bool)
    + double2x2(v:bool2x2)
    + double2x2(v:int)
    + double2x2(v:int2x2)
    + double2x2(v:uint)
    + double2x2(v:uint2x2)
    + double2x2(v:float)
    + double2x2(v:float2x2)
    + Equals(rhs:double2x2) : bool
    + <<override>> Equals(o:object) : bool
    + <<override>> GetHashCode() : int
    + <<override>> ToString() : string
    + ToString(format:string, formatProvider:IFormatProvider) : string
}
class math <<static>> <<partial>> {
    + {static} double2x2(c0:double2, c1:double2) : double2x2
    + {static} double2x2(m00:double, m01:double, m10:double, m11:double) : double2x2
    + {static} double2x2(v:double) : double2x2
    + {static} double2x2(v:bool) : double2x2
    + {static} double2x2(v:bool2x2) : double2x2
    + {static} double2x2(v:int) : double2x2
    + {static} double2x2(v:int2x2) : double2x2
    + {static} double2x2(v:uint) : double2x2
    + {static} double2x2(v:uint2x2) : double2x2
    + {static} double2x2(v:float) : double2x2
    + {static} double2x2(v:float2x2) : double2x2
    + {static} transpose(v:double2x2) : double2x2
    + {static} inverse(m:double2x2) : double2x2
    + {static} determinant(m:double2x2) : double
    + {static} hash(v:double2x2) : uint
    + {static} hashwide(v:double2x2) : uint2
}
class "IEquatable`1"<T> {
}
IFormattable <|- - double2x2
double2x2 - -> "c0" double2
double2x2 - -> "c1" double2
double2x2 o-> "identity" double2x2
double2x2 - -> "zero" double2x2
class double2x3 <<struct>> {
    + double2x3(c0:double2, c1:double2, c2:double2)
    + double2x3(m00:double, m01:double, m02:double, m10:double, m11:double, m12:double)
    + double2x3(v:double)
    + double2x3(v:bool)
    + double2x3(v:bool2x3)
    + double2x3(v:int)
    + double2x3(v:int2x3)
    + double2x3(v:uint)
    + double2x3(v:uint2x3)
    + double2x3(v:float)
    + double2x3(v:float2x3)
    + Equals(rhs:double2x3) : bool
    + <<override>> Equals(o:object) : bool
    + <<override>> GetHashCode() : int
    + <<override>> ToString() : string
    + ToString(format:string, formatProvider:IFormatProvider) : string
}
class math <<static>> <<partial>> {
    + {static} double2x3(c0:double2, c1:double2, c2:double2) : double2x3
    + {static} double2x3(m00:double, m01:double, m02:double, m10:double, m11:double, m12:double) : double2x3
    + {static} double2x3(v:double) : double2x3
    + {static} double2x3(v:bool) : double2x3
    + {static} double2x3(v:bool2x3) : double2x3
    + {static} double2x3(v:int) : double2x3
    + {static} double2x3(v:int2x3) : double2x3
    + {static} double2x3(v:uint) : double2x3
    + {static} double2x3(v:uint2x3) : double2x3
    + {static} double2x3(v:float) : double2x3
    + {static} double2x3(v:float2x3) : double2x3
    + {static} transpose(v:double2x3) : double3x2
    + {static} hash(v:double2x3) : uint
    + {static} hashwide(v:double2x3) : uint2
}
class "IEquatable`1"<T> {
}
IFormattable <|- - double2x3
double2x3 - -> "c0" double2
double2x3 - -> "c1" double2
double2x3 - -> "c2" double2
double2x3 - -> "zero" double2x3
class double2x4 <<struct>> {
    + double2x4(c0:double2, c1:double2, c2:double2, c3:double2)
    + double2x4(m00:double, m01:double, m02:double, m03:double, m10:double, m11:double, m12:double, m13:double)
    + double2x4(v:double)
    + double2x4(v:bool)
    + double2x4(v:bool2x4)
    + double2x4(v:int)
    + double2x4(v:int2x4)
    + double2x4(v:uint)
    + double2x4(v:uint2x4)
    + double2x4(v:float)
    + double2x4(v:float2x4)
    + Equals(rhs:double2x4) : bool
    + <<override>> Equals(o:object) : bool
    + <<override>> GetHashCode() : int
    + <<override>> ToString() : string
    + ToString(format:string, formatProvider:IFormatProvider) : string
}
class math <<static>> <<partial>> {
    + {static} double2x4(c0:double2, c1:double2, c2:double2, c3:double2) : double2x4
    + {static} double2x4(m00:double, m01:double, m02:double, m03:double, m10:double, m11:double, m12:double, m13:double) : double2x4
    + {static} double2x4(v:double) : double2x4
    + {static} double2x4(v:bool) : double2x4
    + {static} double2x4(v:bool2x4) : double2x4
    + {static} double2x4(v:int) : double2x4
    + {static} double2x4(v:int2x4) : double2x4
    + {static} double2x4(v:uint) : double2x4
    + {static} double2x4(v:uint2x4) : double2x4
    + {static} double2x4(v:float) : double2x4
    + {static} double2x4(v:float2x4) : double2x4
    + {static} transpose(v:double2x4) : double4x2
    + {static} hash(v:double2x4) : uint
    + {static} hashwide(v:double2x4) : uint2
}
class "IEquatable`1"<T> {
}
IFormattable <|- - double2x4
double2x4 - -> "c0" double2
double2x4 - -> "c1" double2
double2x4 - -> "c2" double2
double2x4 - -> "c3" double2
double2x4 - -> "zero" double2x4
class double3 <<struct>> {
    + x : double
    + y : double
    + z : double
    + double3(x:double, y:double, z:double)
    + double3(x:double, yz:double2)
    + double3(xy:double2, z:double)
    + double3(xyz:double3)
    + double3(v:double)
    + double3(v:bool)
    + double3(v:bool3)
    + double3(v:int)
    + double3(v:int3)
    + double3(v:uint)
    + double3(v:uint3)
    + double3(v:half)
    + double3(v:half3)
    + double3(v:float)
    + double3(v:float3)
    + Equals(rhs:double3) : bool
    + <<override>> Equals(o:object) : bool
    + <<override>> GetHashCode() : int
    + <<override>> ToString() : string
    + ToString(format:string, formatProvider:IFormatProvider) : string
}
class math <<static>> <<partial>> {
    + {static} double3(x:double, y:double, z:double) : double3
    + {static} double3(x:double, yz:double2) : double3
    + {static} double3(xy:double2, z:double) : double3
    + {static} double3(xyz:double3) : double3
    + {static} double3(v:double) : double3
    + {static} double3(v:bool) : double3
    + {static} double3(v:bool3) : double3
    + {static} double3(v:int) : double3
    + {static} double3(v:int3) : double3
    + {static} double3(v:uint) : double3
    + {static} double3(v:uint3) : double3
    + {static} double3(v:half) : double3
    + {static} double3(v:half3) : double3
    + {static} double3(v:float) : double3
    + {static} double3(v:float3) : double3
    + {static} hash(v:double3) : uint
    + {static} hashwide(v:double3) : uint3
    + {static} shuffle(left:double3, right:double3, x:ShuffleComponent) : double
    + {static} shuffle(left:double3, right:double3, x:ShuffleComponent, y:ShuffleComponent) : double2
    + {static} shuffle(left:double3, right:double3, x:ShuffleComponent, y:ShuffleComponent, z:ShuffleComponent) : double3
    + {static} shuffle(left:double3, right:double3, x:ShuffleComponent, y:ShuffleComponent, z:ShuffleComponent, w:ShuffleComponent) : double4
}
class "IEquatable`1"<T> {
}
class DebuggerProxy <<sealed>> {
    + x : double
    + y : double
    + z : double
    + DebuggerProxy(v:double3)
}
IFormattable <|- - double3
double3 - -> "zero" double3
double3 - -> "xxxx" double4
double3 - -> "xxxy" double4
double3 - -> "xxxz" double4
double3 - -> "xxyx" double4
double3 - -> "xxyy" double4
double3 - -> "xxyz" double4
double3 - -> "xxzx" double4
double3 - -> "xxzy" double4
double3 - -> "xxzz" double4
double3 - -> "xyxx" double4
double3 - -> "xyxy" double4
double3 - -> "xyxz" double4
double3 - -> "xyyx" double4
double3 - -> "xyyy" double4
double3 - -> "xyyz" double4
double3 - -> "xyzx" double4
double3 - -> "xyzy" double4
double3 - -> "xyzz" double4
double3 - -> "xzxx" double4
double3 - -> "xzxy" double4
double3 - -> "xzxz" double4
double3 - -> "xzyx" double4
double3 - -> "xzyy" double4
double3 - -> "xzyz" double4
double3 - -> "xzzx" double4
double3 - -> "xzzy" double4
double3 - -> "xzzz" double4
double3 - -> "yxxx" double4
double3 - -> "yxxy" double4
double3 - -> "yxxz" double4
double3 - -> "yxyx" double4
double3 - -> "yxyy" double4
double3 - -> "yxyz" double4
double3 - -> "yxzx" double4
double3 - -> "yxzy" double4
double3 - -> "yxzz" double4
double3 - -> "yyxx" double4
double3 - -> "yyxy" double4
double3 - -> "yyxz" double4
double3 - -> "yyyx" double4
double3 - -> "yyyy" double4
double3 - -> "yyyz" double4
double3 - -> "yyzx" double4
double3 - -> "yyzy" double4
double3 - -> "yyzz" double4
double3 - -> "yzxx" double4
double3 - -> "yzxy" double4
double3 - -> "yzxz" double4
double3 - -> "yzyx" double4
double3 - -> "yzyy" double4
double3 - -> "yzyz" double4
double3 - -> "yzzx" double4
double3 - -> "yzzy" double4
double3 - -> "yzzz" double4
double3 - -> "zxxx" double4
double3 - -> "zxxy" double4
double3 - -> "zxxz" double4
double3 - -> "zxyx" double4
double3 - -> "zxyy" double4
double3 - -> "zxyz" double4
double3 - -> "zxzx" double4
double3 - -> "zxzy" double4
double3 - -> "zxzz" double4
double3 - -> "zyxx" double4
double3 - -> "zyxy" double4
double3 - -> "zyxz" double4
double3 - -> "zyyx" double4
double3 - -> "zyyy" double4
double3 - -> "zyyz" double4
double3 - -> "zyzx" double4
double3 - -> "zyzy" double4
double3 - -> "zyzz" double4
double3 - -> "zzxx" double4
double3 - -> "zzxy" double4
double3 - -> "zzxz" double4
double3 - -> "zzyx" double4
double3 - -> "zzyy" double4
double3 - -> "zzyz" double4
double3 - -> "zzzx" double4
double3 - -> "zzzy" double4
double3 - -> "zzzz" double4
double3 - -> "xxx" double3
double3 - -> "xxy" double3
double3 - -> "xxz" double3
double3 - -> "xyx" double3
double3 - -> "xyy" double3
double3 - -> "xyz" double3
double3 - -> "xzx" double3
double3 - -> "xzy" double3
double3 - -> "xzz" double3
double3 - -> "yxx" double3
double3 - -> "yxy" double3
double3 - -> "yxz" double3
double3 - -> "yyx" double3
double3 - -> "yyy" double3
double3 - -> "yyz" double3
double3 - -> "yzx" double3
double3 - -> "yzy" double3
double3 - -> "yzz" double3
double3 - -> "zxx" double3
double3 - -> "zxy" double3
double3 - -> "zxz" double3
double3 - -> "zyx" double3
double3 - -> "zyy" double3
double3 - -> "zyz" double3
double3 - -> "zzx" double3
double3 - -> "zzy" double3
double3 - -> "zzz" double3
double3 - -> "xx" double2
double3 - -> "xy" double2
double3 - -> "xz" double2
double3 - -> "yx" double2
double3 - -> "yy" double2
double3 - -> "yz" double2
double3 - -> "zx" double2
double3 - -> "zy" double2
double3 - -> "zz" double2
double3 +- - DebuggerProxy
class double3x2 <<struct>> {
    + double3x2(c0:double3, c1:double3)
    + double3x2(m00:double, m01:double, m10:double, m11:double, m20:double, m21:double)
    + double3x2(v:double)
    + double3x2(v:bool)
    + double3x2(v:bool3x2)
    + double3x2(v:int)
    + double3x2(v:int3x2)
    + double3x2(v:uint)
    + double3x2(v:uint3x2)
    + double3x2(v:float)
    + double3x2(v:float3x2)
    + Equals(rhs:double3x2) : bool
    + <<override>> Equals(o:object) : bool
    + <<override>> GetHashCode() : int
    + <<override>> ToString() : string
    + ToString(format:string, formatProvider:IFormatProvider) : string
}
class math <<static>> <<partial>> {
    + {static} double3x2(c0:double3, c1:double3) : double3x2
    + {static} double3x2(m00:double, m01:double, m10:double, m11:double, m20:double, m21:double) : double3x2
    + {static} double3x2(v:double) : double3x2
    + {static} double3x2(v:bool) : double3x2
    + {static} double3x2(v:bool3x2) : double3x2
    + {static} double3x2(v:int) : double3x2
    + {static} double3x2(v:int3x2) : double3x2
    + {static} double3x2(v:uint) : double3x2
    + {static} double3x2(v:uint3x2) : double3x2
    + {static} double3x2(v:float) : double3x2
    + {static} double3x2(v:float3x2) : double3x2
    + {static} transpose(v:double3x2) : double2x3
    + {static} hash(v:double3x2) : uint
    + {static} hashwide(v:double3x2) : uint3
}
class "IEquatable`1"<T> {
}
IFormattable <|- - double3x2
double3x2 - -> "c0" double3
double3x2 - -> "c1" double3
double3x2 - -> "zero" double3x2
class double3x3 <<struct>> {
    + double3x3(c0:double3, c1:double3, c2:double3)
    + double3x3(m00:double, m01:double, m02:double, m10:double, m11:double, m12:double, m20:double, m21:double, m22:double)
    + double3x3(v:double)
    + double3x3(v:bool)
    + double3x3(v:bool3x3)
    + double3x3(v:int)
    + double3x3(v:int3x3)
    + double3x3(v:uint)
    + double3x3(v:uint3x3)
    + double3x3(v:float)
    + double3x3(v:float3x3)
    + Equals(rhs:double3x3) : bool
    + <<override>> Equals(o:object) : bool
    + <<override>> GetHashCode() : int
    + <<override>> ToString() : string
    + ToString(format:string, formatProvider:IFormatProvider) : string
}
class math <<static>> <<partial>> {
    + {static} double3x3(c0:double3, c1:double3, c2:double3) : double3x3
    + {static} double3x3(m00:double, m01:double, m02:double, m10:double, m11:double, m12:double, m20:double, m21:double, m22:double) : double3x3
    + {static} double3x3(v:double) : double3x3
    + {static} double3x3(v:bool) : double3x3
    + {static} double3x3(v:bool3x3) : double3x3
    + {static} double3x3(v:int) : double3x3
    + {static} double3x3(v:int3x3) : double3x3
    + {static} double3x3(v:uint) : double3x3
    + {static} double3x3(v:uint3x3) : double3x3
    + {static} double3x3(v:float) : double3x3
    + {static} double3x3(v:float3x3) : double3x3
    + {static} transpose(v:double3x3) : double3x3
    + {static} inverse(m:double3x3) : double3x3
    + {static} determinant(m:double3x3) : double
    + {static} hash(v:double3x3) : uint
    + {static} hashwide(v:double3x3) : uint3
}
class "IEquatable`1"<T> {
}
IFormattable <|- - double3x3
double3x3 - -> "c0" double3
double3x3 - -> "c1" double3
double3x3 - -> "c2" double3
double3x3 o-> "identity" double3x3
double3x3 - -> "zero" double3x3
class double3x4 <<struct>> {
    + double3x4(c0:double3, c1:double3, c2:double3, c3:double3)
    + double3x4(m00:double, m01:double, m02:double, m03:double, m10:double, m11:double, m12:double, m13:double, m20:double, m21:double, m22:double, m23:double)
    + double3x4(v:double)
    + double3x4(v:bool)
    + double3x4(v:bool3x4)
    + double3x4(v:int)
    + double3x4(v:int3x4)
    + double3x4(v:uint)
    + double3x4(v:uint3x4)
    + double3x4(v:float)
    + double3x4(v:float3x4)
    + Equals(rhs:double3x4) : bool
    + <<override>> Equals(o:object) : bool
    + <<override>> GetHashCode() : int
    + <<override>> ToString() : string
    + ToString(format:string, formatProvider:IFormatProvider) : string
}
class math <<static>> <<partial>> {
    + {static} double3x4(c0:double3, c1:double3, c2:double3, c3:double3) : double3x4
    + {static} double3x4(m00:double, m01:double, m02:double, m03:double, m10:double, m11:double, m12:double, m13:double, m20:double, m21:double, m22:double, m23:double) : double3x4
    + {static} double3x4(v:double) : double3x4
    + {static} double3x4(v:bool) : double3x4
    + {static} double3x4(v:bool3x4) : double3x4
    + {static} double3x4(v:int) : double3x4
    + {static} double3x4(v:int3x4) : double3x4
    + {static} double3x4(v:uint) : double3x4
    + {static} double3x4(v:uint3x4) : double3x4
    + {static} double3x4(v:float) : double3x4
    + {static} double3x4(v:float3x4) : double3x4
    + {static} transpose(v:double3x4) : double4x3
    + {static} fastinverse(m:double3x4) : double3x4
    + {static} hash(v:double3x4) : uint
    + {static} hashwide(v:double3x4) : uint3
}
class "IEquatable`1"<T> {
}
IFormattable <|- - double3x4
double3x4 - -> "c0" double3
double3x4 - -> "c1" double3
double3x4 - -> "c2" double3
double3x4 - -> "c3" double3
double3x4 - -> "zero" double3x4
class double4 <<struct>> {
    + x : double
    + y : double
    + z : double
    + w : double
    + double4(x:double, y:double, z:double, w:double)
    + double4(x:double, y:double, zw:double2)
    + double4(x:double, yz:double2, w:double)
    + double4(x:double, yzw:double3)
    + double4(xy:double2, z:double, w:double)
    + double4(xy:double2, zw:double2)
    + double4(xyz:double3, w:double)
    + double4(xyzw:double4)
    + double4(v:double)
    + double4(v:bool)
    + double4(v:bool4)
    + double4(v:int)
    + double4(v:int4)
    + double4(v:uint)
    + double4(v:uint4)
    + double4(v:half)
    + double4(v:half4)
    + double4(v:float)
    + double4(v:float4)
    + Equals(rhs:double4) : bool
    + <<override>> Equals(o:object) : bool
    + <<override>> GetHashCode() : int
    + <<override>> ToString() : string
    + ToString(format:string, formatProvider:IFormatProvider) : string
}
class math <<static>> <<partial>> {
    + {static} double4(x:double, y:double, z:double, w:double) : double4
    + {static} double4(x:double, y:double, zw:double2) : double4
    + {static} double4(x:double, yz:double2, w:double) : double4
    + {static} double4(x:double, yzw:double3) : double4
    + {static} double4(xy:double2, z:double, w:double) : double4
    + {static} double4(xy:double2, zw:double2) : double4
    + {static} double4(xyz:double3, w:double) : double4
    + {static} double4(xyzw:double4) : double4
    + {static} double4(v:double) : double4
    + {static} double4(v:bool) : double4
    + {static} double4(v:bool4) : double4
    + {static} double4(v:int) : double4
    + {static} double4(v:int4) : double4
    + {static} double4(v:uint) : double4
    + {static} double4(v:uint4) : double4
    + {static} double4(v:half) : double4
    + {static} double4(v:half4) : double4
    + {static} double4(v:float) : double4
    + {static} double4(v:float4) : double4
    + {static} hash(v:double4) : uint
    + {static} hashwide(v:double4) : uint4
    + {static} shuffle(left:double4, right:double4, x:ShuffleComponent) : double
    + {static} shuffle(left:double4, right:double4, x:ShuffleComponent, y:ShuffleComponent) : double2
    + {static} shuffle(left:double4, right:double4, x:ShuffleComponent, y:ShuffleComponent, z:ShuffleComponent) : double3
    + {static} shuffle(left:double4, right:double4, x:ShuffleComponent, y:ShuffleComponent, z:ShuffleComponent, w:ShuffleComponent) : double4
}
class "IEquatable`1"<T> {
}
class DebuggerProxy <<sealed>> {
    + x : double
    + y : double
    + z : double
    + w : double
    + DebuggerProxy(v:double4)
}
IFormattable <|- - double4
double4 - -> "zero" double4
double4 - -> "xxxx" double4
double4 - -> "xxxy" double4
double4 - -> "xxxz" double4
double4 - -> "xxxw" double4
double4 - -> "xxyx" double4
double4 - -> "xxyy" double4
double4 - -> "xxyz" double4
double4 - -> "xxyw" double4
double4 - -> "xxzx" double4
double4 - -> "xxzy" double4
double4 - -> "xxzz" double4
double4 - -> "xxzw" double4
double4 - -> "xxwx" double4
double4 - -> "xxwy" double4
double4 - -> "xxwz" double4
double4 - -> "xxww" double4
double4 - -> "xyxx" double4
double4 - -> "xyxy" double4
double4 - -> "xyxz" double4
double4 - -> "xyxw" double4
double4 - -> "xyyx" double4
double4 - -> "xyyy" double4
double4 - -> "xyyz" double4
double4 - -> "xyyw" double4
double4 - -> "xyzx" double4
double4 - -> "xyzy" double4
double4 - -> "xyzz" double4
double4 - -> "xyzw" double4
double4 - -> "xywx" double4
double4 - -> "xywy" double4
double4 - -> "xywz" double4
double4 - -> "xyww" double4
double4 - -> "xzxx" double4
double4 - -> "xzxy" double4
double4 - -> "xzxz" double4
double4 - -> "xzxw" double4
double4 - -> "xzyx" double4
double4 - -> "xzyy" double4
double4 - -> "xzyz" double4
double4 - -> "xzyw" double4
double4 - -> "xzzx" double4
double4 - -> "xzzy" double4
double4 - -> "xzzz" double4
double4 - -> "xzzw" double4
double4 - -> "xzwx" double4
double4 - -> "xzwy" double4
double4 - -> "xzwz" double4
double4 - -> "xzww" double4
double4 - -> "xwxx" double4
double4 - -> "xwxy" double4
double4 - -> "xwxz" double4
double4 - -> "xwxw" double4
double4 - -> "xwyx" double4
double4 - -> "xwyy" double4
double4 - -> "xwyz" double4
double4 - -> "xwyw" double4
double4 - -> "xwzx" double4
double4 - -> "xwzy" double4
double4 - -> "xwzz" double4
double4 - -> "xwzw" double4
double4 - -> "xwwx" double4
double4 - -> "xwwy" double4
double4 - -> "xwwz" double4
double4 - -> "xwww" double4
double4 - -> "yxxx" double4
double4 - -> "yxxy" double4
double4 - -> "yxxz" double4
double4 - -> "yxxw" double4
double4 - -> "yxyx" double4
double4 - -> "yxyy" double4
double4 - -> "yxyz" double4
double4 - -> "yxyw" double4
double4 - -> "yxzx" double4
double4 - -> "yxzy" double4
double4 - -> "yxzz" double4
double4 - -> "yxzw" double4
double4 - -> "yxwx" double4
double4 - -> "yxwy" double4
double4 - -> "yxwz" double4
double4 - -> "yxww" double4
double4 - -> "yyxx" double4
double4 - -> "yyxy" double4
double4 - -> "yyxz" double4
double4 - -> "yyxw" double4
double4 - -> "yyyx" double4
double4 - -> "yyyy" double4
double4 - -> "yyyz" double4
double4 - -> "yyyw" double4
double4 - -> "yyzx" double4
double4 - -> "yyzy" double4
double4 - -> "yyzz" double4
double4 - -> "yyzw" double4
double4 - -> "yywx" double4
double4 - -> "yywy" double4
double4 - -> "yywz" double4
double4 - -> "yyww" double4
double4 - -> "yzxx" double4
double4 - -> "yzxy" double4
double4 - -> "yzxz" double4
double4 - -> "yzxw" double4
double4 - -> "yzyx" double4
double4 - -> "yzyy" double4
double4 - -> "yzyz" double4
double4 - -> "yzyw" double4
double4 - -> "yzzx" double4
double4 - -> "yzzy" double4
double4 - -> "yzzz" double4
double4 - -> "yzzw" double4
double4 - -> "yzwx" double4
double4 - -> "yzwy" double4
double4 - -> "yzwz" double4
double4 - -> "yzww" double4
double4 - -> "ywxx" double4
double4 - -> "ywxy" double4
double4 - -> "ywxz" double4
double4 - -> "ywxw" double4
double4 - -> "ywyx" double4
double4 - -> "ywyy" double4
double4 - -> "ywyz" double4
double4 - -> "ywyw" double4
double4 - -> "ywzx" double4
double4 - -> "ywzy" double4
double4 - -> "ywzz" double4
double4 - -> "ywzw" double4
double4 - -> "ywwx" double4
double4 - -> "ywwy" double4
double4 - -> "ywwz" double4
double4 - -> "ywww" double4
double4 - -> "zxxx" double4
double4 - -> "zxxy" double4
double4 - -> "zxxz" double4
double4 - -> "zxxw" double4
double4 - -> "zxyx" double4
double4 - -> "zxyy" double4
double4 - -> "zxyz" double4
double4 - -> "zxyw" double4
double4 - -> "zxzx" double4
double4 - -> "zxzy" double4
double4 - -> "zxzz" double4
double4 - -> "zxzw" double4
double4 - -> "zxwx" double4
double4 - -> "zxwy" double4
double4 - -> "zxwz" double4
double4 - -> "zxww" double4
double4 - -> "zyxx" double4
double4 - -> "zyxy" double4
double4 - -> "zyxz" double4
double4 - -> "zyxw" double4
double4 - -> "zyyx" double4
double4 - -> "zyyy" double4
double4 - -> "zyyz" double4
double4 - -> "zyyw" double4
double4 - -> "zyzx" double4
double4 - -> "zyzy" double4
double4 - -> "zyzz" double4
double4 - -> "zyzw" double4
double4 - -> "zywx" double4
double4 - -> "zywy" double4
double4 - -> "zywz" double4
double4 - -> "zyww" double4
double4 - -> "zzxx" double4
double4 - -> "zzxy" double4
double4 - -> "zzxz" double4
double4 - -> "zzxw" double4
double4 - -> "zzyx" double4
double4 - -> "zzyy" double4
double4 - -> "zzyz" double4
double4 - -> "zzyw" double4
double4 - -> "zzzx" double4
double4 - -> "zzzy" double4
double4 - -> "zzzz" double4
double4 - -> "zzzw" double4
double4 - -> "zzwx" double4
double4 - -> "zzwy" double4
double4 - -> "zzwz" double4
double4 - -> "zzww" double4
double4 - -> "zwxx" double4
double4 - -> "zwxy" double4
double4 - -> "zwxz" double4
double4 - -> "zwxw" double4
double4 - -> "zwyx" double4
double4 - -> "zwyy" double4
double4 - -> "zwyz" double4
double4 - -> "zwyw" double4
double4 - -> "zwzx" double4
double4 - -> "zwzy" double4
double4 - -> "zwzz" double4
double4 - -> "zwzw" double4
double4 - -> "zwwx" double4
double4 - -> "zwwy" double4
double4 - -> "zwwz" double4
double4 - -> "zwww" double4
double4 - -> "wxxx" double4
double4 - -> "wxxy" double4
double4 - -> "wxxz" double4
double4 - -> "wxxw" double4
double4 - -> "wxyx" double4
double4 - -> "wxyy" double4
double4 - -> "wxyz" double4
double4 - -> "wxyw" double4
double4 - -> "wxzx" double4
double4 - -> "wxzy" double4
double4 - -> "wxzz" double4
double4 - -> "wxzw" double4
double4 - -> "wxwx" double4
double4 - -> "wxwy" double4
double4 - -> "wxwz" double4
double4 - -> "wxww" double4
double4 - -> "wyxx" double4
double4 - -> "wyxy" double4
double4 - -> "wyxz" double4
double4 - -> "wyxw" double4
double4 - -> "wyyx" double4
double4 - -> "wyyy" double4
double4 - -> "wyyz" double4
double4 - -> "wyyw" double4
double4 - -> "wyzx" double4
double4 - -> "wyzy" double4
double4 - -> "wyzz" double4
double4 - -> "wyzw" double4
double4 - -> "wywx" double4
double4 - -> "wywy" double4
double4 - -> "wywz" double4
double4 - -> "wyww" double4
double4 - -> "wzxx" double4
double4 - -> "wzxy" double4
double4 - -> "wzxz" double4
double4 - -> "wzxw" double4
double4 - -> "wzyx" double4
double4 - -> "wzyy" double4
double4 - -> "wzyz" double4
double4 - -> "wzyw" double4
double4 - -> "wzzx" double4
double4 - -> "wzzy" double4
double4 - -> "wzzz" double4
double4 - -> "wzzw" double4
double4 - -> "wzwx" double4
double4 - -> "wzwy" double4
double4 - -> "wzwz" double4
double4 - -> "wzww" double4
double4 - -> "wwxx" double4
double4 - -> "wwxy" double4
double4 - -> "wwxz" double4
double4 - -> "wwxw" double4
double4 - -> "wwyx" double4
double4 - -> "wwyy" double4
double4 - -> "wwyz" double4
double4 - -> "wwyw" double4
double4 - -> "wwzx" double4
double4 - -> "wwzy" double4
double4 - -> "wwzz" double4
double4 - -> "wwzw" double4
double4 - -> "wwwx" double4
double4 - -> "wwwy" double4
double4 - -> "wwwz" double4
double4 - -> "wwww" double4
double4 - -> "xxx" double3
double4 - -> "xxy" double3
double4 - -> "xxz" double3
double4 - -> "xxw" double3
double4 - -> "xyx" double3
double4 - -> "xyy" double3
double4 - -> "xyz" double3
double4 - -> "xyw" double3
double4 - -> "xzx" double3
double4 - -> "xzy" double3
double4 - -> "xzz" double3
double4 - -> "xzw" double3
double4 - -> "xwx" double3
double4 - -> "xwy" double3
double4 - -> "xwz" double3
double4 - -> "xww" double3
double4 - -> "yxx" double3
double4 - -> "yxy" double3
double4 - -> "yxz" double3
double4 - -> "yxw" double3
double4 - -> "yyx" double3
double4 - -> "yyy" double3
double4 - -> "yyz" double3
double4 - -> "yyw" double3
double4 - -> "yzx" double3
double4 - -> "yzy" double3
double4 - -> "yzz" double3
double4 - -> "yzw" double3
double4 - -> "ywx" double3
double4 - -> "ywy" double3
double4 - -> "ywz" double3
double4 - -> "yww" double3
double4 - -> "zxx" double3
double4 - -> "zxy" double3
double4 - -> "zxz" double3
double4 - -> "zxw" double3
double4 - -> "zyx" double3
double4 - -> "zyy" double3
double4 - -> "zyz" double3
double4 - -> "zyw" double3
double4 - -> "zzx" double3
double4 - -> "zzy" double3
double4 - -> "zzz" double3
double4 - -> "zzw" double3
double4 - -> "zwx" double3
double4 - -> "zwy" double3
double4 - -> "zwz" double3
double4 - -> "zww" double3
double4 - -> "wxx" double3
double4 - -> "wxy" double3
double4 - -> "wxz" double3
double4 - -> "wxw" double3
double4 - -> "wyx" double3
double4 - -> "wyy" double3
double4 - -> "wyz" double3
double4 - -> "wyw" double3
double4 - -> "wzx" double3
double4 - -> "wzy" double3
double4 - -> "wzz" double3
double4 - -> "wzw" double3
double4 - -> "wwx" double3
double4 - -> "wwy" double3
double4 - -> "wwz" double3
double4 - -> "www" double3
double4 - -> "xx" double2
double4 - -> "xy" double2
double4 - -> "xz" double2
double4 - -> "xw" double2
double4 - -> "yx" double2
double4 - -> "yy" double2
double4 - -> "yz" double2
double4 - -> "yw" double2
double4 - -> "zx" double2
double4 - -> "zy" double2
double4 - -> "zz" double2
double4 - -> "zw" double2
double4 - -> "wx" double2
double4 - -> "wy" double2
double4 - -> "wz" double2
double4 - -> "ww" double2
double4 +- - DebuggerProxy
class double4x2 <<struct>> {
    + double4x2(c0:double4, c1:double4)
    + double4x2(m00:double, m01:double, m10:double, m11:double, m20:double, m21:double, m30:double, m31:double)
    + double4x2(v:double)
    + double4x2(v:bool)
    + double4x2(v:bool4x2)
    + double4x2(v:int)
    + double4x2(v:int4x2)
    + double4x2(v:uint)
    + double4x2(v:uint4x2)
    + double4x2(v:float)
    + double4x2(v:float4x2)
    + Equals(rhs:double4x2) : bool
    + <<override>> Equals(o:object) : bool
    + <<override>> GetHashCode() : int
    + <<override>> ToString() : string
    + ToString(format:string, formatProvider:IFormatProvider) : string
}
class math <<static>> <<partial>> {
    + {static} double4x2(c0:double4, c1:double4) : double4x2
    + {static} double4x2(m00:double, m01:double, m10:double, m11:double, m20:double, m21:double, m30:double, m31:double) : double4x2
    + {static} double4x2(v:double) : double4x2
    + {static} double4x2(v:bool) : double4x2
    + {static} double4x2(v:bool4x2) : double4x2
    + {static} double4x2(v:int) : double4x2
    + {static} double4x2(v:int4x2) : double4x2
    + {static} double4x2(v:uint) : double4x2
    + {static} double4x2(v:uint4x2) : double4x2
    + {static} double4x2(v:float) : double4x2
    + {static} double4x2(v:float4x2) : double4x2
    + {static} transpose(v:double4x2) : double2x4
    + {static} hash(v:double4x2) : uint
    + {static} hashwide(v:double4x2) : uint4
}
class "IEquatable`1"<T> {
}
IFormattable <|- - double4x2
double4x2 - -> "c0" double4
double4x2 - -> "c1" double4
double4x2 - -> "zero" double4x2
class double4x3 <<struct>> {
    + double4x3(c0:double4, c1:double4, c2:double4)
    + double4x3(m00:double, m01:double, m02:double, m10:double, m11:double, m12:double, m20:double, m21:double, m22:double, m30:double, m31:double, m32:double)
    + double4x3(v:double)
    + double4x3(v:bool)
    + double4x3(v:bool4x3)
    + double4x3(v:int)
    + double4x3(v:int4x3)
    + double4x3(v:uint)
    + double4x3(v:uint4x3)
    + double4x3(v:float)
    + double4x3(v:float4x3)
    + Equals(rhs:double4x3) : bool
    + <<override>> Equals(o:object) : bool
    + <<override>> GetHashCode() : int
    + <<override>> ToString() : string
    + ToString(format:string, formatProvider:IFormatProvider) : string
}
class math <<static>> <<partial>> {
    + {static} double4x3(c0:double4, c1:double4, c2:double4) : double4x3
    + {static} double4x3(m00:double, m01:double, m02:double, m10:double, m11:double, m12:double, m20:double, m21:double, m22:double, m30:double, m31:double, m32:double) : double4x3
    + {static} double4x3(v:double) : double4x3
    + {static} double4x3(v:bool) : double4x3
    + {static} double4x3(v:bool4x3) : double4x3
    + {static} double4x3(v:int) : double4x3
    + {static} double4x3(v:int4x3) : double4x3
    + {static} double4x3(v:uint) : double4x3
    + {static} double4x3(v:uint4x3) : double4x3
    + {static} double4x3(v:float) : double4x3
    + {static} double4x3(v:float4x3) : double4x3
    + {static} transpose(v:double4x3) : double3x4
    + {static} hash(v:double4x3) : uint
    + {static} hashwide(v:double4x3) : uint4
}
class "IEquatable`1"<T> {
}
IFormattable <|- - double4x3
double4x3 - -> "c0" double4
double4x3 - -> "c1" double4
double4x3 - -> "c2" double4
double4x3 - -> "zero" double4x3
class double4x4 <<struct>> {
    + double4x4(c0:double4, c1:double4, c2:double4, c3:double4)
    + double4x4(m00:double, m01:double, m02:double, m03:double, m10:double, m11:double, m12:double, m13:double, m20:double, m21:double, m22:double, m23:double, m30:double, m31:double, m32:double, m33:double)
    + double4x4(v:double)
    + double4x4(v:bool)
    + double4x4(v:bool4x4)
    + double4x4(v:int)
    + double4x4(v:int4x4)
    + double4x4(v:uint)
    + double4x4(v:uint4x4)
    + double4x4(v:float)
    + double4x4(v:float4x4)
    + Equals(rhs:double4x4) : bool
    + <<override>> Equals(o:object) : bool
    + <<override>> GetHashCode() : int
    + <<override>> ToString() : string
    + ToString(format:string, formatProvider:IFormatProvider) : string
}
class math <<static>> <<partial>> {
    + {static} double4x4(c0:double4, c1:double4, c2:double4, c3:double4) : double4x4
    + {static} double4x4(m00:double, m01:double, m02:double, m03:double, m10:double, m11:double, m12:double, m13:double, m20:double, m21:double, m22:double, m23:double, m30:double, m31:double, m32:double, m33:double) : double4x4
    + {static} double4x4(v:double) : double4x4
    + {static} double4x4(v:bool) : double4x4
    + {static} double4x4(v:bool4x4) : double4x4
    + {static} double4x4(v:int) : double4x4
    + {static} double4x4(v:int4x4) : double4x4
    + {static} double4x4(v:uint) : double4x4
    + {static} double4x4(v:uint4x4) : double4x4
    + {static} double4x4(v:float) : double4x4
    + {static} double4x4(v:float4x4) : double4x4
    + {static} rotate(a:double4x4, b:double3) : double3
    + {static} transform(a:double4x4, b:double3) : double3
    + {static} transpose(v:double4x4) : double4x4
    + {static} inverse(m:double4x4) : double4x4
    + {static} fastinverse(m:double4x4) : double4x4
    + {static} determinant(m:double4x4) : double
    + {static} hash(v:double4x4) : uint
    + {static} hashwide(v:double4x4) : uint4
}
class "IEquatable`1"<T> {
}
IFormattable <|- - double4x4
double4x4 - -> "c0" double4
double4x4 - -> "c1" double4
double4x4 - -> "c2" double4
double4x4 - -> "c3" double4
double4x4 o-> "identity" double4x4
double4x4 - -> "zero" double4x4
class float2 <<struct>> {
    + x : float
    + y : float
    + float2(x:float, y:float)
    + float2(xy:float2)
    + float2(v:float)
    + float2(v:bool)
    + float2(v:bool2)
    + float2(v:int)
    + float2(v:int2)
    + float2(v:uint)
    + float2(v:uint2)
    + float2(v:half)
    + float2(v:half2)
    + float2(v:double)
    + float2(v:double2)
    + Equals(rhs:float2) : bool
    + <<override>> Equals(o:object) : bool
    + <<override>> GetHashCode() : int
    + <<override>> ToString() : string
    + ToString(format:string, formatProvider:IFormatProvider) : string
}
class math <<static>> <<partial>> {
    + {static} float2(x:float, y:float) : float2
    + {static} float2(xy:float2) : float2
    + {static} float2(v:float) : float2
    + {static} float2(v:bool) : float2
    + {static} float2(v:bool2) : float2
    + {static} float2(v:int) : float2
    + {static} float2(v:int2) : float2
    + {static} float2(v:uint) : float2
    + {static} float2(v:uint2) : float2
    + {static} float2(v:half) : float2
    + {static} float2(v:half2) : float2
    + {static} float2(v:double) : float2
    + {static} float2(v:double2) : float2
    + {static} hash(v:float2) : uint
    + {static} hashwide(v:float2) : uint2
    + {static} shuffle(left:float2, right:float2, x:ShuffleComponent) : float
    + {static} shuffle(left:float2, right:float2, x:ShuffleComponent, y:ShuffleComponent) : float2
    + {static} shuffle(left:float2, right:float2, x:ShuffleComponent, y:ShuffleComponent, z:ShuffleComponent) : float3
    + {static} shuffle(left:float2, right:float2, x:ShuffleComponent, y:ShuffleComponent, z:ShuffleComponent, w:ShuffleComponent) : float4
}
class "IEquatable`1"<T> {
}
class DebuggerProxy <<sealed>> {
    + x : float
    + y : float
    + DebuggerProxy(v:float2)
}
IFormattable <|- - float2
float2 - -> "zero" float2
float2 - -> "xxxx" float4
float2 - -> "xxxy" float4
float2 - -> "xxyx" float4
float2 - -> "xxyy" float4
float2 - -> "xyxx" float4
float2 - -> "xyxy" float4
float2 - -> "xyyx" float4
float2 - -> "xyyy" float4
float2 - -> "yxxx" float4
float2 - -> "yxxy" float4
float2 - -> "yxyx" float4
float2 - -> "yxyy" float4
float2 - -> "yyxx" float4
float2 - -> "yyxy" float4
float2 - -> "yyyx" float4
float2 - -> "yyyy" float4
float2 - -> "xxx" float3
float2 - -> "xxy" float3
float2 - -> "xyx" float3
float2 - -> "xyy" float3
float2 - -> "yxx" float3
float2 - -> "yxy" float3
float2 - -> "yyx" float3
float2 - -> "yyy" float3
float2 - -> "xx" float2
float2 - -> "xy" float2
float2 - -> "yx" float2
float2 - -> "yy" float2
float2 +- - DebuggerProxy
class float2x2 <<struct>> {
    + float2x2(c0:float2, c1:float2)
    + float2x2(m00:float, m01:float, m10:float, m11:float)
    + float2x2(v:float)
    + float2x2(v:bool)
    + float2x2(v:bool2x2)
    + float2x2(v:int)
    + float2x2(v:int2x2)
    + float2x2(v:uint)
    + float2x2(v:uint2x2)
    + float2x2(v:double)
    + float2x2(v:double2x2)
    + Equals(rhs:float2x2) : bool
    + <<override>> Equals(o:object) : bool
    + <<override>> GetHashCode() : int
    + <<override>> ToString() : string
    + ToString(format:string, formatProvider:IFormatProvider) : string
}
class math <<static>> <<partial>> {
    + {static} float2x2(c0:float2, c1:float2) : float2x2
    + {static} float2x2(m00:float, m01:float, m10:float, m11:float) : float2x2
    + {static} float2x2(v:float) : float2x2
    + {static} float2x2(v:bool) : float2x2
    + {static} float2x2(v:bool2x2) : float2x2
    + {static} float2x2(v:int) : float2x2
    + {static} float2x2(v:int2x2) : float2x2
    + {static} float2x2(v:uint) : float2x2
    + {static} float2x2(v:uint2x2) : float2x2
    + {static} float2x2(v:double) : float2x2
    + {static} float2x2(v:double2x2) : float2x2
    + {static} transpose(v:float2x2) : float2x2
    + {static} inverse(m:float2x2) : float2x2
    + {static} determinant(m:float2x2) : float
    + {static} hash(v:float2x2) : uint
    + {static} hashwide(v:float2x2) : uint2
}
class "IEquatable`1"<T> {
}
IFormattable <|- - float2x2
float2x2 - -> "c0" float2
float2x2 - -> "c1" float2
float2x2 o-> "identity" float2x2
float2x2 - -> "zero" float2x2
class float2x3 <<struct>> {
    + float2x3(c0:float2, c1:float2, c2:float2)
    + float2x3(m00:float, m01:float, m02:float, m10:float, m11:float, m12:float)
    + float2x3(v:float)
    + float2x3(v:bool)
    + float2x3(v:bool2x3)
    + float2x3(v:int)
    + float2x3(v:int2x3)
    + float2x3(v:uint)
    + float2x3(v:uint2x3)
    + float2x3(v:double)
    + float2x3(v:double2x3)
    + Equals(rhs:float2x3) : bool
    + <<override>> Equals(o:object) : bool
    + <<override>> GetHashCode() : int
    + <<override>> ToString() : string
    + ToString(format:string, formatProvider:IFormatProvider) : string
}
class math <<static>> <<partial>> {
    + {static} float2x3(c0:float2, c1:float2, c2:float2) : float2x3
    + {static} float2x3(m00:float, m01:float, m02:float, m10:float, m11:float, m12:float) : float2x3
    + {static} float2x3(v:float) : float2x3
    + {static} float2x3(v:bool) : float2x3
    + {static} float2x3(v:bool2x3) : float2x3
    + {static} float2x3(v:int) : float2x3
    + {static} float2x3(v:int2x3) : float2x3
    + {static} float2x3(v:uint) : float2x3
    + {static} float2x3(v:uint2x3) : float2x3
    + {static} float2x3(v:double) : float2x3
    + {static} float2x3(v:double2x3) : float2x3
    + {static} transpose(v:float2x3) : float3x2
    + {static} hash(v:float2x3) : uint
    + {static} hashwide(v:float2x3) : uint2
}
class "IEquatable`1"<T> {
}
IFormattable <|- - float2x3
float2x3 - -> "c0" float2
float2x3 - -> "c1" float2
float2x3 - -> "c2" float2
float2x3 - -> "zero" float2x3
class float2x4 <<struct>> {
    + float2x4(c0:float2, c1:float2, c2:float2, c3:float2)
    + float2x4(m00:float, m01:float, m02:float, m03:float, m10:float, m11:float, m12:float, m13:float)
    + float2x4(v:float)
    + float2x4(v:bool)
    + float2x4(v:bool2x4)
    + float2x4(v:int)
    + float2x4(v:int2x4)
    + float2x4(v:uint)
    + float2x4(v:uint2x4)
    + float2x4(v:double)
    + float2x4(v:double2x4)
    + Equals(rhs:float2x4) : bool
    + <<override>> Equals(o:object) : bool
    + <<override>> GetHashCode() : int
    + <<override>> ToString() : string
    + ToString(format:string, formatProvider:IFormatProvider) : string
}
class math <<static>> <<partial>> {
    + {static} float2x4(c0:float2, c1:float2, c2:float2, c3:float2) : float2x4
    + {static} float2x4(m00:float, m01:float, m02:float, m03:float, m10:float, m11:float, m12:float, m13:float) : float2x4
    + {static} float2x4(v:float) : float2x4
    + {static} float2x4(v:bool) : float2x4
    + {static} float2x4(v:bool2x4) : float2x4
    + {static} float2x4(v:int) : float2x4
    + {static} float2x4(v:int2x4) : float2x4
    + {static} float2x4(v:uint) : float2x4
    + {static} float2x4(v:uint2x4) : float2x4
    + {static} float2x4(v:double) : float2x4
    + {static} float2x4(v:double2x4) : float2x4
    + {static} transpose(v:float2x4) : float4x2
    + {static} hash(v:float2x4) : uint
    + {static} hashwide(v:float2x4) : uint2
}
class "IEquatable`1"<T> {
}
IFormattable <|- - float2x4
float2x4 - -> "c0" float2
float2x4 - -> "c1" float2
float2x4 - -> "c2" float2
float2x4 - -> "c3" float2
float2x4 - -> "zero" float2x4
class float3 <<struct>> {
    + x : float
    + y : float
    + z : float
    + float3(x:float, y:float, z:float)
    + float3(x:float, yz:float2)
    + float3(xy:float2, z:float)
    + float3(xyz:float3)
    + float3(v:float)
    + float3(v:bool)
    + float3(v:bool3)
    + float3(v:int)
    + float3(v:int3)
    + float3(v:uint)
    + float3(v:uint3)
    + float3(v:half)
    + float3(v:half3)
    + float3(v:double)
    + float3(v:double3)
    + Equals(rhs:float3) : bool
    + <<override>> Equals(o:object) : bool
    + <<override>> GetHashCode() : int
    + <<override>> ToString() : string
    + ToString(format:string, formatProvider:IFormatProvider) : string
}
class math <<static>> <<partial>> {
    + {static} float3(x:float, y:float, z:float) : float3
    + {static} float3(x:float, yz:float2) : float3
    + {static} float3(xy:float2, z:float) : float3
    + {static} float3(xyz:float3) : float3
    + {static} float3(v:float) : float3
    + {static} float3(v:bool) : float3
    + {static} float3(v:bool3) : float3
    + {static} float3(v:int) : float3
    + {static} float3(v:int3) : float3
    + {static} float3(v:uint) : float3
    + {static} float3(v:uint3) : float3
    + {static} float3(v:half) : float3
    + {static} float3(v:half3) : float3
    + {static} float3(v:double) : float3
    + {static} float3(v:double3) : float3
    + {static} hash(v:float3) : uint
    + {static} hashwide(v:float3) : uint3
    + {static} shuffle(left:float3, right:float3, x:ShuffleComponent) : float
    + {static} shuffle(left:float3, right:float3, x:ShuffleComponent, y:ShuffleComponent) : float2
    + {static} shuffle(left:float3, right:float3, x:ShuffleComponent, y:ShuffleComponent, z:ShuffleComponent) : float3
    + {static} shuffle(left:float3, right:float3, x:ShuffleComponent, y:ShuffleComponent, z:ShuffleComponent, w:ShuffleComponent) : float4
}
class "IEquatable`1"<T> {
}
class DebuggerProxy <<sealed>> {
    + x : float
    + y : float
    + z : float
    + DebuggerProxy(v:float3)
}
IFormattable <|- - float3
float3 - -> "zero" float3
float3 - -> "xxxx" float4
float3 - -> "xxxy" float4
float3 - -> "xxxz" float4
float3 - -> "xxyx" float4
float3 - -> "xxyy" float4
float3 - -> "xxyz" float4
float3 - -> "xxzx" float4
float3 - -> "xxzy" float4
float3 - -> "xxzz" float4
float3 - -> "xyxx" float4
float3 - -> "xyxy" float4
float3 - -> "xyxz" float4
float3 - -> "xyyx" float4
float3 - -> "xyyy" float4
float3 - -> "xyyz" float4
float3 - -> "xyzx" float4
float3 - -> "xyzy" float4
float3 - -> "xyzz" float4
float3 - -> "xzxx" float4
float3 - -> "xzxy" float4
float3 - -> "xzxz" float4
float3 - -> "xzyx" float4
float3 - -> "xzyy" float4
float3 - -> "xzyz" float4
float3 - -> "xzzx" float4
float3 - -> "xzzy" float4
float3 - -> "xzzz" float4
float3 - -> "yxxx" float4
float3 - -> "yxxy" float4
float3 - -> "yxxz" float4
float3 - -> "yxyx" float4
float3 - -> "yxyy" float4
float3 - -> "yxyz" float4
float3 - -> "yxzx" float4
float3 - -> "yxzy" float4
float3 - -> "yxzz" float4
float3 - -> "yyxx" float4
float3 - -> "yyxy" float4
float3 - -> "yyxz" float4
float3 - -> "yyyx" float4
float3 - -> "yyyy" float4
float3 - -> "yyyz" float4
float3 - -> "yyzx" float4
float3 - -> "yyzy" float4
float3 - -> "yyzz" float4
float3 - -> "yzxx" float4
float3 - -> "yzxy" float4
float3 - -> "yzxz" float4
float3 - -> "yzyx" float4
float3 - -> "yzyy" float4
float3 - -> "yzyz" float4
float3 - -> "yzzx" float4
float3 - -> "yzzy" float4
float3 - -> "yzzz" float4
float3 - -> "zxxx" float4
float3 - -> "zxxy" float4
float3 - -> "zxxz" float4
float3 - -> "zxyx" float4
float3 - -> "zxyy" float4
float3 - -> "zxyz" float4
float3 - -> "zxzx" float4
float3 - -> "zxzy" float4
float3 - -> "zxzz" float4
float3 - -> "zyxx" float4
float3 - -> "zyxy" float4
float3 - -> "zyxz" float4
float3 - -> "zyyx" float4
float3 - -> "zyyy" float4
float3 - -> "zyyz" float4
float3 - -> "zyzx" float4
float3 - -> "zyzy" float4
float3 - -> "zyzz" float4
float3 - -> "zzxx" float4
float3 - -> "zzxy" float4
float3 - -> "zzxz" float4
float3 - -> "zzyx" float4
float3 - -> "zzyy" float4
float3 - -> "zzyz" float4
float3 - -> "zzzx" float4
float3 - -> "zzzy" float4
float3 - -> "zzzz" float4
float3 - -> "xxx" float3
float3 - -> "xxy" float3
float3 - -> "xxz" float3
float3 - -> "xyx" float3
float3 - -> "xyy" float3
float3 - -> "xyz" float3
float3 - -> "xzx" float3
float3 - -> "xzy" float3
float3 - -> "xzz" float3
float3 - -> "yxx" float3
float3 - -> "yxy" float3
float3 - -> "yxz" float3
float3 - -> "yyx" float3
float3 - -> "yyy" float3
float3 - -> "yyz" float3
float3 - -> "yzx" float3
float3 - -> "yzy" float3
float3 - -> "yzz" float3
float3 - -> "zxx" float3
float3 - -> "zxy" float3
float3 - -> "zxz" float3
float3 - -> "zyx" float3
float3 - -> "zyy" float3
float3 - -> "zyz" float3
float3 - -> "zzx" float3
float3 - -> "zzy" float3
float3 - -> "zzz" float3
float3 - -> "xx" float2
float3 - -> "xy" float2
float3 - -> "xz" float2
float3 - -> "yx" float2
float3 - -> "yy" float2
float3 - -> "yz" float2
float3 - -> "zx" float2
float3 - -> "zy" float2
float3 - -> "zz" float2
float3 +- - DebuggerProxy
class float3x2 <<struct>> {
    + float3x2(c0:float3, c1:float3)
    + float3x2(m00:float, m01:float, m10:float, m11:float, m20:float, m21:float)
    + float3x2(v:float)
    + float3x2(v:bool)
    + float3x2(v:bool3x2)
    + float3x2(v:int)
    + float3x2(v:int3x2)
    + float3x2(v:uint)
    + float3x2(v:uint3x2)
    + float3x2(v:double)
    + float3x2(v:double3x2)
    + Equals(rhs:float3x2) : bool
    + <<override>> Equals(o:object) : bool
    + <<override>> GetHashCode() : int
    + <<override>> ToString() : string
    + ToString(format:string, formatProvider:IFormatProvider) : string
}
class math <<static>> <<partial>> {
    + {static} float3x2(c0:float3, c1:float3) : float3x2
    + {static} float3x2(m00:float, m01:float, m10:float, m11:float, m20:float, m21:float) : float3x2
    + {static} float3x2(v:float) : float3x2
    + {static} float3x2(v:bool) : float3x2
    + {static} float3x2(v:bool3x2) : float3x2
    + {static} float3x2(v:int) : float3x2
    + {static} float3x2(v:int3x2) : float3x2
    + {static} float3x2(v:uint) : float3x2
    + {static} float3x2(v:uint3x2) : float3x2
    + {static} float3x2(v:double) : float3x2
    + {static} float3x2(v:double3x2) : float3x2
    + {static} transpose(v:float3x2) : float2x3
    + {static} hash(v:float3x2) : uint
    + {static} hashwide(v:float3x2) : uint3
}
class "IEquatable`1"<T> {
}
IFormattable <|- - float3x2
float3x2 - -> "c0" float3
float3x2 - -> "c1" float3
float3x2 - -> "zero" float3x2
class float3x3 <<struct>> {
    + float3x3(c0:float3, c1:float3, c2:float3)
    + float3x3(m00:float, m01:float, m02:float, m10:float, m11:float, m12:float, m20:float, m21:float, m22:float)
    + float3x3(v:float)
    + float3x3(v:bool)
    + float3x3(v:bool3x3)
    + float3x3(v:int)
    + float3x3(v:int3x3)
    + float3x3(v:uint)
    + float3x3(v:uint3x3)
    + float3x3(v:double)
    + float3x3(v:double3x3)
    + Equals(rhs:float3x3) : bool
    + <<override>> Equals(o:object) : bool
    + <<override>> GetHashCode() : int
    + <<override>> ToString() : string
    + ToString(format:string, formatProvider:IFormatProvider) : string
}
class math <<static>> <<partial>> {
    + {static} float3x3(c0:float3, c1:float3, c2:float3) : float3x3
    + {static} float3x3(m00:float, m01:float, m02:float, m10:float, m11:float, m12:float, m20:float, m21:float, m22:float) : float3x3
    + {static} float3x3(v:float) : float3x3
    + {static} float3x3(v:bool) : float3x3
    + {static} float3x3(v:bool3x3) : float3x3
    + {static} float3x3(v:int) : float3x3
    + {static} float3x3(v:int3x3) : float3x3
    + {static} float3x3(v:uint) : float3x3
    + {static} float3x3(v:uint3x3) : float3x3
    + {static} float3x3(v:double) : float3x3
    + {static} float3x3(v:double3x3) : float3x3
    + {static} transpose(v:float3x3) : float3x3
    + {static} inverse(m:float3x3) : float3x3
    + {static} determinant(m:float3x3) : float
    + {static} hash(v:float3x3) : uint
    + {static} hashwide(v:float3x3) : uint3
}
class "IEquatable`1"<T> {
}
IFormattable <|- - float3x3
float3x3 - -> "c0" float3
float3x3 - -> "c1" float3
float3x3 - -> "c2" float3
float3x3 o-> "identity" float3x3
float3x3 - -> "zero" float3x3
class float3x4 <<struct>> {
    + float3x4(c0:float3, c1:float3, c2:float3, c3:float3)
    + float3x4(m00:float, m01:float, m02:float, m03:float, m10:float, m11:float, m12:float, m13:float, m20:float, m21:float, m22:float, m23:float)
    + float3x4(v:float)
    + float3x4(v:bool)
    + float3x4(v:bool3x4)
    + float3x4(v:int)
    + float3x4(v:int3x4)
    + float3x4(v:uint)
    + float3x4(v:uint3x4)
    + float3x4(v:double)
    + float3x4(v:double3x4)
    + Equals(rhs:float3x4) : bool
    + <<override>> Equals(o:object) : bool
    + <<override>> GetHashCode() : int
    + <<override>> ToString() : string
    + ToString(format:string, formatProvider:IFormatProvider) : string
}
class math <<static>> <<partial>> {
    + {static} float3x4(c0:float3, c1:float3, c2:float3, c3:float3) : float3x4
    + {static} float3x4(m00:float, m01:float, m02:float, m03:float, m10:float, m11:float, m12:float, m13:float, m20:float, m21:float, m22:float, m23:float) : float3x4
    + {static} float3x4(v:float) : float3x4
    + {static} float3x4(v:bool) : float3x4
    + {static} float3x4(v:bool3x4) : float3x4
    + {static} float3x4(v:int) : float3x4
    + {static} float3x4(v:int3x4) : float3x4
    + {static} float3x4(v:uint) : float3x4
    + {static} float3x4(v:uint3x4) : float3x4
    + {static} float3x4(v:double) : float3x4
    + {static} float3x4(v:double3x4) : float3x4
    + {static} transpose(v:float3x4) : float4x3
    + {static} fastinverse(m:float3x4) : float3x4
    + {static} hash(v:float3x4) : uint
    + {static} hashwide(v:float3x4) : uint3
}
class "IEquatable`1"<T> {
}
IFormattable <|- - float3x4
float3x4 - -> "c0" float3
float3x4 - -> "c1" float3
float3x4 - -> "c2" float3
float3x4 - -> "c3" float3
float3x4 - -> "zero" float3x4
class float4 <<struct>> {
    + x : float
    + y : float
    + z : float
    + w : float
    + float4(x:float, y:float, z:float, w:float)
    + float4(x:float, y:float, zw:float2)
    + float4(x:float, yz:float2, w:float)
    + float4(x:float, yzw:float3)
    + float4(xy:float2, z:float, w:float)
    + float4(xy:float2, zw:float2)
    + float4(xyz:float3, w:float)
    + float4(xyzw:float4)
    + float4(v:float)
    + float4(v:bool)
    + float4(v:bool4)
    + float4(v:int)
    + float4(v:int4)
    + float4(v:uint)
    + float4(v:uint4)
    + float4(v:half)
    + float4(v:half4)
    + float4(v:double)
    + float4(v:double4)
    + Equals(rhs:float4) : bool
    + <<override>> Equals(o:object) : bool
    + <<override>> GetHashCode() : int
    + <<override>> ToString() : string
    + ToString(format:string, formatProvider:IFormatProvider) : string
}
class math <<static>> <<partial>> {
    + {static} float4(x:float, y:float, z:float, w:float) : float4
    + {static} float4(x:float, y:float, zw:float2) : float4
    + {static} float4(x:float, yz:float2, w:float) : float4
    + {static} float4(x:float, yzw:float3) : float4
    + {static} float4(xy:float2, z:float, w:float) : float4
    + {static} float4(xy:float2, zw:float2) : float4
    + {static} float4(xyz:float3, w:float) : float4
    + {static} float4(xyzw:float4) : float4
    + {static} float4(v:float) : float4
    + {static} float4(v:bool) : float4
    + {static} float4(v:bool4) : float4
    + {static} float4(v:int) : float4
    + {static} float4(v:int4) : float4
    + {static} float4(v:uint) : float4
    + {static} float4(v:uint4) : float4
    + {static} float4(v:half) : float4
    + {static} float4(v:half4) : float4
    + {static} float4(v:double) : float4
    + {static} float4(v:double4) : float4
    + {static} hash(v:float4) : uint
    + {static} hashwide(v:float4) : uint4
    + {static} shuffle(left:float4, right:float4, x:ShuffleComponent) : float
    + {static} shuffle(left:float4, right:float4, x:ShuffleComponent, y:ShuffleComponent) : float2
    + {static} shuffle(left:float4, right:float4, x:ShuffleComponent, y:ShuffleComponent, z:ShuffleComponent) : float3
    + {static} shuffle(left:float4, right:float4, x:ShuffleComponent, y:ShuffleComponent, z:ShuffleComponent, w:ShuffleComponent) : float4
}
class "IEquatable`1"<T> {
}
class DebuggerProxy <<sealed>> {
    + x : float
    + y : float
    + z : float
    + w : float
    + DebuggerProxy(v:float4)
}
IFormattable <|- - float4
float4 - -> "zero" float4
float4 - -> "xxxx" float4
float4 - -> "xxxy" float4
float4 - -> "xxxz" float4
float4 - -> "xxxw" float4
float4 - -> "xxyx" float4
float4 - -> "xxyy" float4
float4 - -> "xxyz" float4
float4 - -> "xxyw" float4
float4 - -> "xxzx" float4
float4 - -> "xxzy" float4
float4 - -> "xxzz" float4
float4 - -> "xxzw" float4
float4 - -> "xxwx" float4
float4 - -> "xxwy" float4
float4 - -> "xxwz" float4
float4 - -> "xxww" float4
float4 - -> "xyxx" float4
float4 - -> "xyxy" float4
float4 - -> "xyxz" float4
float4 - -> "xyxw" float4
float4 - -> "xyyx" float4
float4 - -> "xyyy" float4
float4 - -> "xyyz" float4
float4 - -> "xyyw" float4
float4 - -> "xyzx" float4
float4 - -> "xyzy" float4
float4 - -> "xyzz" float4
float4 - -> "xyzw" float4
float4 - -> "xywx" float4
float4 - -> "xywy" float4
float4 - -> "xywz" float4
float4 - -> "xyww" float4
float4 - -> "xzxx" float4
float4 - -> "xzxy" float4
float4 - -> "xzxz" float4
float4 - -> "xzxw" float4
float4 - -> "xzyx" float4
float4 - -> "xzyy" float4
float4 - -> "xzyz" float4
float4 - -> "xzyw" float4
float4 - -> "xzzx" float4
float4 - -> "xzzy" float4
float4 - -> "xzzz" float4
float4 - -> "xzzw" float4
float4 - -> "xzwx" float4
float4 - -> "xzwy" float4
float4 - -> "xzwz" float4
float4 - -> "xzww" float4
float4 - -> "xwxx" float4
float4 - -> "xwxy" float4
float4 - -> "xwxz" float4
float4 - -> "xwxw" float4
float4 - -> "xwyx" float4
float4 - -> "xwyy" float4
float4 - -> "xwyz" float4
float4 - -> "xwyw" float4
float4 - -> "xwzx" float4
float4 - -> "xwzy" float4
float4 - -> "xwzz" float4
float4 - -> "xwzw" float4
float4 - -> "xwwx" float4
float4 - -> "xwwy" float4
float4 - -> "xwwz" float4
float4 - -> "xwww" float4
float4 - -> "yxxx" float4
float4 - -> "yxxy" float4
float4 - -> "yxxz" float4
float4 - -> "yxxw" float4
float4 - -> "yxyx" float4
float4 - -> "yxyy" float4
float4 - -> "yxyz" float4
float4 - -> "yxyw" float4
float4 - -> "yxzx" float4
float4 - -> "yxzy" float4
float4 - -> "yxzz" float4
float4 - -> "yxzw" float4
float4 - -> "yxwx" float4
float4 - -> "yxwy" float4
float4 - -> "yxwz" float4
float4 - -> "yxww" float4
float4 - -> "yyxx" float4
float4 - -> "yyxy" float4
float4 - -> "yyxz" float4
float4 - -> "yyxw" float4
float4 - -> "yyyx" float4
float4 - -> "yyyy" float4
float4 - -> "yyyz" float4
float4 - -> "yyyw" float4
float4 - -> "yyzx" float4
float4 - -> "yyzy" float4
float4 - -> "yyzz" float4
float4 - -> "yyzw" float4
float4 - -> "yywx" float4
float4 - -> "yywy" float4
float4 - -> "yywz" float4
float4 - -> "yyww" float4
float4 - -> "yzxx" float4
float4 - -> "yzxy" float4
float4 - -> "yzxz" float4
float4 - -> "yzxw" float4
float4 - -> "yzyx" float4
float4 - -> "yzyy" float4
float4 - -> "yzyz" float4
float4 - -> "yzyw" float4
float4 - -> "yzzx" float4
float4 - -> "yzzy" float4
float4 - -> "yzzz" float4
float4 - -> "yzzw" float4
float4 - -> "yzwx" float4
float4 - -> "yzwy" float4
float4 - -> "yzwz" float4
float4 - -> "yzww" float4
float4 - -> "ywxx" float4
float4 - -> "ywxy" float4
float4 - -> "ywxz" float4
float4 - -> "ywxw" float4
float4 - -> "ywyx" float4
float4 - -> "ywyy" float4
float4 - -> "ywyz" float4
float4 - -> "ywyw" float4
float4 - -> "ywzx" float4
float4 - -> "ywzy" float4
float4 - -> "ywzz" float4
float4 - -> "ywzw" float4
float4 - -> "ywwx" float4
float4 - -> "ywwy" float4
float4 - -> "ywwz" float4
float4 - -> "ywww" float4
float4 - -> "zxxx" float4
float4 - -> "zxxy" float4
float4 - -> "zxxz" float4
float4 - -> "zxxw" float4
float4 - -> "zxyx" float4
float4 - -> "zxyy" float4
float4 - -> "zxyz" float4
float4 - -> "zxyw" float4
float4 - -> "zxzx" float4
float4 - -> "zxzy" float4
float4 - -> "zxzz" float4
float4 - -> "zxzw" float4
float4 - -> "zxwx" float4
float4 - -> "zxwy" float4
float4 - -> "zxwz" float4
float4 - -> "zxww" float4
float4 - -> "zyxx" float4
float4 - -> "zyxy" float4
float4 - -> "zyxz" float4
float4 - -> "zyxw" float4
float4 - -> "zyyx" float4
float4 - -> "zyyy" float4
float4 - -> "zyyz" float4
float4 - -> "zyyw" float4
float4 - -> "zyzx" float4
float4 - -> "zyzy" float4
float4 - -> "zyzz" float4
float4 - -> "zyzw" float4
float4 - -> "zywx" float4
float4 - -> "zywy" float4
float4 - -> "zywz" float4
float4 - -> "zyww" float4
float4 - -> "zzxx" float4
float4 - -> "zzxy" float4
float4 - -> "zzxz" float4
float4 - -> "zzxw" float4
float4 - -> "zzyx" float4
float4 - -> "zzyy" float4
float4 - -> "zzyz" float4
float4 - -> "zzyw" float4
float4 - -> "zzzx" float4
float4 - -> "zzzy" float4
float4 - -> "zzzz" float4
float4 - -> "zzzw" float4
float4 - -> "zzwx" float4
float4 - -> "zzwy" float4
float4 - -> "zzwz" float4
float4 - -> "zzww" float4
float4 - -> "zwxx" float4
float4 - -> "zwxy" float4
float4 - -> "zwxz" float4
float4 - -> "zwxw" float4
float4 - -> "zwyx" float4
float4 - -> "zwyy" float4
float4 - -> "zwyz" float4
float4 - -> "zwyw" float4
float4 - -> "zwzx" float4
float4 - -> "zwzy" float4
float4 - -> "zwzz" float4
float4 - -> "zwzw" float4
float4 - -> "zwwx" float4
float4 - -> "zwwy" float4
float4 - -> "zwwz" float4
float4 - -> "zwww" float4
float4 - -> "wxxx" float4
float4 - -> "wxxy" float4
float4 - -> "wxxz" float4
float4 - -> "wxxw" float4
float4 - -> "wxyx" float4
float4 - -> "wxyy" float4
float4 - -> "wxyz" float4
float4 - -> "wxyw" float4
float4 - -> "wxzx" float4
float4 - -> "wxzy" float4
float4 - -> "wxzz" float4
float4 - -> "wxzw" float4
float4 - -> "wxwx" float4
float4 - -> "wxwy" float4
float4 - -> "wxwz" float4
float4 - -> "wxww" float4
float4 - -> "wyxx" float4
float4 - -> "wyxy" float4
float4 - -> "wyxz" float4
float4 - -> "wyxw" float4
float4 - -> "wyyx" float4
float4 - -> "wyyy" float4
float4 - -> "wyyz" float4
float4 - -> "wyyw" float4
float4 - -> "wyzx" float4
float4 - -> "wyzy" float4
float4 - -> "wyzz" float4
float4 - -> "wyzw" float4
float4 - -> "wywx" float4
float4 - -> "wywy" float4
float4 - -> "wywz" float4
float4 - -> "wyww" float4
float4 - -> "wzxx" float4
float4 - -> "wzxy" float4
float4 - -> "wzxz" float4
float4 - -> "wzxw" float4
float4 - -> "wzyx" float4
float4 - -> "wzyy" float4
float4 - -> "wzyz" float4
float4 - -> "wzyw" float4
float4 - -> "wzzx" float4
float4 - -> "wzzy" float4
float4 - -> "wzzz" float4
float4 - -> "wzzw" float4
float4 - -> "wzwx" float4
float4 - -> "wzwy" float4
float4 - -> "wzwz" float4
float4 - -> "wzww" float4
float4 - -> "wwxx" float4
float4 - -> "wwxy" float4
float4 - -> "wwxz" float4
float4 - -> "wwxw" float4
float4 - -> "wwyx" float4
float4 - -> "wwyy" float4
float4 - -> "wwyz" float4
float4 - -> "wwyw" float4
float4 - -> "wwzx" float4
float4 - -> "wwzy" float4
float4 - -> "wwzz" float4
float4 - -> "wwzw" float4
float4 - -> "wwwx" float4
float4 - -> "wwwy" float4
float4 - -> "wwwz" float4
float4 - -> "wwww" float4
float4 - -> "xxx" float3
float4 - -> "xxy" float3
float4 - -> "xxz" float3
float4 - -> "xxw" float3
float4 - -> "xyx" float3
float4 - -> "xyy" float3
float4 - -> "xyz" float3
float4 - -> "xyw" float3
float4 - -> "xzx" float3
float4 - -> "xzy" float3
float4 - -> "xzz" float3
float4 - -> "xzw" float3
float4 - -> "xwx" float3
float4 - -> "xwy" float3
float4 - -> "xwz" float3
float4 - -> "xww" float3
float4 - -> "yxx" float3
float4 - -> "yxy" float3
float4 - -> "yxz" float3
float4 - -> "yxw" float3
float4 - -> "yyx" float3
float4 - -> "yyy" float3
float4 - -> "yyz" float3
float4 - -> "yyw" float3
float4 - -> "yzx" float3
float4 - -> "yzy" float3
float4 - -> "yzz" float3
float4 - -> "yzw" float3
float4 - -> "ywx" float3
float4 - -> "ywy" float3
float4 - -> "ywz" float3
float4 - -> "yww" float3
float4 - -> "zxx" float3
float4 - -> "zxy" float3
float4 - -> "zxz" float3
float4 - -> "zxw" float3
float4 - -> "zyx" float3
float4 - -> "zyy" float3
float4 - -> "zyz" float3
float4 - -> "zyw" float3
float4 - -> "zzx" float3
float4 - -> "zzy" float3
float4 - -> "zzz" float3
float4 - -> "zzw" float3
float4 - -> "zwx" float3
float4 - -> "zwy" float3
float4 - -> "zwz" float3
float4 - -> "zww" float3
float4 - -> "wxx" float3
float4 - -> "wxy" float3
float4 - -> "wxz" float3
float4 - -> "wxw" float3
float4 - -> "wyx" float3
float4 - -> "wyy" float3
float4 - -> "wyz" float3
float4 - -> "wyw" float3
float4 - -> "wzx" float3
float4 - -> "wzy" float3
float4 - -> "wzz" float3
float4 - -> "wzw" float3
float4 - -> "wwx" float3
float4 - -> "wwy" float3
float4 - -> "wwz" float3
float4 - -> "www" float3
float4 - -> "xx" float2
float4 - -> "xy" float2
float4 - -> "xz" float2
float4 - -> "xw" float2
float4 - -> "yx" float2
float4 - -> "yy" float2
float4 - -> "yz" float2
float4 - -> "yw" float2
float4 - -> "zx" float2
float4 - -> "zy" float2
float4 - -> "zz" float2
float4 - -> "zw" float2
float4 - -> "wx" float2
float4 - -> "wy" float2
float4 - -> "wz" float2
float4 - -> "ww" float2
float4 +- - DebuggerProxy
class float4x2 <<struct>> {
    + float4x2(c0:float4, c1:float4)
    + float4x2(m00:float, m01:float, m10:float, m11:float, m20:float, m21:float, m30:float, m31:float)
    + float4x2(v:float)
    + float4x2(v:bool)
    + float4x2(v:bool4x2)
    + float4x2(v:int)
    + float4x2(v:int4x2)
    + float4x2(v:uint)
    + float4x2(v:uint4x2)
    + float4x2(v:double)
    + float4x2(v:double4x2)
    + Equals(rhs:float4x2) : bool
    + <<override>> Equals(o:object) : bool
    + <<override>> GetHashCode() : int
    + <<override>> ToString() : string
    + ToString(format:string, formatProvider:IFormatProvider) : string
}
class math <<static>> <<partial>> {
    + {static} float4x2(c0:float4, c1:float4) : float4x2
    + {static} float4x2(m00:float, m01:float, m10:float, m11:float, m20:float, m21:float, m30:float, m31:float) : float4x2
    + {static} float4x2(v:float) : float4x2
    + {static} float4x2(v:bool) : float4x2
    + {static} float4x2(v:bool4x2) : float4x2
    + {static} float4x2(v:int) : float4x2
    + {static} float4x2(v:int4x2) : float4x2
    + {static} float4x2(v:uint) : float4x2
    + {static} float4x2(v:uint4x2) : float4x2
    + {static} float4x2(v:double) : float4x2
    + {static} float4x2(v:double4x2) : float4x2
    + {static} transpose(v:float4x2) : float2x4
    + {static} hash(v:float4x2) : uint
    + {static} hashwide(v:float4x2) : uint4
}
class "IEquatable`1"<T> {
}
IFormattable <|- - float4x2
float4x2 - -> "c0" float4
float4x2 - -> "c1" float4
float4x2 - -> "zero" float4x2
class float4x3 <<struct>> {
    + float4x3(c0:float4, c1:float4, c2:float4)
    + float4x3(m00:float, m01:float, m02:float, m10:float, m11:float, m12:float, m20:float, m21:float, m22:float, m30:float, m31:float, m32:float)
    + float4x3(v:float)
    + float4x3(v:bool)
    + float4x3(v:bool4x3)
    + float4x3(v:int)
    + float4x3(v:int4x3)
    + float4x3(v:uint)
    + float4x3(v:uint4x3)
    + float4x3(v:double)
    + float4x3(v:double4x3)
    + Equals(rhs:float4x3) : bool
    + <<override>> Equals(o:object) : bool
    + <<override>> GetHashCode() : int
    + <<override>> ToString() : string
    + ToString(format:string, formatProvider:IFormatProvider) : string
}
class math <<static>> <<partial>> {
    + {static} float4x3(c0:float4, c1:float4, c2:float4) : float4x3
    + {static} float4x3(m00:float, m01:float, m02:float, m10:float, m11:float, m12:float, m20:float, m21:float, m22:float, m30:float, m31:float, m32:float) : float4x3
    + {static} float4x3(v:float) : float4x3
    + {static} float4x3(v:bool) : float4x3
    + {static} float4x3(v:bool4x3) : float4x3
    + {static} float4x3(v:int) : float4x3
    + {static} float4x3(v:int4x3) : float4x3
    + {static} float4x3(v:uint) : float4x3
    + {static} float4x3(v:uint4x3) : float4x3
    + {static} float4x3(v:double) : float4x3
    + {static} float4x3(v:double4x3) : float4x3
    + {static} transpose(v:float4x3) : float3x4
    + {static} hash(v:float4x3) : uint
    + {static} hashwide(v:float4x3) : uint4
}
class "IEquatable`1"<T> {
}
IFormattable <|- - float4x3
float4x3 - -> "c0" float4
float4x3 - -> "c1" float4
float4x3 - -> "c2" float4
float4x3 - -> "zero" float4x3
class float4x4 <<struct>> {
    + float4x4(c0:float4, c1:float4, c2:float4, c3:float4)
    + float4x4(m00:float, m01:float, m02:float, m03:float, m10:float, m11:float, m12:float, m13:float, m20:float, m21:float, m22:float, m23:float, m30:float, m31:float, m32:float, m33:float)
    + float4x4(v:float)
    + float4x4(v:bool)
    + float4x4(v:bool4x4)
    + float4x4(v:int)
    + float4x4(v:int4x4)
    + float4x4(v:uint)
    + float4x4(v:uint4x4)
    + float4x4(v:double)
    + float4x4(v:double4x4)
    + Equals(rhs:float4x4) : bool
    + <<override>> Equals(o:object) : bool
    + <<override>> GetHashCode() : int
    + <<override>> ToString() : string
    + ToString(format:string, formatProvider:IFormatProvider) : string
}
class math <<static>> <<partial>> {
    + {static} float4x4(c0:float4, c1:float4, c2:float4, c3:float4) : float4x4
    + {static} float4x4(m00:float, m01:float, m02:float, m03:float, m10:float, m11:float, m12:float, m13:float, m20:float, m21:float, m22:float, m23:float, m30:float, m31:float, m32:float, m33:float) : float4x4
    + {static} float4x4(v:float) : float4x4
    + {static} float4x4(v:bool) : float4x4
    + {static} float4x4(v:bool4x4) : float4x4
    + {static} float4x4(v:int) : float4x4
    + {static} float4x4(v:int4x4) : float4x4
    + {static} float4x4(v:uint) : float4x4
    + {static} float4x4(v:uint4x4) : float4x4
    + {static} float4x4(v:double) : float4x4
    + {static} float4x4(v:double4x4) : float4x4
    + {static} rotate(a:float4x4, b:float3) : float3
    + {static} transform(a:float4x4, b:float3) : float3
    + {static} transpose(v:float4x4) : float4x4
    + {static} inverse(m:float4x4) : float4x4
    + {static} fastinverse(m:float4x4) : float4x4
    + {static} determinant(m:float4x4) : float
    + {static} hash(v:float4x4) : uint
    + {static} hashwide(v:float4x4) : uint4
}
class "IEquatable`1"<T> {
}
IFormattable <|- - float4x4
float4x4 - -> "c0" float4
float4x4 - -> "c1" float4
float4x4 - -> "c2" float4
float4x4 - -> "c3" float4
float4x4 o-> "identity" float4x4
float4x4 - -> "zero" float4x4
class half <<struct>> {
    + value : ushort
    + {static} MaxValue : float <<get>>
    + {static} MinValue : float <<get>>
    + half(x:half)
    + half(v:float)
    + half(v:double)
    + Equals(rhs:half) : bool
    + <<override>> Equals(o:object) : bool
    + <<override>> GetHashCode() : int
    + <<override>> ToString() : string
    + ToString(format:string, formatProvider:IFormatProvider) : string
}
class math <<static>> <<partial>> {
    + {static} half(x:half) : half
    + {static} half(v:float) : half
    + {static} half(v:double) : half
    + {static} hash(v:half) : uint
}
class "IEquatable`1"<T> {
}
IFormattable <|- - half
half o-> "zero" half
half - -> "MaxValueAsHalf" half
half - -> "MinValueAsHalf" half
class half2 <<struct>> {
    + half2(x:half, y:half)
    + half2(xy:half2)
    + half2(v:half)
    + half2(v:float)
    + half2(v:float2)
    + half2(v:double)
    + half2(v:double2)
    + Equals(rhs:half2) : bool
    + <<override>> Equals(o:object) : bool
    + <<override>> GetHashCode() : int
    + <<override>> ToString() : string
    + ToString(format:string, formatProvider:IFormatProvider) : string
}
class math <<static>> <<partial>> {
    + {static} half2(x:half, y:half) : half2
    + {static} half2(xy:half2) : half2
    + {static} half2(v:half) : half2
    + {static} half2(v:float) : half2
    + {static} half2(v:float2) : half2
    + {static} half2(v:double) : half2
    + {static} half2(v:double2) : half2
    + {static} hash(v:half2) : uint
    + {static} hashwide(v:half2) : uint2
}
class "IEquatable`1"<T> {
}
class DebuggerProxy <<sealed>> {
    + DebuggerProxy(v:half2)
}
IFormattable <|- - half2
half2 - -> "x" half
half2 - -> "y" half
half2 - -> "zero" half2
half2 - -> "xxxx" half4
half2 - -> "xxxy" half4
half2 - -> "xxyx" half4
half2 - -> "xxyy" half4
half2 - -> "xyxx" half4
half2 - -> "xyxy" half4
half2 - -> "xyyx" half4
half2 - -> "xyyy" half4
half2 - -> "yxxx" half4
half2 - -> "yxxy" half4
half2 - -> "yxyx" half4
half2 - -> "yxyy" half4
half2 - -> "yyxx" half4
half2 - -> "yyxy" half4
half2 - -> "yyyx" half4
half2 - -> "yyyy" half4
half2 - -> "xxx" half3
half2 - -> "xxy" half3
half2 - -> "xyx" half3
half2 - -> "xyy" half3
half2 - -> "yxx" half3
half2 - -> "yxy" half3
half2 - -> "yyx" half3
half2 - -> "yyy" half3
half2 - -> "xx" half2
half2 - -> "xy" half2
half2 - -> "yx" half2
half2 - -> "yy" half2
half2 +- - DebuggerProxy
DebuggerProxy - -> "x" half
DebuggerProxy - -> "y" half
class half3 <<struct>> {
    + half3(x:half, y:half, z:half)
    + half3(x:half, yz:half2)
    + half3(xy:half2, z:half)
    + half3(xyz:half3)
    + half3(v:half)
    + half3(v:float)
    + half3(v:float3)
    + half3(v:double)
    + half3(v:double3)
    + Equals(rhs:half3) : bool
    + <<override>> Equals(o:object) : bool
    + <<override>> GetHashCode() : int
    + <<override>> ToString() : string
    + ToString(format:string, formatProvider:IFormatProvider) : string
}
class math <<static>> <<partial>> {
    + {static} half3(x:half, y:half, z:half) : half3
    + {static} half3(x:half, yz:half2) : half3
    + {static} half3(xy:half2, z:half) : half3
    + {static} half3(xyz:half3) : half3
    + {static} half3(v:half) : half3
    + {static} half3(v:float) : half3
    + {static} half3(v:float3) : half3
    + {static} half3(v:double) : half3
    + {static} half3(v:double3) : half3
    + {static} hash(v:half3) : uint
    + {static} hashwide(v:half3) : uint3
}
class "IEquatable`1"<T> {
}
class DebuggerProxy <<sealed>> {
    + DebuggerProxy(v:half3)
}
IFormattable <|- - half3
half3 - -> "x" half
half3 - -> "y" half
half3 - -> "z" half
half3 - -> "zero" half3
half3 - -> "xxxx" half4
half3 - -> "xxxy" half4
half3 - -> "xxxz" half4
half3 - -> "xxyx" half4
half3 - -> "xxyy" half4
half3 - -> "xxyz" half4
half3 - -> "xxzx" half4
half3 - -> "xxzy" half4
half3 - -> "xxzz" half4
half3 - -> "xyxx" half4
half3 - -> "xyxy" half4
half3 - -> "xyxz" half4
half3 - -> "xyyx" half4
half3 - -> "xyyy" half4
half3 - -> "xyyz" half4
half3 - -> "xyzx" half4
half3 - -> "xyzy" half4
half3 - -> "xyzz" half4
half3 - -> "xzxx" half4
half3 - -> "xzxy" half4
half3 - -> "xzxz" half4
half3 - -> "xzyx" half4
half3 - -> "xzyy" half4
half3 - -> "xzyz" half4
half3 - -> "xzzx" half4
half3 - -> "xzzy" half4
half3 - -> "xzzz" half4
half3 - -> "yxxx" half4
half3 - -> "yxxy" half4
half3 - -> "yxxz" half4
half3 - -> "yxyx" half4
half3 - -> "yxyy" half4
half3 - -> "yxyz" half4
half3 - -> "yxzx" half4
half3 - -> "yxzy" half4
half3 - -> "yxzz" half4
half3 - -> "yyxx" half4
half3 - -> "yyxy" half4
half3 - -> "yyxz" half4
half3 - -> "yyyx" half4
half3 - -> "yyyy" half4
half3 - -> "yyyz" half4
half3 - -> "yyzx" half4
half3 - -> "yyzy" half4
half3 - -> "yyzz" half4
half3 - -> "yzxx" half4
half3 - -> "yzxy" half4
half3 - -> "yzxz" half4
half3 - -> "yzyx" half4
half3 - -> "yzyy" half4
half3 - -> "yzyz" half4
half3 - -> "yzzx" half4
half3 - -> "yzzy" half4
half3 - -> "yzzz" half4
half3 - -> "zxxx" half4
half3 - -> "zxxy" half4
half3 - -> "zxxz" half4
half3 - -> "zxyx" half4
half3 - -> "zxyy" half4
half3 - -> "zxyz" half4
half3 - -> "zxzx" half4
half3 - -> "zxzy" half4
half3 - -> "zxzz" half4
half3 - -> "zyxx" half4
half3 - -> "zyxy" half4
half3 - -> "zyxz" half4
half3 - -> "zyyx" half4
half3 - -> "zyyy" half4
half3 - -> "zyyz" half4
half3 - -> "zyzx" half4
half3 - -> "zyzy" half4
half3 - -> "zyzz" half4
half3 - -> "zzxx" half4
half3 - -> "zzxy" half4
half3 - -> "zzxz" half4
half3 - -> "zzyx" half4
half3 - -> "zzyy" half4
half3 - -> "zzyz" half4
half3 - -> "zzzx" half4
half3 - -> "zzzy" half4
half3 - -> "zzzz" half4
half3 - -> "xxx" half3
half3 - -> "xxy" half3
half3 - -> "xxz" half3
half3 - -> "xyx" half3
half3 - -> "xyy" half3
half3 - -> "xyz" half3
half3 - -> "xzx" half3
half3 - -> "xzy" half3
half3 - -> "xzz" half3
half3 - -> "yxx" half3
half3 - -> "yxy" half3
half3 - -> "yxz" half3
half3 - -> "yyx" half3
half3 - -> "yyy" half3
half3 - -> "yyz" half3
half3 - -> "yzx" half3
half3 - -> "yzy" half3
half3 - -> "yzz" half3
half3 - -> "zxx" half3
half3 - -> "zxy" half3
half3 - -> "zxz" half3
half3 - -> "zyx" half3
half3 - -> "zyy" half3
half3 - -> "zyz" half3
half3 - -> "zzx" half3
half3 - -> "zzy" half3
half3 - -> "zzz" half3
half3 - -> "xx" half2
half3 - -> "xy" half2
half3 - -> "xz" half2
half3 - -> "yx" half2
half3 - -> "yy" half2
half3 - -> "yz" half2
half3 - -> "zx" half2
half3 - -> "zy" half2
half3 - -> "zz" half2
half3 +- - DebuggerProxy
DebuggerProxy - -> "x" half
DebuggerProxy - -> "y" half
DebuggerProxy - -> "z" half
class half4 <<struct>> {
    + half4(x:half, y:half, z:half, w:half)
    + half4(x:half, y:half, zw:half2)
    + half4(x:half, yz:half2, w:half)
    + half4(x:half, yzw:half3)
    + half4(xy:half2, z:half, w:half)
    + half4(xy:half2, zw:half2)
    + half4(xyz:half3, w:half)
    + half4(xyzw:half4)
    + half4(v:half)
    + half4(v:float)
    + half4(v:float4)
    + half4(v:double)
    + half4(v:double4)
    + Equals(rhs:half4) : bool
    + <<override>> Equals(o:object) : bool
    + <<override>> GetHashCode() : int
    + <<override>> ToString() : string
    + ToString(format:string, formatProvider:IFormatProvider) : string
}
class math <<static>> <<partial>> {
    + {static} half4(x:half, y:half, z:half, w:half) : half4
    + {static} half4(x:half, y:half, zw:half2) : half4
    + {static} half4(x:half, yz:half2, w:half) : half4
    + {static} half4(x:half, yzw:half3) : half4
    + {static} half4(xy:half2, z:half, w:half) : half4
    + {static} half4(xy:half2, zw:half2) : half4
    + {static} half4(xyz:half3, w:half) : half4
    + {static} half4(xyzw:half4) : half4
    + {static} half4(v:half) : half4
    + {static} half4(v:float) : half4
    + {static} half4(v:float4) : half4
    + {static} half4(v:double) : half4
    + {static} half4(v:double4) : half4
    + {static} hash(v:half4) : uint
    + {static} hashwide(v:half4) : uint4
}
class "IEquatable`1"<T> {
}
class DebuggerProxy <<sealed>> {
    + DebuggerProxy(v:half4)
}
IFormattable <|- - half4
half4 - -> "x" half
half4 - -> "y" half
half4 - -> "z" half
half4 - -> "w" half
half4 - -> "zero" half4
half4 - -> "xxxx" half4
half4 - -> "xxxy" half4
half4 - -> "xxxz" half4
half4 - -> "xxxw" half4
half4 - -> "xxyx" half4
half4 - -> "xxyy" half4
half4 - -> "xxyz" half4
half4 - -> "xxyw" half4
half4 - -> "xxzx" half4
half4 - -> "xxzy" half4
half4 - -> "xxzz" half4
half4 - -> "xxzw" half4
half4 - -> "xxwx" half4
half4 - -> "xxwy" half4
half4 - -> "xxwz" half4
half4 - -> "xxww" half4
half4 - -> "xyxx" half4
half4 - -> "xyxy" half4
half4 - -> "xyxz" half4
half4 - -> "xyxw" half4
half4 - -> "xyyx" half4
half4 - -> "xyyy" half4
half4 - -> "xyyz" half4
half4 - -> "xyyw" half4
half4 - -> "xyzx" half4
half4 - -> "xyzy" half4
half4 - -> "xyzz" half4
half4 - -> "xyzw" half4
half4 - -> "xywx" half4
half4 - -> "xywy" half4
half4 - -> "xywz" half4
half4 - -> "xyww" half4
half4 - -> "xzxx" half4
half4 - -> "xzxy" half4
half4 - -> "xzxz" half4
half4 - -> "xzxw" half4
half4 - -> "xzyx" half4
half4 - -> "xzyy" half4
half4 - -> "xzyz" half4
half4 - -> "xzyw" half4
half4 - -> "xzzx" half4
half4 - -> "xzzy" half4
half4 - -> "xzzz" half4
half4 - -> "xzzw" half4
half4 - -> "xzwx" half4
half4 - -> "xzwy" half4
half4 - -> "xzwz" half4
half4 - -> "xzww" half4
half4 - -> "xwxx" half4
half4 - -> "xwxy" half4
half4 - -> "xwxz" half4
half4 - -> "xwxw" half4
half4 - -> "xwyx" half4
half4 - -> "xwyy" half4
half4 - -> "xwyz" half4
half4 - -> "xwyw" half4
half4 - -> "xwzx" half4
half4 - -> "xwzy" half4
half4 - -> "xwzz" half4
half4 - -> "xwzw" half4
half4 - -> "xwwx" half4
half4 - -> "xwwy" half4
half4 - -> "xwwz" half4
half4 - -> "xwww" half4
half4 - -> "yxxx" half4
half4 - -> "yxxy" half4
half4 - -> "yxxz" half4
half4 - -> "yxxw" half4
half4 - -> "yxyx" half4
half4 - -> "yxyy" half4
half4 - -> "yxyz" half4
half4 - -> "yxyw" half4
half4 - -> "yxzx" half4
half4 - -> "yxzy" half4
half4 - -> "yxzz" half4
half4 - -> "yxzw" half4
half4 - -> "yxwx" half4
half4 - -> "yxwy" half4
half4 - -> "yxwz" half4
half4 - -> "yxww" half4
half4 - -> "yyxx" half4
half4 - -> "yyxy" half4
half4 - -> "yyxz" half4
half4 - -> "yyxw" half4
half4 - -> "yyyx" half4
half4 - -> "yyyy" half4
half4 - -> "yyyz" half4
half4 - -> "yyyw" half4
half4 - -> "yyzx" half4
half4 - -> "yyzy" half4
half4 - -> "yyzz" half4
half4 - -> "yyzw" half4
half4 - -> "yywx" half4
half4 - -> "yywy" half4
half4 - -> "yywz" half4
half4 - -> "yyww" half4
half4 - -> "yzxx" half4
half4 - -> "yzxy" half4
half4 - -> "yzxz" half4
half4 - -> "yzxw" half4
half4 - -> "yzyx" half4
half4 - -> "yzyy" half4
half4 - -> "yzyz" half4
half4 - -> "yzyw" half4
half4 - -> "yzzx" half4
half4 - -> "yzzy" half4
half4 - -> "yzzz" half4
half4 - -> "yzzw" half4
half4 - -> "yzwx" half4
half4 - -> "yzwy" half4
half4 - -> "yzwz" half4
half4 - -> "yzww" half4
half4 - -> "ywxx" half4
half4 - -> "ywxy" half4
half4 - -> "ywxz" half4
half4 - -> "ywxw" half4
half4 - -> "ywyx" half4
half4 - -> "ywyy" half4
half4 - -> "ywyz" half4
half4 - -> "ywyw" half4
half4 - -> "ywzx" half4
half4 - -> "ywzy" half4
half4 - -> "ywzz" half4
half4 - -> "ywzw" half4
half4 - -> "ywwx" half4
half4 - -> "ywwy" half4
half4 - -> "ywwz" half4
half4 - -> "ywww" half4
half4 - -> "zxxx" half4
half4 - -> "zxxy" half4
half4 - -> "zxxz" half4
half4 - -> "zxxw" half4
half4 - -> "zxyx" half4
half4 - -> "zxyy" half4
half4 - -> "zxyz" half4
half4 - -> "zxyw" half4
half4 - -> "zxzx" half4
half4 - -> "zxzy" half4
half4 - -> "zxzz" half4
half4 - -> "zxzw" half4
half4 - -> "zxwx" half4
half4 - -> "zxwy" half4
half4 - -> "zxwz" half4
half4 - -> "zxww" half4
half4 - -> "zyxx" half4
half4 - -> "zyxy" half4
half4 - -> "zyxz" half4
half4 - -> "zyxw" half4
half4 - -> "zyyx" half4
half4 - -> "zyyy" half4
half4 - -> "zyyz" half4
half4 - -> "zyyw" half4
half4 - -> "zyzx" half4
half4 - -> "zyzy" half4
half4 - -> "zyzz" half4
half4 - -> "zyzw" half4
half4 - -> "zywx" half4
half4 - -> "zywy" half4
half4 - -> "zywz" half4
half4 - -> "zyww" half4
half4 - -> "zzxx" half4
half4 - -> "zzxy" half4
half4 - -> "zzxz" half4
half4 - -> "zzxw" half4
half4 - -> "zzyx" half4
half4 - -> "zzyy" half4
half4 - -> "zzyz" half4
half4 - -> "zzyw" half4
half4 - -> "zzzx" half4
half4 - -> "zzzy" half4
half4 - -> "zzzz" half4
half4 - -> "zzzw" half4
half4 - -> "zzwx" half4
half4 - -> "zzwy" half4
half4 - -> "zzwz" half4
half4 - -> "zzww" half4
half4 - -> "zwxx" half4
half4 - -> "zwxy" half4
half4 - -> "zwxz" half4
half4 - -> "zwxw" half4
half4 - -> "zwyx" half4
half4 - -> "zwyy" half4
half4 - -> "zwyz" half4
half4 - -> "zwyw" half4
half4 - -> "zwzx" half4
half4 - -> "zwzy" half4
half4 - -> "zwzz" half4
half4 - -> "zwzw" half4
half4 - -> "zwwx" half4
half4 - -> "zwwy" half4
half4 - -> "zwwz" half4
half4 - -> "zwww" half4
half4 - -> "wxxx" half4
half4 - -> "wxxy" half4
half4 - -> "wxxz" half4
half4 - -> "wxxw" half4
half4 - -> "wxyx" half4
half4 - -> "wxyy" half4
half4 - -> "wxyz" half4
half4 - -> "wxyw" half4
half4 - -> "wxzx" half4
half4 - -> "wxzy" half4
half4 - -> "wxzz" half4
half4 - -> "wxzw" half4
half4 - -> "wxwx" half4
half4 - -> "wxwy" half4
half4 - -> "wxwz" half4
half4 - -> "wxww" half4
half4 - -> "wyxx" half4
half4 - -> "wyxy" half4
half4 - -> "wyxz" half4
half4 - -> "wyxw" half4
half4 - -> "wyyx" half4
half4 - -> "wyyy" half4
half4 - -> "wyyz" half4
half4 - -> "wyyw" half4
half4 - -> "wyzx" half4
half4 - -> "wyzy" half4
half4 - -> "wyzz" half4
half4 - -> "wyzw" half4
half4 - -> "wywx" half4
half4 - -> "wywy" half4
half4 - -> "wywz" half4
half4 - -> "wyww" half4
half4 - -> "wzxx" half4
half4 - -> "wzxy" half4
half4 - -> "wzxz" half4
half4 - -> "wzxw" half4
half4 - -> "wzyx" half4
half4 - -> "wzyy" half4
half4 - -> "wzyz" half4
half4 - -> "wzyw" half4
half4 - -> "wzzx" half4
half4 - -> "wzzy" half4
half4 - -> "wzzz" half4
half4 - -> "wzzw" half4
half4 - -> "wzwx" half4
half4 - -> "wzwy" half4
half4 - -> "wzwz" half4
half4 - -> "wzww" half4
half4 - -> "wwxx" half4
half4 - -> "wwxy" half4
half4 - -> "wwxz" half4
half4 - -> "wwxw" half4
half4 - -> "wwyx" half4
half4 - -> "wwyy" half4
half4 - -> "wwyz" half4
half4 - -> "wwyw" half4
half4 - -> "wwzx" half4
half4 - -> "wwzy" half4
half4 - -> "wwzz" half4
half4 - -> "wwzw" half4
half4 - -> "wwwx" half4
half4 - -> "wwwy" half4
half4 - -> "wwwz" half4
half4 - -> "wwww" half4
half4 - -> "xxx" half3
half4 - -> "xxy" half3
half4 - -> "xxz" half3
half4 - -> "xxw" half3
half4 - -> "xyx" half3
half4 - -> "xyy" half3
half4 - -> "xyz" half3
half4 - -> "xyw" half3
half4 - -> "xzx" half3
half4 - -> "xzy" half3
half4 - -> "xzz" half3
half4 - -> "xzw" half3
half4 - -> "xwx" half3
half4 - -> "xwy" half3
half4 - -> "xwz" half3
half4 - -> "xww" half3
half4 - -> "yxx" half3
half4 - -> "yxy" half3
half4 - -> "yxz" half3
half4 - -> "yxw" half3
half4 - -> "yyx" half3
half4 - -> "yyy" half3
half4 - -> "yyz" half3
half4 - -> "yyw" half3
half4 - -> "yzx" half3
half4 - -> "yzy" half3
half4 - -> "yzz" half3
half4 - -> "yzw" half3
half4 - -> "ywx" half3
half4 - -> "ywy" half3
half4 - -> "ywz" half3
half4 - -> "yww" half3
half4 - -> "zxx" half3
half4 - -> "zxy" half3
half4 - -> "zxz" half3
half4 - -> "zxw" half3
half4 - -> "zyx" half3
half4 - -> "zyy" half3
half4 - -> "zyz" half3
half4 - -> "zyw" half3
half4 - -> "zzx" half3
half4 - -> "zzy" half3
half4 - -> "zzz" half3
half4 - -> "zzw" half3
half4 - -> "zwx" half3
half4 - -> "zwy" half3
half4 - -> "zwz" half3
half4 - -> "zww" half3
half4 - -> "wxx" half3
half4 - -> "wxy" half3
half4 - -> "wxz" half3
half4 - -> "wxw" half3
half4 - -> "wyx" half3
half4 - -> "wyy" half3
half4 - -> "wyz" half3
half4 - -> "wyw" half3
half4 - -> "wzx" half3
half4 - -> "wzy" half3
half4 - -> "wzz" half3
half4 - -> "wzw" half3
half4 - -> "wwx" half3
half4 - -> "wwy" half3
half4 - -> "wwz" half3
half4 - -> "www" half3
half4 - -> "xx" half2
half4 - -> "xy" half2
half4 - -> "xz" half2
half4 - -> "xw" half2
half4 - -> "yx" half2
half4 - -> "yy" half2
half4 - -> "yz" half2
half4 - -> "yw" half2
half4 - -> "zx" half2
half4 - -> "zy" half2
half4 - -> "zz" half2
half4 - -> "zw" half2
half4 - -> "wx" half2
half4 - -> "wy" half2
half4 - -> "wz" half2
half4 - -> "ww" half2
half4 +- - DebuggerProxy
DebuggerProxy - -> "x" half
DebuggerProxy - -> "y" half
DebuggerProxy - -> "z" half
DebuggerProxy - -> "w" half
class Il2CppEagerStaticClassConstructionAttribute {
}
Attribute <|- - Il2CppEagerStaticClassConstructionAttribute
class int2 <<struct>> {
    + x : int
    + y : int
    + int2(x:int, y:int)
    + int2(xy:int2)
    + int2(v:int)
    + int2(v:bool)
    + int2(v:bool2)
    + int2(v:uint)
    + int2(v:uint2)
    + int2(v:float)
    + int2(v:float2)
    + int2(v:double)
    + int2(v:double2)
    + Equals(rhs:int2) : bool
    + <<override>> Equals(o:object) : bool
    + <<override>> GetHashCode() : int
    + <<override>> ToString() : string
    + ToString(format:string, formatProvider:IFormatProvider) : string
}
class math <<static>> <<partial>> {
    + {static} int2(x:int, y:int) : int2
    + {static} int2(xy:int2) : int2
    + {static} int2(v:int) : int2
    + {static} int2(v:bool) : int2
    + {static} int2(v:bool2) : int2
    + {static} int2(v:uint) : int2
    + {static} int2(v:uint2) : int2
    + {static} int2(v:float) : int2
    + {static} int2(v:float2) : int2
    + {static} int2(v:double) : int2
    + {static} int2(v:double2) : int2
    + {static} hash(v:int2) : uint
    + {static} hashwide(v:int2) : uint2
    + {static} shuffle(left:int2, right:int2, x:ShuffleComponent) : int
    + {static} shuffle(left:int2, right:int2, x:ShuffleComponent, y:ShuffleComponent) : int2
    + {static} shuffle(left:int2, right:int2, x:ShuffleComponent, y:ShuffleComponent, z:ShuffleComponent) : int3
    + {static} shuffle(left:int2, right:int2, x:ShuffleComponent, y:ShuffleComponent, z:ShuffleComponent, w:ShuffleComponent) : int4
}
class "IEquatable`1"<T> {
}
class DebuggerProxy <<sealed>> {
    + x : int
    + y : int
    + DebuggerProxy(v:int2)
}
IFormattable <|- - int2
int2 - -> "zero" int2
int2 - -> "xxxx" int4
int2 - -> "xxxy" int4
int2 - -> "xxyx" int4
int2 - -> "xxyy" int4
int2 - -> "xyxx" int4
int2 - -> "xyxy" int4
int2 - -> "xyyx" int4
int2 - -> "xyyy" int4
int2 - -> "yxxx" int4
int2 - -> "yxxy" int4
int2 - -> "yxyx" int4
int2 - -> "yxyy" int4
int2 - -> "yyxx" int4
int2 - -> "yyxy" int4
int2 - -> "yyyx" int4
int2 - -> "yyyy" int4
int2 - -> "xxx" int3
int2 - -> "xxy" int3
int2 - -> "xyx" int3
int2 - -> "xyy" int3
int2 - -> "yxx" int3
int2 - -> "yxy" int3
int2 - -> "yyx" int3
int2 - -> "yyy" int3
int2 - -> "xx" int2
int2 - -> "xy" int2
int2 - -> "yx" int2
int2 - -> "yy" int2
int2 +- - DebuggerProxy
class int2x2 <<struct>> {
    + int2x2(c0:int2, c1:int2)
    + int2x2(m00:int, m01:int, m10:int, m11:int)
    + int2x2(v:int)
    + int2x2(v:bool)
    + int2x2(v:bool2x2)
    + int2x2(v:uint)
    + int2x2(v:uint2x2)
    + int2x2(v:float)
    + int2x2(v:float2x2)
    + int2x2(v:double)
    + int2x2(v:double2x2)
    + Equals(rhs:int2x2) : bool
    + <<override>> Equals(o:object) : bool
    + <<override>> GetHashCode() : int
    + <<override>> ToString() : string
    + ToString(format:string, formatProvider:IFormatProvider) : string
}
class math <<static>> <<partial>> {
    + {static} int2x2(c0:int2, c1:int2) : int2x2
    + {static} int2x2(m00:int, m01:int, m10:int, m11:int) : int2x2
    + {static} int2x2(v:int) : int2x2
    + {static} int2x2(v:bool) : int2x2
    + {static} int2x2(v:bool2x2) : int2x2
    + {static} int2x2(v:uint) : int2x2
    + {static} int2x2(v:uint2x2) : int2x2
    + {static} int2x2(v:float) : int2x2
    + {static} int2x2(v:float2x2) : int2x2
    + {static} int2x2(v:double) : int2x2
    + {static} int2x2(v:double2x2) : int2x2
    + {static} transpose(v:int2x2) : int2x2
    + {static} determinant(m:int2x2) : int
    + {static} hash(v:int2x2) : uint
    + {static} hashwide(v:int2x2) : uint2
}
class "IEquatable`1"<T> {
}
IFormattable <|- - int2x2
int2x2 - -> "c0" int2
int2x2 - -> "c1" int2
int2x2 o-> "identity" int2x2
int2x2 - -> "zero" int2x2
class int2x3 <<struct>> {
    + int2x3(c0:int2, c1:int2, c2:int2)
    + int2x3(m00:int, m01:int, m02:int, m10:int, m11:int, m12:int)
    + int2x3(v:int)
    + int2x3(v:bool)
    + int2x3(v:bool2x3)
    + int2x3(v:uint)
    + int2x3(v:uint2x3)
    + int2x3(v:float)
    + int2x3(v:float2x3)
    + int2x3(v:double)
    + int2x3(v:double2x3)
    + Equals(rhs:int2x3) : bool
    + <<override>> Equals(o:object) : bool
    + <<override>> GetHashCode() : int
    + <<override>> ToString() : string
    + ToString(format:string, formatProvider:IFormatProvider) : string
}
class math <<static>> <<partial>> {
    + {static} int2x3(c0:int2, c1:int2, c2:int2) : int2x3
    + {static} int2x3(m00:int, m01:int, m02:int, m10:int, m11:int, m12:int) : int2x3
    + {static} int2x3(v:int) : int2x3
    + {static} int2x3(v:bool) : int2x3
    + {static} int2x3(v:bool2x3) : int2x3
    + {static} int2x3(v:uint) : int2x3
    + {static} int2x3(v:uint2x3) : int2x3
    + {static} int2x3(v:float) : int2x3
    + {static} int2x3(v:float2x3) : int2x3
    + {static} int2x3(v:double) : int2x3
    + {static} int2x3(v:double2x3) : int2x3
    + {static} transpose(v:int2x3) : int3x2
    + {static} hash(v:int2x3) : uint
    + {static} hashwide(v:int2x3) : uint2
}
class "IEquatable`1"<T> {
}
IFormattable <|- - int2x3
int2x3 - -> "c0" int2
int2x3 - -> "c1" int2
int2x3 - -> "c2" int2
int2x3 - -> "zero" int2x3
class int2x4 <<struct>> {
    + int2x4(c0:int2, c1:int2, c2:int2, c3:int2)
    + int2x4(m00:int, m01:int, m02:int, m03:int, m10:int, m11:int, m12:int, m13:int)
    + int2x4(v:int)
    + int2x4(v:bool)
    + int2x4(v:bool2x4)
    + int2x4(v:uint)
    + int2x4(v:uint2x4)
    + int2x4(v:float)
    + int2x4(v:float2x4)
    + int2x4(v:double)
    + int2x4(v:double2x4)
    + Equals(rhs:int2x4) : bool
    + <<override>> Equals(o:object) : bool
    + <<override>> GetHashCode() : int
    + <<override>> ToString() : string
    + ToString(format:string, formatProvider:IFormatProvider) : string
}
class math <<static>> <<partial>> {
    + {static} int2x4(c0:int2, c1:int2, c2:int2, c3:int2) : int2x4
    + {static} int2x4(m00:int, m01:int, m02:int, m03:int, m10:int, m11:int, m12:int, m13:int) : int2x4
    + {static} int2x4(v:int) : int2x4
    + {static} int2x4(v:bool) : int2x4
    + {static} int2x4(v:bool2x4) : int2x4
    + {static} int2x4(v:uint) : int2x4
    + {static} int2x4(v:uint2x4) : int2x4
    + {static} int2x4(v:float) : int2x4
    + {static} int2x4(v:float2x4) : int2x4
    + {static} int2x4(v:double) : int2x4
    + {static} int2x4(v:double2x4) : int2x4
    + {static} transpose(v:int2x4) : int4x2
    + {static} hash(v:int2x4) : uint
    + {static} hashwide(v:int2x4) : uint2
}
class "IEquatable`1"<T> {
}
IFormattable <|- - int2x4
int2x4 - -> "c0" int2
int2x4 - -> "c1" int2
int2x4 - -> "c2" int2
int2x4 - -> "c3" int2
int2x4 - -> "zero" int2x4
class int3 <<struct>> {
    + x : int
    + y : int
    + z : int
    + int3(x:int, y:int, z:int)
    + int3(x:int, yz:int2)
    + int3(xy:int2, z:int)
    + int3(xyz:int3)
    + int3(v:int)
    + int3(v:bool)
    + int3(v:bool3)
    + int3(v:uint)
    + int3(v:uint3)
    + int3(v:float)
    + int3(v:float3)
    + int3(v:double)
    + int3(v:double3)
    + Equals(rhs:int3) : bool
    + <<override>> Equals(o:object) : bool
    + <<override>> GetHashCode() : int
    + <<override>> ToString() : string
    + ToString(format:string, formatProvider:IFormatProvider) : string
}
class math <<static>> <<partial>> {
    + {static} int3(x:int, y:int, z:int) : int3
    + {static} int3(x:int, yz:int2) : int3
    + {static} int3(xy:int2, z:int) : int3
    + {static} int3(xyz:int3) : int3
    + {static} int3(v:int) : int3
    + {static} int3(v:bool) : int3
    + {static} int3(v:bool3) : int3
    + {static} int3(v:uint) : int3
    + {static} int3(v:uint3) : int3
    + {static} int3(v:float) : int3
    + {static} int3(v:float3) : int3
    + {static} int3(v:double) : int3
    + {static} int3(v:double3) : int3
    + {static} hash(v:int3) : uint
    + {static} hashwide(v:int3) : uint3
    + {static} shuffle(left:int3, right:int3, x:ShuffleComponent) : int
    + {static} shuffle(left:int3, right:int3, x:ShuffleComponent, y:ShuffleComponent) : int2
    + {static} shuffle(left:int3, right:int3, x:ShuffleComponent, y:ShuffleComponent, z:ShuffleComponent) : int3
    + {static} shuffle(left:int3, right:int3, x:ShuffleComponent, y:ShuffleComponent, z:ShuffleComponent, w:ShuffleComponent) : int4
}
class "IEquatable`1"<T> {
}
class DebuggerProxy <<sealed>> {
    + x : int
    + y : int
    + z : int
    + DebuggerProxy(v:int3)
}
IFormattable <|- - int3
int3 - -> "zero" int3
int3 - -> "xxxx" int4
int3 - -> "xxxy" int4
int3 - -> "xxxz" int4
int3 - -> "xxyx" int4
int3 - -> "xxyy" int4
int3 - -> "xxyz" int4
int3 - -> "xxzx" int4
int3 - -> "xxzy" int4
int3 - -> "xxzz" int4
int3 - -> "xyxx" int4
int3 - -> "xyxy" int4
int3 - -> "xyxz" int4
int3 - -> "xyyx" int4
int3 - -> "xyyy" int4
int3 - -> "xyyz" int4
int3 - -> "xyzx" int4
int3 - -> "xyzy" int4
int3 - -> "xyzz" int4
int3 - -> "xzxx" int4
int3 - -> "xzxy" int4
int3 - -> "xzxz" int4
int3 - -> "xzyx" int4
int3 - -> "xzyy" int4
int3 - -> "xzyz" int4
int3 - -> "xzzx" int4
int3 - -> "xzzy" int4
int3 - -> "xzzz" int4
int3 - -> "yxxx" int4
int3 - -> "yxxy" int4
int3 - -> "yxxz" int4
int3 - -> "yxyx" int4
int3 - -> "yxyy" int4
int3 - -> "yxyz" int4
int3 - -> "yxzx" int4
int3 - -> "yxzy" int4
int3 - -> "yxzz" int4
int3 - -> "yyxx" int4
int3 - -> "yyxy" int4
int3 - -> "yyxz" int4
int3 - -> "yyyx" int4
int3 - -> "yyyy" int4
int3 - -> "yyyz" int4
int3 - -> "yyzx" int4
int3 - -> "yyzy" int4
int3 - -> "yyzz" int4
int3 - -> "yzxx" int4
int3 - -> "yzxy" int4
int3 - -> "yzxz" int4
int3 - -> "yzyx" int4
int3 - -> "yzyy" int4
int3 - -> "yzyz" int4
int3 - -> "yzzx" int4
int3 - -> "yzzy" int4
int3 - -> "yzzz" int4
int3 - -> "zxxx" int4
int3 - -> "zxxy" int4
int3 - -> "zxxz" int4
int3 - -> "zxyx" int4
int3 - -> "zxyy" int4
int3 - -> "zxyz" int4
int3 - -> "zxzx" int4
int3 - -> "zxzy" int4
int3 - -> "zxzz" int4
int3 - -> "zyxx" int4
int3 - -> "zyxy" int4
int3 - -> "zyxz" int4
int3 - -> "zyyx" int4
int3 - -> "zyyy" int4
int3 - -> "zyyz" int4
int3 - -> "zyzx" int4
int3 - -> "zyzy" int4
int3 - -> "zyzz" int4
int3 - -> "zzxx" int4
int3 - -> "zzxy" int4
int3 - -> "zzxz" int4
int3 - -> "zzyx" int4
int3 - -> "zzyy" int4
int3 - -> "zzyz" int4
int3 - -> "zzzx" int4
int3 - -> "zzzy" int4
int3 - -> "zzzz" int4
int3 - -> "xxx" int3
int3 - -> "xxy" int3
int3 - -> "xxz" int3
int3 - -> "xyx" int3
int3 - -> "xyy" int3
int3 - -> "xyz" int3
int3 - -> "xzx" int3
int3 - -> "xzy" int3
int3 - -> "xzz" int3
int3 - -> "yxx" int3
int3 - -> "yxy" int3
int3 - -> "yxz" int3
int3 - -> "yyx" int3
int3 - -> "yyy" int3
int3 - -> "yyz" int3
int3 - -> "yzx" int3
int3 - -> "yzy" int3
int3 - -> "yzz" int3
int3 - -> "zxx" int3
int3 - -> "zxy" int3
int3 - -> "zxz" int3
int3 - -> "zyx" int3
int3 - -> "zyy" int3
int3 - -> "zyz" int3
int3 - -> "zzx" int3
int3 - -> "zzy" int3
int3 - -> "zzz" int3
int3 - -> "xx" int2
int3 - -> "xy" int2
int3 - -> "xz" int2
int3 - -> "yx" int2
int3 - -> "yy" int2
int3 - -> "yz" int2
int3 - -> "zx" int2
int3 - -> "zy" int2
int3 - -> "zz" int2
int3 +- - DebuggerProxy
class int3x2 <<struct>> {
    + int3x2(c0:int3, c1:int3)
    + int3x2(m00:int, m01:int, m10:int, m11:int, m20:int, m21:int)
    + int3x2(v:int)
    + int3x2(v:bool)
    + int3x2(v:bool3x2)
    + int3x2(v:uint)
    + int3x2(v:uint3x2)
    + int3x2(v:float)
    + int3x2(v:float3x2)
    + int3x2(v:double)
    + int3x2(v:double3x2)
    + Equals(rhs:int3x2) : bool
    + <<override>> Equals(o:object) : bool
    + <<override>> GetHashCode() : int
    + <<override>> ToString() : string
    + ToString(format:string, formatProvider:IFormatProvider) : string
}
class math <<static>> <<partial>> {
    + {static} int3x2(c0:int3, c1:int3) : int3x2
    + {static} int3x2(m00:int, m01:int, m10:int, m11:int, m20:int, m21:int) : int3x2
    + {static} int3x2(v:int) : int3x2
    + {static} int3x2(v:bool) : int3x2
    + {static} int3x2(v:bool3x2) : int3x2
    + {static} int3x2(v:uint) : int3x2
    + {static} int3x2(v:uint3x2) : int3x2
    + {static} int3x2(v:float) : int3x2
    + {static} int3x2(v:float3x2) : int3x2
    + {static} int3x2(v:double) : int3x2
    + {static} int3x2(v:double3x2) : int3x2
    + {static} transpose(v:int3x2) : int2x3
    + {static} hash(v:int3x2) : uint
    + {static} hashwide(v:int3x2) : uint3
}
class "IEquatable`1"<T> {
}
IFormattable <|- - int3x2
int3x2 - -> "c0" int3
int3x2 - -> "c1" int3
int3x2 - -> "zero" int3x2
class int3x3 <<struct>> {
    + int3x3(c0:int3, c1:int3, c2:int3)
    + int3x3(m00:int, m01:int, m02:int, m10:int, m11:int, m12:int, m20:int, m21:int, m22:int)
    + int3x3(v:int)
    + int3x3(v:bool)
    + int3x3(v:bool3x3)
    + int3x3(v:uint)
    + int3x3(v:uint3x3)
    + int3x3(v:float)
    + int3x3(v:float3x3)
    + int3x3(v:double)
    + int3x3(v:double3x3)
    + Equals(rhs:int3x3) : bool
    + <<override>> Equals(o:object) : bool
    + <<override>> GetHashCode() : int
    + <<override>> ToString() : string
    + ToString(format:string, formatProvider:IFormatProvider) : string
}
class math <<static>> <<partial>> {
    + {static} int3x3(c0:int3, c1:int3, c2:int3) : int3x3
    + {static} int3x3(m00:int, m01:int, m02:int, m10:int, m11:int, m12:int, m20:int, m21:int, m22:int) : int3x3
    + {static} int3x3(v:int) : int3x3
    + {static} int3x3(v:bool) : int3x3
    + {static} int3x3(v:bool3x3) : int3x3
    + {static} int3x3(v:uint) : int3x3
    + {static} int3x3(v:uint3x3) : int3x3
    + {static} int3x3(v:float) : int3x3
    + {static} int3x3(v:float3x3) : int3x3
    + {static} int3x3(v:double) : int3x3
    + {static} int3x3(v:double3x3) : int3x3
    + {static} transpose(v:int3x3) : int3x3
    + {static} determinant(m:int3x3) : int
    + {static} hash(v:int3x3) : uint
    + {static} hashwide(v:int3x3) : uint3
}
class "IEquatable`1"<T> {
}
IFormattable <|- - int3x3
int3x3 - -> "c0" int3
int3x3 - -> "c1" int3
int3x3 - -> "c2" int3
int3x3 o-> "identity" int3x3
int3x3 - -> "zero" int3x3
class int3x4 <<struct>> {
    + int3x4(c0:int3, c1:int3, c2:int3, c3:int3)
    + int3x4(m00:int, m01:int, m02:int, m03:int, m10:int, m11:int, m12:int, m13:int, m20:int, m21:int, m22:int, m23:int)
    + int3x4(v:int)
    + int3x4(v:bool)
    + int3x4(v:bool3x4)
    + int3x4(v:uint)
    + int3x4(v:uint3x4)
    + int3x4(v:float)
    + int3x4(v:float3x4)
    + int3x4(v:double)
    + int3x4(v:double3x4)
    + Equals(rhs:int3x4) : bool
    + <<override>> Equals(o:object) : bool
    + <<override>> GetHashCode() : int
    + <<override>> ToString() : string
    + ToString(format:string, formatProvider:IFormatProvider) : string
}
class math <<static>> <<partial>> {
    + {static} int3x4(c0:int3, c1:int3, c2:int3, c3:int3) : int3x4
    + {static} int3x4(m00:int, m01:int, m02:int, m03:int, m10:int, m11:int, m12:int, m13:int, m20:int, m21:int, m22:int, m23:int) : int3x4
    + {static} int3x4(v:int) : int3x4
    + {static} int3x4(v:bool) : int3x4
    + {static} int3x4(v:bool3x4) : int3x4
    + {static} int3x4(v:uint) : int3x4
    + {static} int3x4(v:uint3x4) : int3x4
    + {static} int3x4(v:float) : int3x4
    + {static} int3x4(v:float3x4) : int3x4
    + {static} int3x4(v:double) : int3x4
    + {static} int3x4(v:double3x4) : int3x4
    + {static} transpose(v:int3x4) : int4x3
    + {static} hash(v:int3x4) : uint
    + {static} hashwide(v:int3x4) : uint3
}
class "IEquatable`1"<T> {
}
IFormattable <|- - int3x4
int3x4 - -> "c0" int3
int3x4 - -> "c1" int3
int3x4 - -> "c2" int3
int3x4 - -> "c3" int3
int3x4 - -> "zero" int3x4
class int4 <<struct>> {
    + x : int
    + y : int
    + z : int
    + w : int
    + int4(x:int, y:int, z:int, w:int)
    + int4(x:int, y:int, zw:int2)
    + int4(x:int, yz:int2, w:int)
    + int4(x:int, yzw:int3)
    + int4(xy:int2, z:int, w:int)
    + int4(xy:int2, zw:int2)
    + int4(xyz:int3, w:int)
    + int4(xyzw:int4)
    + int4(v:int)
    + int4(v:bool)
    + int4(v:bool4)
    + int4(v:uint)
    + int4(v:uint4)
    + int4(v:float)
    + int4(v:float4)
    + int4(v:double)
    + int4(v:double4)
    + Equals(rhs:int4) : bool
    + <<override>> Equals(o:object) : bool
    + <<override>> GetHashCode() : int
    + <<override>> ToString() : string
    + ToString(format:string, formatProvider:IFormatProvider) : string
}
class math <<static>> <<partial>> {
    + {static} int4(x:int, y:int, z:int, w:int) : int4
    + {static} int4(x:int, y:int, zw:int2) : int4
    + {static} int4(x:int, yz:int2, w:int) : int4
    + {static} int4(x:int, yzw:int3) : int4
    + {static} int4(xy:int2, z:int, w:int) : int4
    + {static} int4(xy:int2, zw:int2) : int4
    + {static} int4(xyz:int3, w:int) : int4
    + {static} int4(xyzw:int4) : int4
    + {static} int4(v:int) : int4
    + {static} int4(v:bool) : int4
    + {static} int4(v:bool4) : int4
    + {static} int4(v:uint) : int4
    + {static} int4(v:uint4) : int4
    + {static} int4(v:float) : int4
    + {static} int4(v:float4) : int4
    + {static} int4(v:double) : int4
    + {static} int4(v:double4) : int4
    + {static} hash(v:int4) : uint
    + {static} hashwide(v:int4) : uint4
    + {static} shuffle(left:int4, right:int4, x:ShuffleComponent) : int
    + {static} shuffle(left:int4, right:int4, x:ShuffleComponent, y:ShuffleComponent) : int2
    + {static} shuffle(left:int4, right:int4, x:ShuffleComponent, y:ShuffleComponent, z:ShuffleComponent) : int3
    + {static} shuffle(left:int4, right:int4, x:ShuffleComponent, y:ShuffleComponent, z:ShuffleComponent, w:ShuffleComponent) : int4
}
class "IEquatable`1"<T> {
}
class DebuggerProxy <<sealed>> {
    + x : int
    + y : int
    + z : int
    + w : int
    + DebuggerProxy(v:int4)
}
IFormattable <|- - int4
int4 - -> "zero" int4
int4 - -> "xxxx" int4
int4 - -> "xxxy" int4
int4 - -> "xxxz" int4
int4 - -> "xxxw" int4
int4 - -> "xxyx" int4
int4 - -> "xxyy" int4
int4 - -> "xxyz" int4
int4 - -> "xxyw" int4
int4 - -> "xxzx" int4
int4 - -> "xxzy" int4
int4 - -> "xxzz" int4
int4 - -> "xxzw" int4
int4 - -> "xxwx" int4
int4 - -> "xxwy" int4
int4 - -> "xxwz" int4
int4 - -> "xxww" int4
int4 - -> "xyxx" int4
int4 - -> "xyxy" int4
int4 - -> "xyxz" int4
int4 - -> "xyxw" int4
int4 - -> "xyyx" int4
int4 - -> "xyyy" int4
int4 - -> "xyyz" int4
int4 - -> "xyyw" int4
int4 - -> "xyzx" int4
int4 - -> "xyzy" int4
int4 - -> "xyzz" int4
int4 - -> "xyzw" int4
int4 - -> "xywx" int4
int4 - -> "xywy" int4
int4 - -> "xywz" int4
int4 - -> "xyww" int4
int4 - -> "xzxx" int4
int4 - -> "xzxy" int4
int4 - -> "xzxz" int4
int4 - -> "xzxw" int4
int4 - -> "xzyx" int4
int4 - -> "xzyy" int4
int4 - -> "xzyz" int4
int4 - -> "xzyw" int4
int4 - -> "xzzx" int4
int4 - -> "xzzy" int4
int4 - -> "xzzz" int4
int4 - -> "xzzw" int4
int4 - -> "xzwx" int4
int4 - -> "xzwy" int4
int4 - -> "xzwz" int4
int4 - -> "xzww" int4
int4 - -> "xwxx" int4
int4 - -> "xwxy" int4
int4 - -> "xwxz" int4
int4 - -> "xwxw" int4
int4 - -> "xwyx" int4
int4 - -> "xwyy" int4
int4 - -> "xwyz" int4
int4 - -> "xwyw" int4
int4 - -> "xwzx" int4
int4 - -> "xwzy" int4
int4 - -> "xwzz" int4
int4 - -> "xwzw" int4
int4 - -> "xwwx" int4
int4 - -> "xwwy" int4
int4 - -> "xwwz" int4
int4 - -> "xwww" int4
int4 - -> "yxxx" int4
int4 - -> "yxxy" int4
int4 - -> "yxxz" int4
int4 - -> "yxxw" int4
int4 - -> "yxyx" int4
int4 - -> "yxyy" int4
int4 - -> "yxyz" int4
int4 - -> "yxyw" int4
int4 - -> "yxzx" int4
int4 - -> "yxzy" int4
int4 - -> "yxzz" int4
int4 - -> "yxzw" int4
int4 - -> "yxwx" int4
int4 - -> "yxwy" int4
int4 - -> "yxwz" int4
int4 - -> "yxww" int4
int4 - -> "yyxx" int4
int4 - -> "yyxy" int4
int4 - -> "yyxz" int4
int4 - -> "yyxw" int4
int4 - -> "yyyx" int4
int4 - -> "yyyy" int4
int4 - -> "yyyz" int4
int4 - -> "yyyw" int4
int4 - -> "yyzx" int4
int4 - -> "yyzy" int4
int4 - -> "yyzz" int4
int4 - -> "yyzw" int4
int4 - -> "yywx" int4
int4 - -> "yywy" int4
int4 - -> "yywz" int4
int4 - -> "yyww" int4
int4 - -> "yzxx" int4
int4 - -> "yzxy" int4
int4 - -> "yzxz" int4
int4 - -> "yzxw" int4
int4 - -> "yzyx" int4
int4 - -> "yzyy" int4
int4 - -> "yzyz" int4
int4 - -> "yzyw" int4
int4 - -> "yzzx" int4
int4 - -> "yzzy" int4
int4 - -> "yzzz" int4
int4 - -> "yzzw" int4
int4 - -> "yzwx" int4
int4 - -> "yzwy" int4
int4 - -> "yzwz" int4
int4 - -> "yzww" int4
int4 - -> "ywxx" int4
int4 - -> "ywxy" int4
int4 - -> "ywxz" int4
int4 - -> "ywxw" int4
int4 - -> "ywyx" int4
int4 - -> "ywyy" int4
int4 - -> "ywyz" int4
int4 - -> "ywyw" int4
int4 - -> "ywzx" int4
int4 - -> "ywzy" int4
int4 - -> "ywzz" int4
int4 - -> "ywzw" int4
int4 - -> "ywwx" int4
int4 - -> "ywwy" int4
int4 - -> "ywwz" int4
int4 - -> "ywww" int4
int4 - -> "zxxx" int4
int4 - -> "zxxy" int4
int4 - -> "zxxz" int4
int4 - -> "zxxw" int4
int4 - -> "zxyx" int4
int4 - -> "zxyy" int4
int4 - -> "zxyz" int4
int4 - -> "zxyw" int4
int4 - -> "zxzx" int4
int4 - -> "zxzy" int4
int4 - -> "zxzz" int4
int4 - -> "zxzw" int4
int4 - -> "zxwx" int4
int4 - -> "zxwy" int4
int4 - -> "zxwz" int4
int4 - -> "zxww" int4
int4 - -> "zyxx" int4
int4 - -> "zyxy" int4
int4 - -> "zyxz" int4
int4 - -> "zyxw" int4
int4 - -> "zyyx" int4
int4 - -> "zyyy" int4
int4 - -> "zyyz" int4
int4 - -> "zyyw" int4
int4 - -> "zyzx" int4
int4 - -> "zyzy" int4
int4 - -> "zyzz" int4
int4 - -> "zyzw" int4
int4 - -> "zywx" int4
int4 - -> "zywy" int4
int4 - -> "zywz" int4
int4 - -> "zyww" int4
int4 - -> "zzxx" int4
int4 - -> "zzxy" int4
int4 - -> "zzxz" int4
int4 - -> "zzxw" int4
int4 - -> "zzyx" int4
int4 - -> "zzyy" int4
int4 - -> "zzyz" int4
int4 - -> "zzyw" int4
int4 - -> "zzzx" int4
int4 - -> "zzzy" int4
int4 - -> "zzzz" int4
int4 - -> "zzzw" int4
int4 - -> "zzwx" int4
int4 - -> "zzwy" int4
int4 - -> "zzwz" int4
int4 - -> "zzww" int4
int4 - -> "zwxx" int4
int4 - -> "zwxy" int4
int4 - -> "zwxz" int4
int4 - -> "zwxw" int4
int4 - -> "zwyx" int4
int4 - -> "zwyy" int4
int4 - -> "zwyz" int4
int4 - -> "zwyw" int4
int4 - -> "zwzx" int4
int4 - -> "zwzy" int4
int4 - -> "zwzz" int4
int4 - -> "zwzw" int4
int4 - -> "zwwx" int4
int4 - -> "zwwy" int4
int4 - -> "zwwz" int4
int4 - -> "zwww" int4
int4 - -> "wxxx" int4
int4 - -> "wxxy" int4
int4 - -> "wxxz" int4
int4 - -> "wxxw" int4
int4 - -> "wxyx" int4
int4 - -> "wxyy" int4
int4 - -> "wxyz" int4
int4 - -> "wxyw" int4
int4 - -> "wxzx" int4
int4 - -> "wxzy" int4
int4 - -> "wxzz" int4
int4 - -> "wxzw" int4
int4 - -> "wxwx" int4
int4 - -> "wxwy" int4
int4 - -> "wxwz" int4
int4 - -> "wxww" int4
int4 - -> "wyxx" int4
int4 - -> "wyxy" int4
int4 - -> "wyxz" int4
int4 - -> "wyxw" int4
int4 - -> "wyyx" int4
int4 - -> "wyyy" int4
int4 - -> "wyyz" int4
int4 - -> "wyyw" int4
int4 - -> "wyzx" int4
int4 - -> "wyzy" int4
int4 - -> "wyzz" int4
int4 - -> "wyzw" int4
int4 - -> "wywx" int4
int4 - -> "wywy" int4
int4 - -> "wywz" int4
int4 - -> "wyww" int4
int4 - -> "wzxx" int4
int4 - -> "wzxy" int4
int4 - -> "wzxz" int4
int4 - -> "wzxw" int4
int4 - -> "wzyx" int4
int4 - -> "wzyy" int4
int4 - -> "wzyz" int4
int4 - -> "wzyw" int4
int4 - -> "wzzx" int4
int4 - -> "wzzy" int4
int4 - -> "wzzz" int4
int4 - -> "wzzw" int4
int4 - -> "wzwx" int4
int4 - -> "wzwy" int4
int4 - -> "wzwz" int4
int4 - -> "wzww" int4
int4 - -> "wwxx" int4
int4 - -> "wwxy" int4
int4 - -> "wwxz" int4
int4 - -> "wwxw" int4
int4 - -> "wwyx" int4
int4 - -> "wwyy" int4
int4 - -> "wwyz" int4
int4 - -> "wwyw" int4
int4 - -> "wwzx" int4
int4 - -> "wwzy" int4
int4 - -> "wwzz" int4
int4 - -> "wwzw" int4
int4 - -> "wwwx" int4
int4 - -> "wwwy" int4
int4 - -> "wwwz" int4
int4 - -> "wwww" int4
int4 - -> "xxx" int3
int4 - -> "xxy" int3
int4 - -> "xxz" int3
int4 - -> "xxw" int3
int4 - -> "xyx" int3
int4 - -> "xyy" int3
int4 - -> "xyz" int3
int4 - -> "xyw" int3
int4 - -> "xzx" int3
int4 - -> "xzy" int3
int4 - -> "xzz" int3
int4 - -> "xzw" int3
int4 - -> "xwx" int3
int4 - -> "xwy" int3
int4 - -> "xwz" int3
int4 - -> "xww" int3
int4 - -> "yxx" int3
int4 - -> "yxy" int3
int4 - -> "yxz" int3
int4 - -> "yxw" int3
int4 - -> "yyx" int3
int4 - -> "yyy" int3
int4 - -> "yyz" int3
int4 - -> "yyw" int3
int4 - -> "yzx" int3
int4 - -> "yzy" int3
int4 - -> "yzz" int3
int4 - -> "yzw" int3
int4 - -> "ywx" int3
int4 - -> "ywy" int3
int4 - -> "ywz" int3
int4 - -> "yww" int3
int4 - -> "zxx" int3
int4 - -> "zxy" int3
int4 - -> "zxz" int3
int4 - -> "zxw" int3
int4 - -> "zyx" int3
int4 - -> "zyy" int3
int4 - -> "zyz" int3
int4 - -> "zyw" int3
int4 - -> "zzx" int3
int4 - -> "zzy" int3
int4 - -> "zzz" int3
int4 - -> "zzw" int3
int4 - -> "zwx" int3
int4 - -> "zwy" int3
int4 - -> "zwz" int3
int4 - -> "zww" int3
int4 - -> "wxx" int3
int4 - -> "wxy" int3
int4 - -> "wxz" int3
int4 - -> "wxw" int3
int4 - -> "wyx" int3
int4 - -> "wyy" int3
int4 - -> "wyz" int3
int4 - -> "wyw" int3
int4 - -> "wzx" int3
int4 - -> "wzy" int3
int4 - -> "wzz" int3
int4 - -> "wzw" int3
int4 - -> "wwx" int3
int4 - -> "wwy" int3
int4 - -> "wwz" int3
int4 - -> "www" int3
int4 - -> "xx" int2
int4 - -> "xy" int2
int4 - -> "xz" int2
int4 - -> "xw" int2
int4 - -> "yx" int2
int4 - -> "yy" int2
int4 - -> "yz" int2
int4 - -> "yw" int2
int4 - -> "zx" int2
int4 - -> "zy" int2
int4 - -> "zz" int2
int4 - -> "zw" int2
int4 - -> "wx" int2
int4 - -> "wy" int2
int4 - -> "wz" int2
int4 - -> "ww" int2
int4 +- - DebuggerProxy
class int4x2 <<struct>> {
    + int4x2(c0:int4, c1:int4)
    + int4x2(m00:int, m01:int, m10:int, m11:int, m20:int, m21:int, m30:int, m31:int)
    + int4x2(v:int)
    + int4x2(v:bool)
    + int4x2(v:bool4x2)
    + int4x2(v:uint)
    + int4x2(v:uint4x2)
    + int4x2(v:float)
    + int4x2(v:float4x2)
    + int4x2(v:double)
    + int4x2(v:double4x2)
    + Equals(rhs:int4x2) : bool
    + <<override>> Equals(o:object) : bool
    + <<override>> GetHashCode() : int
    + <<override>> ToString() : string
    + ToString(format:string, formatProvider:IFormatProvider) : string
}
class math <<static>> <<partial>> {
    + {static} int4x2(c0:int4, c1:int4) : int4x2
    + {static} int4x2(m00:int, m01:int, m10:int, m11:int, m20:int, m21:int, m30:int, m31:int) : int4x2
    + {static} int4x2(v:int) : int4x2
    + {static} int4x2(v:bool) : int4x2
    + {static} int4x2(v:bool4x2) : int4x2
    + {static} int4x2(v:uint) : int4x2
    + {static} int4x2(v:uint4x2) : int4x2
    + {static} int4x2(v:float) : int4x2
    + {static} int4x2(v:float4x2) : int4x2
    + {static} int4x2(v:double) : int4x2
    + {static} int4x2(v:double4x2) : int4x2
    + {static} transpose(v:int4x2) : int2x4
    + {static} hash(v:int4x2) : uint
    + {static} hashwide(v:int4x2) : uint4
}
class "IEquatable`1"<T> {
}
IFormattable <|- - int4x2
int4x2 - -> "c0" int4
int4x2 - -> "c1" int4
int4x2 - -> "zero" int4x2
class int4x3 <<struct>> {
    + int4x3(c0:int4, c1:int4, c2:int4)
    + int4x3(m00:int, m01:int, m02:int, m10:int, m11:int, m12:int, m20:int, m21:int, m22:int, m30:int, m31:int, m32:int)
    + int4x3(v:int)
    + int4x3(v:bool)
    + int4x3(v:bool4x3)
    + int4x3(v:uint)
    + int4x3(v:uint4x3)
    + int4x3(v:float)
    + int4x3(v:float4x3)
    + int4x3(v:double)
    + int4x3(v:double4x3)
    + Equals(rhs:int4x3) : bool
    + <<override>> Equals(o:object) : bool
    + <<override>> GetHashCode() : int
    + <<override>> ToString() : string
    + ToString(format:string, formatProvider:IFormatProvider) : string
}
class math <<static>> <<partial>> {
    + {static} int4x3(c0:int4, c1:int4, c2:int4) : int4x3
    + {static} int4x3(m00:int, m01:int, m02:int, m10:int, m11:int, m12:int, m20:int, m21:int, m22:int, m30:int, m31:int, m32:int) : int4x3
    + {static} int4x3(v:int) : int4x3
    + {static} int4x3(v:bool) : int4x3
    + {static} int4x3(v:bool4x3) : int4x3
    + {static} int4x3(v:uint) : int4x3
    + {static} int4x3(v:uint4x3) : int4x3
    + {static} int4x3(v:float) : int4x3
    + {static} int4x3(v:float4x3) : int4x3
    + {static} int4x3(v:double) : int4x3
    + {static} int4x3(v:double4x3) : int4x3
    + {static} transpose(v:int4x3) : int3x4
    + {static} hash(v:int4x3) : uint
    + {static} hashwide(v:int4x3) : uint4
}
class "IEquatable`1"<T> {
}
IFormattable <|- - int4x3
int4x3 - -> "c0" int4
int4x3 - -> "c1" int4
int4x3 - -> "c2" int4
int4x3 - -> "zero" int4x3
class int4x4 <<struct>> {
    + int4x4(c0:int4, c1:int4, c2:int4, c3:int4)
    + int4x4(m00:int, m01:int, m02:int, m03:int, m10:int, m11:int, m12:int, m13:int, m20:int, m21:int, m22:int, m23:int, m30:int, m31:int, m32:int, m33:int)
    + int4x4(v:int)
    + int4x4(v:bool)
    + int4x4(v:bool4x4)
    + int4x4(v:uint)
    + int4x4(v:uint4x4)
    + int4x4(v:float)
    + int4x4(v:float4x4)
    + int4x4(v:double)
    + int4x4(v:double4x4)
    + Equals(rhs:int4x4) : bool
    + <<override>> Equals(o:object) : bool
    + <<override>> GetHashCode() : int
    + <<override>> ToString() : string
    + ToString(format:string, formatProvider:IFormatProvider) : string
}
class math <<static>> <<partial>> {
    + {static} int4x4(c0:int4, c1:int4, c2:int4, c3:int4) : int4x4
    + {static} int4x4(m00:int, m01:int, m02:int, m03:int, m10:int, m11:int, m12:int, m13:int, m20:int, m21:int, m22:int, m23:int, m30:int, m31:int, m32:int, m33:int) : int4x4
    + {static} int4x4(v:int) : int4x4
    + {static} int4x4(v:bool) : int4x4
    + {static} int4x4(v:bool4x4) : int4x4
    + {static} int4x4(v:uint) : int4x4
    + {static} int4x4(v:uint4x4) : int4x4
    + {static} int4x4(v:float) : int4x4
    + {static} int4x4(v:float4x4) : int4x4
    + {static} int4x4(v:double) : int4x4
    + {static} int4x4(v:double4x4) : int4x4
    + {static} transpose(v:int4x4) : int4x4
    + {static} determinant(m:int4x4) : int
    + {static} hash(v:int4x4) : uint
    + {static} hashwide(v:int4x4) : uint4
}
class "IEquatable`1"<T> {
}
IFormattable <|- - int4x4
int4x4 - -> "c0" int4
int4x4 - -> "c1" int4
int4x4 - -> "c2" int4
int4x4 - -> "c3" int4
int4x4 o-> "identity" int4x4
int4x4 - -> "zero" int4x4
class math <<static>> <<partial>> {
    + <<const>> E_DBL : double = 2.71828182845904523536
    + <<const>> LOG2E_DBL : double = 1.44269504088896340736
    + <<const>> LOG10E_DBL : double = 0.434294481903251827651
    + <<const>> LN2_DBL : double = 0.693147180559945309417
    + <<const>> LN10_DBL : double = 2.30258509299404568402
    + <<const>> PI_DBL : double = 3.14159265358979323846
    + <<const>> SQRT2_DBL : double = 1.41421356237309504880
    + <<const>> EPSILON_DBL : double = 2.22044604925031308085e-16
    + <<const>> INFINITY_DBL : double
    + <<const>> NAN_DBL : double
    + <<const>> FLT_MIN_NORMAL : float = 1.175494351e-38F
    + <<const>> DBL_MIN_NORMAL : double = 2.2250738585072014e-308
    + <<const>> E : float
    + <<const>> LOG2E : float
    + <<const>> LOG10E : float
    + <<const>> LN2 : float
    + <<const>> LN10 : float
    + <<const>> PI : float
    + <<const>> SQRT2 : float
    + <<const>> EPSILON : float = 1.1920928955078125e-7f
    + <<const>> INFINITY : float
    + <<const>> NAN : float
    + {static} asint(x:uint) : int
    + {static} asint(x:uint2) : int2
    + {static} asint(x:uint3) : int3
    + {static} asint(x:uint4) : int4
    + {static} asint(x:float) : int
    + {static} asint(x:float2) : int2
    + {static} asint(x:float3) : int3
    + {static} asint(x:float4) : int4
    + {static} asuint(x:int) : uint
    + {static} asuint(x:int2) : uint2
    + {static} asuint(x:int3) : uint3
    + {static} asuint(x:int4) : uint4
    + {static} asuint(x:float) : uint
    + {static} asuint(x:float2) : uint2
    + {static} asuint(x:float3) : uint3
    + {static} asuint(x:float4) : uint4
    + {static} aslong(x:ulong) : long
    + {static} aslong(x:double) : long
    + {static} asulong(x:long) : ulong
    + {static} asulong(x:double) : ulong
    + {static} asfloat(x:int) : float
    + {static} asfloat(x:int2) : float2
    + {static} asfloat(x:int3) : float3
    + {static} asfloat(x:int4) : float4
    + {static} asfloat(x:uint) : float
    + {static} asfloat(x:uint2) : float2
    + {static} asfloat(x:uint3) : float3
    + {static} asfloat(x:uint4) : float4
    + {static} bitmask(value:bool4) : int
    + {static} asdouble(x:long) : double
    + {static} asdouble(x:ulong) : double
    + {static} isfinite(x:float) : bool
    + {static} isfinite(x:float2) : bool2
    + {static} isfinite(x:float3) : bool3
    + {static} isfinite(x:float4) : bool4
    + {static} isfinite(x:double) : bool
    + {static} isfinite(x:double2) : bool2
    + {static} isfinite(x:double3) : bool3
    + {static} isfinite(x:double4) : bool4
    + {static} isinf(x:float) : bool
    + {static} isinf(x:float2) : bool2
    + {static} isinf(x:float3) : bool3
    + {static} isinf(x:float4) : bool4
    + {static} isinf(x:double) : bool
    + {static} isinf(x:double2) : bool2
    + {static} isinf(x:double3) : bool3
    + {static} isinf(x:double4) : bool4
    + {static} isnan(x:float) : bool
    + {static} isnan(x:float2) : bool2
    + {static} isnan(x:float3) : bool3
    + {static} isnan(x:float4) : bool4
    + {static} isnan(x:double) : bool
    + {static} isnan(x:double2) : bool2
    + {static} isnan(x:double3) : bool3
    + {static} isnan(x:double4) : bool4
    + {static} ispow2(x:int) : bool
    + {static} ispow2(x:int2) : bool2
    + {static} ispow2(x:int3) : bool3
    + {static} ispow2(x:int4) : bool4
    + {static} ispow2(x:uint) : bool
    + {static} ispow2(x:uint2) : bool2
    + {static} ispow2(x:uint3) : bool3
    + {static} ispow2(x:uint4) : bool4
    + {static} min(x:int, y:int) : int
    + {static} min(x:int2, y:int2) : int2
    + {static} min(x:int3, y:int3) : int3
    + {static} min(x:int4, y:int4) : int4
    + {static} min(x:uint, y:uint) : uint
    + {static} min(x:uint2, y:uint2) : uint2
    + {static} min(x:uint3, y:uint3) : uint3
    + {static} min(x:uint4, y:uint4) : uint4
    + {static} min(x:long, y:long) : long
    + {static} min(x:ulong, y:ulong) : ulong
    + {static} min(x:float, y:float) : float
    + {static} min(x:float2, y:float2) : float2
    + {static} min(x:float3, y:float3) : float3
    + {static} min(x:float4, y:float4) : float4
    + {static} min(x:double, y:double) : double
    + {static} min(x:double2, y:double2) : double2
    + {static} min(x:double3, y:double3) : double3
    + {static} min(x:double4, y:double4) : double4
    + {static} max(x:int, y:int) : int
    + {static} max(x:int2, y:int2) : int2
    + {static} max(x:int3, y:int3) : int3
    + {static} max(x:int4, y:int4) : int4
    + {static} max(x:uint, y:uint) : uint
    + {static} max(x:uint2, y:uint2) : uint2
    + {static} max(x:uint3, y:uint3) : uint3
    + {static} max(x:uint4, y:uint4) : uint4
    + {static} max(x:long, y:long) : long
    + {static} max(x:ulong, y:ulong) : ulong
    + {static} max(x:float, y:float) : float
    + {static} max(x:float2, y:float2) : float2
    + {static} max(x:float3, y:float3) : float3
    + {static} max(x:float4, y:float4) : float4
    + {static} max(x:double, y:double) : double
    + {static} max(x:double2, y:double2) : double2
    + {static} max(x:double3, y:double3) : double3
    + {static} max(x:double4, y:double4) : double4
    + {static} lerp(x:float, y:float, s:float) : float
    + {static} lerp(x:float2, y:float2, s:float) : float2
    + {static} lerp(x:float3, y:float3, s:float) : float3
    + {static} lerp(x:float4, y:float4, s:float) : float4
    + {static} lerp(x:float2, y:float2, s:float2) : float2
    + {static} lerp(x:float3, y:float3, s:float3) : float3
    + {static} lerp(x:float4, y:float4, s:float4) : float4
    + {static} lerp(x:double, y:double, s:double) : double
    + {static} lerp(x:double2, y:double2, s:double) : double2
    + {static} lerp(x:double3, y:double3, s:double) : double3
    + {static} lerp(x:double4, y:double4, s:double) : double4
    + {static} lerp(x:double2, y:double2, s:double2) : double2
    + {static} lerp(x:double3, y:double3, s:double3) : double3
    + {static} lerp(x:double4, y:double4, s:double4) : double4
    + {static} unlerp(a:float, b:float, x:float) : float
    + {static} unlerp(a:float2, b:float2, x:float2) : float2
    + {static} unlerp(a:float3, b:float3, x:float3) : float3
    + {static} unlerp(a:float4, b:float4, x:float4) : float4
    + {static} unlerp(a:double, b:double, x:double) : double
    + {static} unlerp(a:double2, b:double2, x:double2) : double2
    + {static} unlerp(a:double3, b:double3, x:double3) : double3
    + {static} unlerp(a:double4, b:double4, x:double4) : double4
    + {static} remap(a:float, b:float, c:float, d:float, x:float) : float
    + {static} remap(a:float2, b:float2, c:float2, d:float2, x:float2) : float2
    + {static} remap(a:float3, b:float3, c:float3, d:float3, x:float3) : float3
    + {static} remap(a:float4, b:float4, c:float4, d:float4, x:float4) : float4
    + {static} remap(a:double, b:double, c:double, d:double, x:double) : double
    + {static} remap(a:double2, b:double2, c:double2, d:double2, x:double2) : double2
    + {static} remap(a:double3, b:double3, c:double3, d:double3, x:double3) : double3
    + {static} remap(a:double4, b:double4, c:double4, d:double4, x:double4) : double4
    + {static} mad(a:int, b:int, c:int) : int
    + {static} mad(a:int2, b:int2, c:int2) : int2
    + {static} mad(a:int3, b:int3, c:int3) : int3
    + {static} mad(a:int4, b:int4, c:int4) : int4
    + {static} mad(a:uint, b:uint, c:uint) : uint
    + {static} mad(a:uint2, b:uint2, c:uint2) : uint2
    + {static} mad(a:uint3, b:uint3, c:uint3) : uint3
    + {static} mad(a:uint4, b:uint4, c:uint4) : uint4
    + {static} mad(a:long, b:long, c:long) : long
    + {static} mad(a:ulong, b:ulong, c:ulong) : ulong
    + {static} mad(a:float, b:float, c:float) : float
    + {static} mad(a:float2, b:float2, c:float2) : float2
    + {static} mad(a:float3, b:float3, c:float3) : float3
    + {static} mad(a:float4, b:float4, c:float4) : float4
    + {static} mad(a:double, b:double, c:double) : double
    + {static} mad(a:double2, b:double2, c:double2) : double2
    + {static} mad(a:double3, b:double3, c:double3) : double3
    + {static} mad(a:double4, b:double4, c:double4) : double4
    + {static} clamp(x:int, a:int, b:int) : int
    + {static} clamp(x:int2, a:int2, b:int2) : int2
    + {static} clamp(x:int3, a:int3, b:int3) : int3
    + {static} clamp(x:int4, a:int4, b:int4) : int4
    + {static} clamp(x:uint, a:uint, b:uint) : uint
    + {static} clamp(x:uint2, a:uint2, b:uint2) : uint2
    + {static} clamp(x:uint3, a:uint3, b:uint3) : uint3
    + {static} clamp(x:uint4, a:uint4, b:uint4) : uint4
    + {static} clamp(x:long, a:long, b:long) : long
    + {static} clamp(x:ulong, a:ulong, b:ulong) : ulong
    + {static} clamp(x:float, a:float, b:float) : float
    + {static} clamp(x:float2, a:float2, b:float2) : float2
    + {static} clamp(x:float3, a:float3, b:float3) : float3
    + {static} clamp(x:float4, a:float4, b:float4) : float4
    + {static} clamp(x:double, a:double, b:double) : double
    + {static} clamp(x:double2, a:double2, b:double2) : double2
    + {static} clamp(x:double3, a:double3, b:double3) : double3
    + {static} clamp(x:double4, a:double4, b:double4) : double4
    + {static} saturate(x:float) : float
    + {static} saturate(x:float2) : float2
    + {static} saturate(x:float3) : float3
    + {static} saturate(x:float4) : float4
    + {static} saturate(x:double) : double
    + {static} saturate(x:double2) : double2
    + {static} saturate(x:double3) : double3
    + {static} saturate(x:double4) : double4
    + {static} abs(x:int) : int
    + {static} abs(x:int2) : int2
    + {static} abs(x:int3) : int3
    + {static} abs(x:int4) : int4
    + {static} abs(x:long) : long
    + {static} abs(x:float) : float
    + {static} abs(x:float2) : float2
    + {static} abs(x:float3) : float3
    + {static} abs(x:float4) : float4
    + {static} abs(x:double) : double
    + {static} abs(x:double2) : double2
    + {static} abs(x:double3) : double3
    + {static} abs(x:double4) : double4
    + {static} dot(x:int, y:int) : int
    + {static} dot(x:int2, y:int2) : int
    + {static} dot(x:int3, y:int3) : int
    + {static} dot(x:int4, y:int4) : int
    + {static} dot(x:uint, y:uint) : uint
    + {static} dot(x:uint2, y:uint2) : uint
    + {static} dot(x:uint3, y:uint3) : uint
    + {static} dot(x:uint4, y:uint4) : uint
    + {static} dot(x:float, y:float) : float
    + {static} dot(x:float2, y:float2) : float
    + {static} dot(x:float3, y:float3) : float
    + {static} dot(x:float4, y:float4) : float
    + {static} dot(x:double, y:double) : double
    + {static} dot(x:double2, y:double2) : double
    + {static} dot(x:double3, y:double3) : double
    + {static} dot(x:double4, y:double4) : double
    + {static} tan(x:float) : float
    + {static} tan(x:float2) : float2
    + {static} tan(x:float3) : float3
    + {static} tan(x:float4) : float4
    + {static} tan(x:double) : double
    + {static} tan(x:double2) : double2
    + {static} tan(x:double3) : double3
    + {static} tan(x:double4) : double4
    + {static} tanh(x:float) : float
    + {static} tanh(x:float2) : float2
    + {static} tanh(x:float3) : float3
    + {static} tanh(x:float4) : float4
    + {static} tanh(x:double) : double
    + {static} tanh(x:double2) : double2
    + {static} tanh(x:double3) : double3
    + {static} tanh(x:double4) : double4
    + {static} atan(x:float) : float
    + {static} atan(x:float2) : float2
    + {static} atan(x:float3) : float3
    + {static} atan(x:float4) : float4
    + {static} atan(x:double) : double
    + {static} atan(x:double2) : double2
    + {static} atan(x:double3) : double3
    + {static} atan(x:double4) : double4
    + {static} atan2(y:float, x:float) : float
    + {static} atan2(y:float2, x:float2) : float2
    + {static} atan2(y:float3, x:float3) : float3
    + {static} atan2(y:float4, x:float4) : float4
    + {static} atan2(y:double, x:double) : double
    + {static} atan2(y:double2, x:double2) : double2
    + {static} atan2(y:double3, x:double3) : double3
    + {static} atan2(y:double4, x:double4) : double4
    + {static} cos(x:float) : float
    + {static} cos(x:float2) : float2
    + {static} cos(x:float3) : float3
    + {static} cos(x:float4) : float4
    + {static} cos(x:double) : double
    + {static} cos(x:double2) : double2
    + {static} cos(x:double3) : double3
    + {static} cos(x:double4) : double4
    + {static} cosh(x:float) : float
    + {static} cosh(x:float2) : float2
    + {static} cosh(x:float3) : float3
    + {static} cosh(x:float4) : float4
    + {static} cosh(x:double) : double
    + {static} cosh(x:double2) : double2
    + {static} cosh(x:double3) : double3
    + {static} cosh(x:double4) : double4
    + {static} acos(x:float) : float
    + {static} acos(x:float2) : float2
    + {static} acos(x:float3) : float3
    + {static} acos(x:float4) : float4
    + {static} acos(x:double) : double
    + {static} acos(x:double2) : double2
    + {static} acos(x:double3) : double3
    + {static} acos(x:double4) : double4
    + {static} sin(x:float) : float
    + {static} sin(x:float2) : float2
    + {static} sin(x:float3) : float3
    + {static} sin(x:float4) : float4
    + {static} sin(x:double) : double
    + {static} sin(x:double2) : double2
    + {static} sin(x:double3) : double3
    + {static} sin(x:double4) : double4
    + {static} sinh(x:float) : float
    + {static} sinh(x:float2) : float2
    + {static} sinh(x:float3) : float3
    + {static} sinh(x:float4) : float4
    + {static} sinh(x:double) : double
    + {static} sinh(x:double2) : double2
    + {static} sinh(x:double3) : double3
    + {static} sinh(x:double4) : double4
    + {static} asin(x:float) : float
    + {static} asin(x:float2) : float2
    + {static} asin(x:float3) : float3
    + {static} asin(x:float4) : float4
    + {static} asin(x:double) : double
    + {static} asin(x:double2) : double2
    + {static} asin(x:double3) : double3
    + {static} asin(x:double4) : double4
    + {static} floor(x:float) : float
    + {static} floor(x:float2) : float2
    + {static} floor(x:float3) : float3
    + {static} floor(x:float4) : float4
    + {static} floor(x:double) : double
    + {static} floor(x:double2) : double2
    + {static} floor(x:double3) : double3
    + {static} floor(x:double4) : double4
    + {static} ceil(x:float) : float
    + {static} ceil(x:float2) : float2
    + {static} ceil(x:float3) : float3
    + {static} ceil(x:float4) : float4
    + {static} ceil(x:double) : double
    + {static} ceil(x:double2) : double2
    + {static} ceil(x:double3) : double3
    + {static} ceil(x:double4) : double4
    + {static} round(x:float) : float
    + {static} round(x:float2) : float2
    + {static} round(x:float3) : float3
    + {static} round(x:float4) : float4
    + {static} round(x:double) : double
    + {static} round(x:double2) : double2
    + {static} round(x:double3) : double3
    + {static} round(x:double4) : double4
    + {static} trunc(x:float) : float
    + {static} trunc(x:float2) : float2
    + {static} trunc(x:float3) : float3
    + {static} trunc(x:float4) : float4
    + {static} trunc(x:double) : double
    + {static} trunc(x:double2) : double2
    + {static} trunc(x:double3) : double3
    + {static} trunc(x:double4) : double4
    + {static} frac(x:float) : float
    + {static} frac(x:float2) : float2
    + {static} frac(x:float3) : float3
    + {static} frac(x:float4) : float4
    + {static} frac(x:double) : double
    + {static} frac(x:double2) : double2
    + {static} frac(x:double3) : double3
    + {static} frac(x:double4) : double4
    + {static} rcp(x:float) : float
    + {static} rcp(x:float2) : float2
    + {static} rcp(x:float3) : float3
    + {static} rcp(x:float4) : float4
    + {static} rcp(x:double) : double
    + {static} rcp(x:double2) : double2
    + {static} rcp(x:double3) : double3
    + {static} rcp(x:double4) : double4
    + {static} sign(x:float) : float
    + {static} sign(x:float2) : float2
    + {static} sign(x:float3) : float3
    + {static} sign(x:float4) : float4
    + {static} sign(x:double) : double
    + {static} sign(x:double2) : double2
    + {static} sign(x:double3) : double3
    + {static} sign(x:double4) : double4
    + {static} pow(x:float, y:float) : float
    + {static} pow(x:float2, y:float2) : float2
    + {static} pow(x:float3, y:float3) : float3
    + {static} pow(x:float4, y:float4) : float4
    + {static} pow(x:double, y:double) : double
    + {static} pow(x:double2, y:double2) : double2
    + {static} pow(x:double3, y:double3) : double3
    + {static} pow(x:double4, y:double4) : double4
    + {static} exp(x:float) : float
    + {static} exp(x:float2) : float2
    + {static} exp(x:float3) : float3
    + {static} exp(x:float4) : float4
    + {static} exp(x:double) : double
    + {static} exp(x:double2) : double2
    + {static} exp(x:double3) : double3
    + {static} exp(x:double4) : double4
    + {static} exp2(x:float) : float
    + {static} exp2(x:float2) : float2
    + {static} exp2(x:float3) : float3
    + {static} exp2(x:float4) : float4
    + {static} exp2(x:double) : double
    + {static} exp2(x:double2) : double2
    + {static} exp2(x:double3) : double3
    + {static} exp2(x:double4) : double4
    + {static} exp10(x:float) : float
    + {static} exp10(x:float2) : float2
    + {static} exp10(x:float3) : float3
    + {static} exp10(x:float4) : float4
    + {static} exp10(x:double) : double
    + {static} exp10(x:double2) : double2
    + {static} exp10(x:double3) : double3
    + {static} exp10(x:double4) : double4
    + {static} log(x:float) : float
    + {static} log(x:float2) : float2
    + {static} log(x:float3) : float3
    + {static} log(x:float4) : float4
    + {static} log(x:double) : double
    + {static} log(x:double2) : double2
    + {static} log(x:double3) : double3
    + {static} log(x:double4) : double4
    + {static} log2(x:float) : float
    + {static} log2(x:float2) : float2
    + {static} log2(x:float3) : float3
    + {static} log2(x:float4) : float4
    + {static} log2(x:double) : double
    + {static} log2(x:double2) : double2
    + {static} log2(x:double3) : double3
    + {static} log2(x:double4) : double4
    + {static} log10(x:float) : float
    + {static} log10(x:float2) : float2
    + {static} log10(x:float3) : float3
    + {static} log10(x:float4) : float4
    + {static} log10(x:double) : double
    + {static} log10(x:double2) : double2
    + {static} log10(x:double3) : double3
    + {static} log10(x:double4) : double4
    + {static} fmod(x:float, y:float) : float
    + {static} fmod(x:float2, y:float2) : float2
    + {static} fmod(x:float3, y:float3) : float3
    + {static} fmod(x:float4, y:float4) : float4
    + {static} fmod(x:double, y:double) : double
    + {static} fmod(x:double2, y:double2) : double2
    + {static} fmod(x:double3, y:double3) : double3
    + {static} fmod(x:double4, y:double4) : double4
    + {static} modf(x:float, i:float) : float
    + {static} modf(x:float2, i:float2) : float2
    + {static} modf(x:float3, i:float3) : float3
    + {static} modf(x:float4, i:float4) : float4
    + {static} modf(x:double, i:double) : double
    + {static} modf(x:double2, i:double2) : double2
    + {static} modf(x:double3, i:double3) : double3
    + {static} modf(x:double4, i:double4) : double4
    + {static} sqrt(x:float) : float
    + {static} sqrt(x:float2) : float2
    + {static} sqrt(x:float3) : float3
    + {static} sqrt(x:float4) : float4
    + {static} sqrt(x:double) : double
    + {static} sqrt(x:double2) : double2
    + {static} sqrt(x:double3) : double3
    + {static} sqrt(x:double4) : double4
    + {static} rsqrt(x:float) : float
    + {static} rsqrt(x:float2) : float2
    + {static} rsqrt(x:float3) : float3
    + {static} rsqrt(x:float4) : float4
    + {static} rsqrt(x:double) : double
    + {static} rsqrt(x:double2) : double2
    + {static} rsqrt(x:double3) : double3
    + {static} rsqrt(x:double4) : double4
    + {static} normalize(x:float2) : float2
    + {static} normalize(x:float3) : float3
    + {static} normalize(x:float4) : float4
    + {static} normalize(x:double2) : double2
    + {static} normalize(x:double3) : double3
    + {static} normalize(x:double4) : double4
    {static} + normalizesafe(x:float2, defaultvalue:float2) : float2
    {static} + normalizesafe(x:float3, defaultvalue:float3) : float3
    {static} + normalizesafe(x:float4, defaultvalue:float4) : float4
    {static} + normalizesafe(x:double2, defaultvalue:double2) : double2
    {static} + normalizesafe(x:double3, defaultvalue:double3) : double3
    {static} + normalizesafe(x:double4, defaultvalue:double4) : double4
    + {static} length(x:float) : float
    + {static} length(x:float2) : float
    + {static} length(x:float3) : float
    + {static} length(x:float4) : float
    + {static} length(x:double) : double
    + {static} length(x:double2) : double
    + {static} length(x:double3) : double
    + {static} length(x:double4) : double
    + {static} lengthsq(x:float) : float
    + {static} lengthsq(x:float2) : float
    + {static} lengthsq(x:float3) : float
    + {static} lengthsq(x:float4) : float
    + {static} lengthsq(x:double) : double
    + {static} lengthsq(x:double2) : double
    + {static} lengthsq(x:double3) : double
    + {static} lengthsq(x:double4) : double
    + {static} distance(x:float, y:float) : float
    + {static} distance(x:float2, y:float2) : float
    + {static} distance(x:float3, y:float3) : float
    + {static} distance(x:float4, y:float4) : float
    + {static} distance(x:double, y:double) : double
    + {static} distance(x:double2, y:double2) : double
    + {static} distance(x:double3, y:double3) : double
    + {static} distance(x:double4, y:double4) : double
    + {static} distancesq(x:float, y:float) : float
    + {static} distancesq(x:float2, y:float2) : float
    + {static} distancesq(x:float3, y:float3) : float
    + {static} distancesq(x:float4, y:float4) : float
    + {static} distancesq(x:double, y:double) : double
    + {static} distancesq(x:double2, y:double2) : double
    + {static} distancesq(x:double3, y:double3) : double
    + {static} distancesq(x:double4, y:double4) : double
    + {static} cross(x:float3, y:float3) : float3
    + {static} cross(x:double3, y:double3) : double3
    + {static} smoothstep(a:float, b:float, x:float) : float
    + {static} smoothstep(a:float2, b:float2, x:float2) : float2
    + {static} smoothstep(a:float3, b:float3, x:float3) : float3
    + {static} smoothstep(a:float4, b:float4, x:float4) : float4
    + {static} smoothstep(a:double, b:double, x:double) : double
    + {static} smoothstep(a:double2, b:double2, x:double2) : double2
    + {static} smoothstep(a:double3, b:double3, x:double3) : double3
    + {static} smoothstep(a:double4, b:double4, x:double4) : double4
    + {static} any(x:bool2) : bool
    + {static} any(x:bool3) : bool
    + {static} any(x:bool4) : bool
    + {static} any(x:int2) : bool
    + {static} any(x:int3) : bool
    + {static} any(x:int4) : bool
    + {static} any(x:uint2) : bool
    + {static} any(x:uint3) : bool
    + {static} any(x:uint4) : bool
    + {static} any(x:float2) : bool
    + {static} any(x:float3) : bool
    + {static} any(x:float4) : bool
    + {static} any(x:double2) : bool
    + {static} any(x:double3) : bool
    + {static} any(x:double4) : bool
    + {static} all(x:bool2) : bool
    + {static} all(x:bool3) : bool
    + {static} all(x:bool4) : bool
    + {static} all(x:int2) : bool
    + {static} all(x:int3) : bool
    + {static} all(x:int4) : bool
    + {static} all(x:uint2) : bool
    + {static} all(x:uint3) : bool
    + {static} all(x:uint4) : bool
    + {static} all(x:float2) : bool
    + {static} all(x:float3) : bool
    + {static} all(x:float4) : bool
    + {static} all(x:double2) : bool
    + {static} all(x:double3) : bool
    + {static} all(x:double4) : bool
    + {static} select(a:int, b:int, c:bool) : int
    + {static} select(a:int2, b:int2, c:bool) : int2
    + {static} select(a:int3, b:int3, c:bool) : int3
    + {static} select(a:int4, b:int4, c:bool) : int4
    + {static} select(a:int2, b:int2, c:bool2) : int2
    + {static} select(a:int3, b:int3, c:bool3) : int3
    + {static} select(a:int4, b:int4, c:bool4) : int4
    + {static} select(a:uint, b:uint, c:bool) : uint
    + {static} select(a:uint2, b:uint2, c:bool) : uint2
    + {static} select(a:uint3, b:uint3, c:bool) : uint3
    + {static} select(a:uint4, b:uint4, c:bool) : uint4
    + {static} select(a:uint2, b:uint2, c:bool2) : uint2
    + {static} select(a:uint3, b:uint3, c:bool3) : uint3
    + {static} select(a:uint4, b:uint4, c:bool4) : uint4
    + {static} select(a:long, b:long, c:bool) : long
    + {static} select(a:ulong, b:ulong, c:bool) : ulong
    + {static} select(a:float, b:float, c:bool) : float
    + {static} select(a:float2, b:float2, c:bool) : float2
    + {static} select(a:float3, b:float3, c:bool) : float3
    + {static} select(a:float4, b:float4, c:bool) : float4
    + {static} select(a:float2, b:float2, c:bool2) : float2
    + {static} select(a:float3, b:float3, c:bool3) : float3
    + {static} select(a:float4, b:float4, c:bool4) : float4
    + {static} select(a:double, b:double, c:bool) : double
    + {static} select(a:double2, b:double2, c:bool) : double2
    + {static} select(a:double3, b:double3, c:bool) : double3
    + {static} select(a:double4, b:double4, c:bool) : double4
    + {static} select(a:double2, b:double2, c:bool2) : double2
    + {static} select(a:double3, b:double3, c:bool3) : double3
    + {static} select(a:double4, b:double4, c:bool4) : double4
    + {static} step(y:float, x:float) : float
    + {static} step(y:float2, x:float2) : float2
    + {static} step(y:float3, x:float3) : float3
    + {static} step(y:float4, x:float4) : float4
    + {static} step(y:double, x:double) : double
    + {static} step(y:double2, x:double2) : double2
    + {static} step(y:double3, x:double3) : double3
    + {static} step(y:double4, x:double4) : double4
    + {static} reflect(i:float2, n:float2) : float2
    + {static} reflect(i:float3, n:float3) : float3
    + {static} reflect(i:float4, n:float4) : float4
    + {static} reflect(i:double2, n:double2) : double2
    + {static} reflect(i:double3, n:double3) : double3
    + {static} reflect(i:double4, n:double4) : double4
    + {static} refract(i:float2, n:float2, eta:float) : float2
    + {static} refract(i:float3, n:float3, eta:float) : float3
    + {static} refract(i:float4, n:float4, eta:float) : float4
    + {static} refract(i:double2, n:double2, eta:double) : double2
    + {static} refract(i:double3, n:double3, eta:double) : double3
    + {static} refract(i:double4, n:double4, eta:double) : double4
    + {static} project(a:float2, b:float2) : float2
    + {static} project(a:float3, b:float3) : float3
    + {static} project(a:float4, b:float4) : float4
    + {static} projectsafe(a:float2, b:float2, defaultValue:float2) : float2
    + {static} projectsafe(a:float3, b:float3, defaultValue:float3) : float3
    + {static} projectsafe(a:float4, b:float4, defaultValue:float4) : float4
    + {static} project(a:double2, b:double2) : double2
    + {static} project(a:double3, b:double3) : double3
    + {static} project(a:double4, b:double4) : double4
    + {static} projectsafe(a:double2, b:double2, defaultValue:double2) : double2
    + {static} projectsafe(a:double3, b:double3, defaultValue:double3) : double3
    + {static} projectsafe(a:double4, b:double4, defaultValue:double4) : double4
    + {static} faceforward(n:float2, i:float2, ng:float2) : float2
    + {static} faceforward(n:float3, i:float3, ng:float3) : float3
    + {static} faceforward(n:float4, i:float4, ng:float4) : float4
    + {static} faceforward(n:double2, i:double2, ng:double2) : double2
    + {static} faceforward(n:double3, i:double3, ng:double3) : double3
    + {static} faceforward(n:double4, i:double4, ng:double4) : double4
    + {static} sincos(x:float, s:float, c:float) : void
    + {static} sincos(x:float2, s:float2, c:float2) : void
    + {static} sincos(x:float3, s:float3, c:float3) : void
    + {static} sincos(x:float4, s:float4, c:float4) : void
    + {static} sincos(x:double, s:double, c:double) : void
    + {static} sincos(x:double2, s:double2, c:double2) : void
    + {static} sincos(x:double3, s:double3, c:double3) : void
    + {static} sincos(x:double4, s:double4, c:double4) : void
    + {static} countbits(x:int) : int
    + {static} countbits(x:int2) : int2
    + {static} countbits(x:int3) : int3
    + {static} countbits(x:int4) : int4
    + {static} countbits(x:uint) : int
    + {static} countbits(x:uint2) : int2
    + {static} countbits(x:uint3) : int3
    + {static} countbits(x:uint4) : int4
    + {static} countbits(x:ulong) : int
    + {static} countbits(x:long) : int
    + {static} lzcnt(x:int) : int
    + {static} lzcnt(x:int2) : int2
    + {static} lzcnt(x:int3) : int3
    + {static} lzcnt(x:int4) : int4
    + {static} lzcnt(x:uint) : int
    + {static} lzcnt(x:uint2) : int2
    + {static} lzcnt(x:uint3) : int3
    + {static} lzcnt(x:uint4) : int4
    + {static} lzcnt(x:long) : int
    + {static} lzcnt(x:ulong) : int
    + {static} tzcnt(x:int) : int
    + {static} tzcnt(x:int2) : int2
    + {static} tzcnt(x:int3) : int3
    + {static} tzcnt(x:int4) : int4
    + {static} tzcnt(x:uint) : int
    + {static} tzcnt(x:uint2) : int2
    + {static} tzcnt(x:uint3) : int3
    + {static} tzcnt(x:uint4) : int4
    + {static} tzcnt(x:long) : int
    + {static} tzcnt(x:ulong) : int
    + {static} reversebits(x:int) : int
    + {static} reversebits(x:int2) : int2
    + {static} reversebits(x:int3) : int3
    + {static} reversebits(x:int4) : int4
    + {static} reversebits(x:uint) : uint
    + {static} reversebits(x:uint2) : uint2
    + {static} reversebits(x:uint3) : uint3
    + {static} reversebits(x:uint4) : uint4
    + {static} reversebits(x:long) : long
    + {static} reversebits(x:ulong) : ulong
    + {static} rol(x:int, n:int) : int
    + {static} rol(x:int2, n:int) : int2
    + {static} rol(x:int3, n:int) : int3
    + {static} rol(x:int4, n:int) : int4
    + {static} rol(x:uint, n:int) : uint
    + {static} rol(x:uint2, n:int) : uint2
    + {static} rol(x:uint3, n:int) : uint3
    + {static} rol(x:uint4, n:int) : uint4
    + {static} rol(x:long, n:int) : long
    + {static} rol(x:ulong, n:int) : ulong
    + {static} ror(x:int, n:int) : int
    + {static} ror(x:int2, n:int) : int2
    + {static} ror(x:int3, n:int) : int3
    + {static} ror(x:int4, n:int) : int4
    + {static} ror(x:uint, n:int) : uint
    + {static} ror(x:uint2, n:int) : uint2
    + {static} ror(x:uint3, n:int) : uint3
    + {static} ror(x:uint4, n:int) : uint4
    + {static} ror(x:long, n:int) : long
    + {static} ror(x:ulong, n:int) : ulong
    + {static} ceilpow2(x:int) : int
    + {static} ceilpow2(x:int2) : int2
    + {static} ceilpow2(x:int3) : int3
    + {static} ceilpow2(x:int4) : int4
    + {static} ceilpow2(x:uint) : uint
    + {static} ceilpow2(x:uint2) : uint2
    + {static} ceilpow2(x:uint3) : uint3
    + {static} ceilpow2(x:uint4) : uint4
    + {static} ceilpow2(x:long) : long
    + {static} ceilpow2(x:ulong) : ulong
    + {static} ceillog2(x:int) : int
    + {static} ceillog2(x:int2) : int2
    + {static} ceillog2(x:int3) : int3
    + {static} ceillog2(x:int4) : int4
    + {static} ceillog2(x:uint) : int
    + {static} ceillog2(x:uint2) : int2
    + {static} ceillog2(x:uint3) : int3
    + {static} ceillog2(x:uint4) : int4
    + {static} floorlog2(x:int) : int
    + {static} floorlog2(x:int2) : int2
    + {static} floorlog2(x:int3) : int3
    + {static} floorlog2(x:int4) : int4
    + {static} floorlog2(x:uint) : int
    + {static} floorlog2(x:uint2) : int2
    + {static} floorlog2(x:uint3) : int3
    + {static} floorlog2(x:uint4) : int4
    + {static} radians(x:float) : float
    + {static} radians(x:float2) : float2
    + {static} radians(x:float3) : float3
    + {static} radians(x:float4) : float4
    + {static} radians(x:double) : double
    + {static} radians(x:double2) : double2
    + {static} radians(x:double3) : double3
    + {static} radians(x:double4) : double4
    + {static} degrees(x:float) : float
    + {static} degrees(x:float2) : float2
    + {static} degrees(x:float3) : float3
    + {static} degrees(x:float4) : float4
    + {static} degrees(x:double) : double
    + {static} degrees(x:double2) : double2
    + {static} degrees(x:double3) : double3
    + {static} degrees(x:double4) : double4
    + {static} cmin(x:int2) : int
    + {static} cmin(x:int3) : int
    + {static} cmin(x:int4) : int
    + {static} cmin(x:uint2) : uint
    + {static} cmin(x:uint3) : uint
    + {static} cmin(x:uint4) : uint
    + {static} cmin(x:float2) : float
    + {static} cmin(x:float3) : float
    + {static} cmin(x:float4) : float
    + {static} cmin(x:double2) : double
    + {static} cmin(x:double3) : double
    + {static} cmin(x:double4) : double
    + {static} cmax(x:int2) : int
    + {static} cmax(x:int3) : int
    + {static} cmax(x:int4) : int
    + {static} cmax(x:uint2) : uint
    + {static} cmax(x:uint3) : uint
    + {static} cmax(x:uint4) : uint
    + {static} cmax(x:float2) : float
    + {static} cmax(x:float3) : float
    + {static} cmax(x:float4) : float
    + {static} cmax(x:double2) : double
    + {static} cmax(x:double3) : double
    + {static} cmax(x:double4) : double
    + {static} csum(x:int2) : int
    + {static} csum(x:int3) : int
    + {static} csum(x:int4) : int
    + {static} csum(x:uint2) : uint
    + {static} csum(x:uint3) : uint
    + {static} csum(x:uint4) : uint
    + {static} csum(x:float2) : float
    + {static} csum(x:float3) : float
    + {static} csum(x:float4) : float
    + {static} csum(x:double2) : double
    + {static} csum(x:double3) : double
    + {static} csum(x:double4) : double
    + {static} <<unsafe>> compress(output:int*, index:int, val:int4, mask:bool4) : int
    + {static} <<unsafe>> compress(output:uint*, index:int, val:uint4, mask:bool4) : int
    + {static} <<unsafe>> compress(output:float*, index:int, val:float4, mask:bool4) : int
    + {static} f16tof32(x:uint) : float
    + {static} f16tof32(x:uint2) : float2
    + {static} f16tof32(x:uint3) : float3
    + {static} f16tof32(x:uint4) : float4
    + {static} f32tof16(x:float) : uint
    + {static} f32tof16(x:float2) : uint2
    + {static} f32tof16(x:float3) : uint3
    + {static} f32tof16(x:float4) : uint4
    + {static} <<unsafe>> hash(pBuffer:void*, numBytes:int, seed:uint) : uint
    + {static} up() : float3
    + {static} down() : float3
    + {static} forward() : float3
    + {static} back() : float3
    + {static} left() : float3
    + {static} right() : float3
}
enum RotationOrder {
    XYZ,
    XZY,
    YXZ,
    YZX,
    ZXY,
    ZYX,
    Default= ZXY,
}
enum ShuffleComponent {
    LeftX,
    LeftY,
    LeftZ,
    LeftW,
    RightX,
    RightY,
    RightZ,
    RightW,
}
class IntFloatUnion <<struct>> {
    + intValue : int
    + floatValue : float
}
class LongDoubleUnion <<struct>> {
    + longValue : long
    + doubleValue : double
}
math +- - RotationOrder
math +- - ShuffleComponent
math +- - IntFloatUnion
math +- - LongDoubleUnion
class float2 <<struct>> {
}
class float3 <<struct>> {
}
class float4 <<struct>> {
}
class quaternion <<struct>> {
}
class float4x4 <<struct>> {
}
class float2x2 <<struct>> {
    + {static} Rotate(angle:float) : float2x2
    + {static} Scale(s:float) : float2x2
    + {static} Scale(x:float, y:float) : float2x2
    + {static} Scale(v:float2) : float2x2
}
class float3x3 <<struct>> {
    + float3x3(f4x4:float4x4)
    + float3x3(q:quaternion)
    + {static} AxisAngle(axis:float3, angle:float) : float3x3
    + {static} EulerXYZ(xyz:float3) : float3x3
    + {static} EulerXZY(xyz:float3) : float3x3
    + {static} EulerYXZ(xyz:float3) : float3x3
    + {static} EulerYZX(xyz:float3) : float3x3
    + {static} EulerZXY(xyz:float3) : float3x3
    + {static} EulerZYX(xyz:float3) : float3x3
    + {static} EulerXYZ(x:float, y:float, z:float) : float3x3
    + {static} EulerXZY(x:float, y:float, z:float) : float3x3
    + {static} EulerYXZ(x:float, y:float, z:float) : float3x3
    + {static} EulerYZX(x:float, y:float, z:float) : float3x3
    + {static} EulerZXY(x:float, y:float, z:float) : float3x3
    + {static} EulerZYX(x:float, y:float, z:float) : float3x3
    + {static} Euler(xyz:float3, order:RotationOrder) : float3x3
    + {static} Euler(x:float, y:float, z:float, order:RotationOrder) : float3x3
    + {static} RotateX(angle:float) : float3x3
    + {static} RotateY(angle:float) : float3x3
    + {static} RotateZ(angle:float) : float3x3
    + {static} Scale(s:float) : float3x3
    + {static} Scale(x:float, y:float, z:float) : float3x3
    + {static} Scale(v:float3) : float3x3
    + {static} LookRotation(forward:float3, up:float3) : float3x3
    + {static} LookRotationSafe(forward:float3, up:float3) : float3x3
}
class float4x4 <<struct>> {
    + float4x4(rotation:float3x3, translation:float3)
    + float4x4(rotation:quaternion, translation:float3)
    + float4x4(transform:RigidTransform)
    + {static} AxisAngle(axis:float3, angle:float) : float4x4
    + {static} EulerXYZ(xyz:float3) : float4x4
    + {static} EulerXZY(xyz:float3) : float4x4
    + {static} EulerYXZ(xyz:float3) : float4x4
    + {static} EulerYZX(xyz:float3) : float4x4
    + {static} EulerZXY(xyz:float3) : float4x4
    + {static} EulerZYX(xyz:float3) : float4x4
    + {static} EulerXYZ(x:float, y:float, z:float) : float4x4
    + {static} EulerXZY(x:float, y:float, z:float) : float4x4
    + {static} EulerYXZ(x:float, y:float, z:float) : float4x4
    + {static} EulerYZX(x:float, y:float, z:float) : float4x4
    + {static} EulerZXY(x:float, y:float, z:float) : float4x4
    + {static} EulerZYX(x:float, y:float, z:float) : float4x4
    + {static} Euler(xyz:float3, order:RotationOrder) : float4x4
    + {static} Euler(x:float, y:float, z:float, order:RotationOrder) : float4x4
    + {static} RotateX(angle:float) : float4x4
    + {static} RotateY(angle:float) : float4x4
    + {static} RotateZ(angle:float) : float4x4
    + {static} Scale(s:float) : float4x4
    + {static} Scale(x:float, y:float, z:float) : float4x4
    + {static} Scale(scales:float3) : float4x4
    + {static} Translate(vector:float3) : float4x4
    + {static} LookAt(eye:float3, target:float3, up:float3) : float4x4
    + {static} Ortho(width:float, height:float, near:float, far:float) : float4x4
    + {static} OrthoOffCenter(left:float, right:float, bottom:float, top:float, near:float, far:float) : float4x4
    + {static} PerspectiveFov(verticalFov:float, aspect:float, near:float, far:float) : float4x4
    + {static} PerspectiveOffCenter(left:float, right:float, bottom:float, top:float, near:float, far:float) : float4x4
    + {static} TRS(translation:float3, rotation:quaternion, scale:float3) : float4x4
}
class math <<partial>> {
    + {static} float3x3(f4x4:float4x4) : float3x3
    + {static} float3x3(rotation:quaternion) : float3x3
    + {static} float4x4(rotation:float3x3, translation:float3) : float4x4
    + {static} float4x4(rotation:quaternion, translation:float3) : float4x4
    + {static} float4x4(transform:RigidTransform) : float4x4
    + {static} orthonormalize(i:float3x3) : float3x3
}
class math <<partial>> {
    + {static} mul(a:float, b:float) : float
    + {static} mul(a:float2, b:float2) : float
    + {static} mul(a:float2, b:float2x2) : float2
    + {static} mul(a:float2, b:float2x3) : float3
    + {static} mul(a:float2, b:float2x4) : float4
    + {static} mul(a:float3, b:float3) : float
    + {static} mul(a:float3, b:float3x2) : float2
    + {static} mul(a:float3, b:float3x3) : float3
    + {static} mul(a:float3, b:float3x4) : float4
    + {static} mul(a:float4, b:float4) : float
    + {static} mul(a:float4, b:float4x2) : float2
    + {static} mul(a:float4, b:float4x3) : float3
    + {static} mul(a:float4, b:float4x4) : float4
    + {static} mul(a:float2x2, b:float2) : float2
    + {static} mul(a:float2x2, b:float2x2) : float2x2
    + {static} mul(a:float2x2, b:float2x3) : float2x3
    + {static} mul(a:float2x2, b:float2x4) : float2x4
    + {static} mul(a:float2x3, b:float3) : float2
    + {static} mul(a:float2x3, b:float3x2) : float2x2
    + {static} mul(a:float2x3, b:float3x3) : float2x3
    + {static} mul(a:float2x3, b:float3x4) : float2x4
    + {static} mul(a:float2x4, b:float4) : float2
    + {static} mul(a:float2x4, b:float4x2) : float2x2
    + {static} mul(a:float2x4, b:float4x3) : float2x3
    + {static} mul(a:float2x4, b:float4x4) : float2x4
    + {static} mul(a:float3x2, b:float2) : float3
    + {static} mul(a:float3x2, b:float2x2) : float3x2
    + {static} mul(a:float3x2, b:float2x3) : float3x3
    + {static} mul(a:float3x2, b:float2x4) : float3x4
    + {static} mul(a:float3x3, b:float3) : float3
    + {static} mul(a:float3x3, b:float3x2) : float3x2
    + {static} mul(a:float3x3, b:float3x3) : float3x3
    + {static} mul(a:float3x3, b:float3x4) : float3x4
    + {static} mul(a:float3x4, b:float4) : float3
    + {static} mul(a:float3x4, b:float4x2) : float3x2
    + {static} mul(a:float3x4, b:float4x3) : float3x3
    + {static} mul(a:float3x4, b:float4x4) : float3x4
    + {static} mul(a:float4x2, b:float2) : float4
    + {static} mul(a:float4x2, b:float2x2) : float4x2
    + {static} mul(a:float4x2, b:float2x3) : float4x3
    + {static} mul(a:float4x2, b:float2x4) : float4x4
    + {static} mul(a:float4x3, b:float3) : float4
    + {static} mul(a:float4x3, b:float3x2) : float4x2
    + {static} mul(a:float4x3, b:float3x3) : float4x3
    + {static} mul(a:float4x3, b:float3x4) : float4x4
    + {static} mul(a:float4x4, b:float4) : float4
    + {static} mul(a:float4x4, b:float4x2) : float4x2
    + {static} mul(a:float4x4, b:float4x3) : float4x3
    + {static} mul(a:float4x4, b:float4x4) : float4x4
    + {static} mul(a:double, b:double) : double
    + {static} mul(a:double2, b:double2) : double
    + {static} mul(a:double2, b:double2x2) : double2
    + {static} mul(a:double2, b:double2x3) : double3
    + {static} mul(a:double2, b:double2x4) : double4
    + {static} mul(a:double3, b:double3) : double
    + {static} mul(a:double3, b:double3x2) : double2
    + {static} mul(a:double3, b:double3x3) : double3
    + {static} mul(a:double3, b:double3x4) : double4
    + {static} mul(a:double4, b:double4) : double
    + {static} mul(a:double4, b:double4x2) : double2
    + {static} mul(a:double4, b:double4x3) : double3
    + {static} mul(a:double4, b:double4x4) : double4
    + {static} mul(a:double2x2, b:double2) : double2
    + {static} mul(a:double2x2, b:double2x2) : double2x2
    + {static} mul(a:double2x2, b:double2x3) : double2x3
    + {static} mul(a:double2x2, b:double2x4) : double2x4
    + {static} mul(a:double2x3, b:double3) : double2
    + {static} mul(a:double2x3, b:double3x2) : double2x2
    + {static} mul(a:double2x3, b:double3x3) : double2x3
    + {static} mul(a:double2x3, b:double3x4) : double2x4
    + {static} mul(a:double2x4, b:double4) : double2
    + {static} mul(a:double2x4, b:double4x2) : double2x2
    + {static} mul(a:double2x4, b:double4x3) : double2x3
    + {static} mul(a:double2x4, b:double4x4) : double2x4
    + {static} mul(a:double3x2, b:double2) : double3
    + {static} mul(a:double3x2, b:double2x2) : double3x2
    + {static} mul(a:double3x2, b:double2x3) : double3x3
    + {static} mul(a:double3x2, b:double2x4) : double3x4
    + {static} mul(a:double3x3, b:double3) : double3
    + {static} mul(a:double3x3, b:double3x2) : double3x2
    + {static} mul(a:double3x3, b:double3x3) : double3x3
    + {static} mul(a:double3x3, b:double3x4) : double3x4
    + {static} mul(a:double3x4, b:double4) : double3
    + {static} mul(a:double3x4, b:double4x2) : double3x2
    + {static} mul(a:double3x4, b:double4x3) : double3x3
    + {static} mul(a:double3x4, b:double4x4) : double3x4
    + {static} mul(a:double4x2, b:double2) : double4
    + {static} mul(a:double4x2, b:double2x2) : double4x2
    + {static} mul(a:double4x2, b:double2x3) : double4x3
    + {static} mul(a:double4x2, b:double2x4) : double4x4
    + {static} mul(a:double4x3, b:double3) : double4
    + {static} mul(a:double4x3, b:double3x2) : double4x2
    + {static} mul(a:double4x3, b:double3x3) : double4x3
    + {static} mul(a:double4x3, b:double3x4) : double4x4
    + {static} mul(a:double4x4, b:double4) : double4
    + {static} mul(a:double4x4, b:double4x2) : double4x2
    + {static} mul(a:double4x4, b:double4x3) : double4x3
    + {static} mul(a:double4x4, b:double4x4) : double4x4
    + {static} mul(a:int, b:int) : int
    + {static} mul(a:int2, b:int2) : int
    + {static} mul(a:int2, b:int2x2) : int2
    + {static} mul(a:int2, b:int2x3) : int3
    + {static} mul(a:int2, b:int2x4) : int4
    + {static} mul(a:int3, b:int3) : int
    + {static} mul(a:int3, b:int3x2) : int2
    + {static} mul(a:int3, b:int3x3) : int3
    + {static} mul(a:int3, b:int3x4) : int4
    + {static} mul(a:int4, b:int4) : int
    + {static} mul(a:int4, b:int4x2) : int2
    + {static} mul(a:int4, b:int4x3) : int3
    + {static} mul(a:int4, b:int4x4) : int4
    + {static} mul(a:int2x2, b:int2) : int2
    + {static} mul(a:int2x2, b:int2x2) : int2x2
    + {static} mul(a:int2x2, b:int2x3) : int2x3
    + {static} mul(a:int2x2, b:int2x4) : int2x4
    + {static} mul(a:int2x3, b:int3) : int2
    + {static} mul(a:int2x3, b:int3x2) : int2x2
    + {static} mul(a:int2x3, b:int3x3) : int2x3
    + {static} mul(a:int2x3, b:int3x4) : int2x4
    + {static} mul(a:int2x4, b:int4) : int2
    + {static} mul(a:int2x4, b:int4x2) : int2x2
    + {static} mul(a:int2x4, b:int4x3) : int2x3
    + {static} mul(a:int2x4, b:int4x4) : int2x4
    + {static} mul(a:int3x2, b:int2) : int3
    + {static} mul(a:int3x2, b:int2x2) : int3x2
    + {static} mul(a:int3x2, b:int2x3) : int3x3
    + {static} mul(a:int3x2, b:int2x4) : int3x4
    + {static} mul(a:int3x3, b:int3) : int3
    + {static} mul(a:int3x3, b:int3x2) : int3x2
    + {static} mul(a:int3x3, b:int3x3) : int3x3
    + {static} mul(a:int3x3, b:int3x4) : int3x4
    + {static} mul(a:int3x4, b:int4) : int3
    + {static} mul(a:int3x4, b:int4x2) : int3x2
    + {static} mul(a:int3x4, b:int4x3) : int3x3
    + {static} mul(a:int3x4, b:int4x4) : int3x4
    + {static} mul(a:int4x2, b:int2) : int4
    + {static} mul(a:int4x2, b:int2x2) : int4x2
    + {static} mul(a:int4x2, b:int2x3) : int4x3
    + {static} mul(a:int4x2, b:int2x4) : int4x4
    + {static} mul(a:int4x3, b:int3) : int4
    + {static} mul(a:int4x3, b:int3x2) : int4x2
    + {static} mul(a:int4x3, b:int3x3) : int4x3
    + {static} mul(a:int4x3, b:int3x4) : int4x4
    + {static} mul(a:int4x4, b:int4) : int4
    + {static} mul(a:int4x4, b:int4x2) : int4x2
    + {static} mul(a:int4x4, b:int4x3) : int4x3
    + {static} mul(a:int4x4, b:int4x4) : int4x4
    + {static} mul(a:uint, b:uint) : uint
    + {static} mul(a:uint2, b:uint2) : uint
    + {static} mul(a:uint2, b:uint2x2) : uint2
    + {static} mul(a:uint2, b:uint2x3) : uint3
    + {static} mul(a:uint2, b:uint2x4) : uint4
    + {static} mul(a:uint3, b:uint3) : uint
    + {static} mul(a:uint3, b:uint3x2) : uint2
    + {static} mul(a:uint3, b:uint3x3) : uint3
    + {static} mul(a:uint3, b:uint3x4) : uint4
    + {static} mul(a:uint4, b:uint4) : uint
    + {static} mul(a:uint4, b:uint4x2) : uint2
    + {static} mul(a:uint4, b:uint4x3) : uint3
    + {static} mul(a:uint4, b:uint4x4) : uint4
    + {static} mul(a:uint2x2, b:uint2) : uint2
    + {static} mul(a:uint2x2, b:uint2x2) : uint2x2
    + {static} mul(a:uint2x2, b:uint2x3) : uint2x3
    + {static} mul(a:uint2x2, b:uint2x4) : uint2x4
    + {static} mul(a:uint2x3, b:uint3) : uint2
    + {static} mul(a:uint2x3, b:uint3x2) : uint2x2
    + {static} mul(a:uint2x3, b:uint3x3) : uint2x3
    + {static} mul(a:uint2x3, b:uint3x4) : uint2x4
    + {static} mul(a:uint2x4, b:uint4) : uint2
    + {static} mul(a:uint2x4, b:uint4x2) : uint2x2
    + {static} mul(a:uint2x4, b:uint4x3) : uint2x3
    + {static} mul(a:uint2x4, b:uint4x4) : uint2x4
    + {static} mul(a:uint3x2, b:uint2) : uint3
    + {static} mul(a:uint3x2, b:uint2x2) : uint3x2
    + {static} mul(a:uint3x2, b:uint2x3) : uint3x3
    + {static} mul(a:uint3x2, b:uint2x4) : uint3x4
    + {static} mul(a:uint3x3, b:uint3) : uint3
    + {static} mul(a:uint3x3, b:uint3x2) : uint3x2
    + {static} mul(a:uint3x3, b:uint3x3) : uint3x3
    + {static} mul(a:uint3x3, b:uint3x4) : uint3x4
    + {static} mul(a:uint3x4, b:uint4) : uint3
    + {static} mul(a:uint3x4, b:uint4x2) : uint3x2
    + {static} mul(a:uint3x4, b:uint4x3) : uint3x3
    + {static} mul(a:uint3x4, b:uint4x4) : uint3x4
    + {static} mul(a:uint4x2, b:uint2) : uint4
    + {static} mul(a:uint4x2, b:uint2x2) : uint4x2
    + {static} mul(a:uint4x2, b:uint2x3) : uint4x3
    + {static} mul(a:uint4x2, b:uint2x4) : uint4x4
    + {static} mul(a:uint4x3, b:uint3) : uint4
    + {static} mul(a:uint4x3, b:uint3x2) : uint4x2
    + {static} mul(a:uint4x3, b:uint3x3) : uint4x3
    + {static} mul(a:uint4x3, b:uint3x4) : uint4x4
    + {static} mul(a:uint4x4, b:uint4) : uint4
    + {static} mul(a:uint4x4, b:uint4x2) : uint4x2
    + {static} mul(a:uint4x4, b:uint4x3) : uint4x3
    + {static} mul(a:uint4x4, b:uint4x4) : uint4x4
}
class PostNormalizeAttribute {
}
class DoNotNormalizeAttribute {
}
class quaternion <<struct>> {
    + quaternion(x:float, y:float, z:float, w:float)
    + quaternion(value:float4)
    + quaternion(m:float3x3)
    + quaternion(m:float4x4)
    + {static} AxisAngle(axis:float3, angle:float) : quaternion
    + {static} EulerXYZ(xyz:float3) : quaternion
    + {static} EulerXZY(xyz:float3) : quaternion
    + {static} EulerYXZ(xyz:float3) : quaternion
    + {static} EulerYZX(xyz:float3) : quaternion
    + {static} EulerZXY(xyz:float3) : quaternion
    + {static} EulerZYX(xyz:float3) : quaternion
    + {static} EulerXYZ(x:float, y:float, z:float) : quaternion
    + {static} EulerXZY(x:float, y:float, z:float) : quaternion
    + {static} EulerYXZ(x:float, y:float, z:float) : quaternion
    + {static} EulerYZX(x:float, y:float, z:float) : quaternion
    + {static} EulerZXY(x:float, y:float, z:float) : quaternion
    + {static} EulerZYX(x:float, y:float, z:float) : quaternion
    + {static} Euler(xyz:float3, order:RotationOrder) : quaternion
    + {static} Euler(x:float, y:float, z:float, order:RotationOrder) : quaternion
    + {static} RotateX(angle:float) : quaternion
    + {static} RotateY(angle:float) : quaternion
    + {static} RotateZ(angle:float) : quaternion
    + {static} LookRotation(forward:float3, up:float3) : quaternion
    + {static} LookRotationSafe(forward:float3, up:float3) : quaternion
    + Equals(x:quaternion) : bool
    + <<override>> Equals(x:object) : bool
    + <<override>> GetHashCode() : int
    + <<override>> ToString() : string
    + ToString(format:string, formatProvider:IFormatProvider) : string
}
class math <<static>> <<partial>> {
    + {static} quaternion(x:float, y:float, z:float, w:float) : quaternion
    + {static} quaternion(value:float4) : quaternion
    + {static} quaternion(m:float3x3) : quaternion
    + {static} quaternion(m:float4x4) : quaternion
    + {static} conjugate(q:quaternion) : quaternion
    + {static} inverse(q:quaternion) : quaternion
    + {static} dot(a:quaternion, b:quaternion) : float
    + {static} length(q:quaternion) : float
    + {static} lengthsq(q:quaternion) : float
    + {static} normalize(q:quaternion) : quaternion
    + {static} normalizesafe(q:quaternion) : quaternion
    + {static} normalizesafe(q:quaternion, defaultvalue:quaternion) : quaternion
    + {static} unitexp(q:quaternion) : quaternion
    + {static} exp(q:quaternion) : quaternion
    + {static} unitlog(q:quaternion) : quaternion
    + {static} log(q:quaternion) : quaternion
    + {static} mul(a:quaternion, b:quaternion) : quaternion
    + {static} mul(q:quaternion, v:float3) : float3
    + {static} rotate(q:quaternion, v:float3) : float3
    + {static} nlerp(q1:quaternion, q2:quaternion, t:float) : quaternion
    + {static} slerp(q1:quaternion, q2:quaternion, t:float) : quaternion
    + {static} hash(q:quaternion) : uint
    + {static} hashwide(q:quaternion) : uint4
    + {static} forward(q:quaternion) : float3
}
class "IEquatable`1"<T> {
}
IFormattable <|- - quaternion
quaternion - -> "value" float4
quaternion o-> "identity" quaternion
class Random <<struct>> {
    + state : uint
    + Random(seed:uint)
    + {static} CreateFromIndex(index:uint) : Random
    + InitState(seed:uint) : void
    + NextBool() : bool
    + NextBool2() : bool2
    + NextBool3() : bool3
    + NextBool4() : bool4
    + NextInt() : int
    + NextInt2() : int2
    + NextInt3() : int3
    + NextInt4() : int4
    + NextInt(max:int) : int
    + NextInt2(max:int2) : int2
    + NextInt3(max:int3) : int3
    + NextInt4(max:int4) : int4
    + NextInt(min:int, max:int) : int
    + NextInt2(min:int2, max:int2) : int2
    + NextInt3(min:int3, max:int3) : int3
    + NextInt4(min:int4, max:int4) : int4
    + NextUInt() : uint
    + NextUInt2() : uint2
    + NextUInt3() : uint3
    + NextUInt4() : uint4
    + NextUInt(max:uint) : uint
    + NextUInt2(max:uint2) : uint2
    + NextUInt3(max:uint3) : uint3
    + NextUInt4(max:uint4) : uint4
    + NextUInt(min:uint, max:uint) : uint
    + NextUInt2(min:uint2, max:uint2) : uint2
    + NextUInt3(min:uint3, max:uint3) : uint3
    + NextUInt4(min:uint4, max:uint4) : uint4
    + NextFloat() : float
    + NextFloat2() : float2
    + NextFloat3() : float3
    + NextFloat4() : float4
    + NextFloat(max:float) : float
    + NextFloat2(max:float2) : float2
    + NextFloat3(max:float3) : float3
    + NextFloat4(max:float4) : float4
    + NextFloat(min:float, max:float) : float
    + NextFloat2(min:float2, max:float2) : float2
    + NextFloat3(min:float3, max:float3) : float3
    + NextFloat4(min:float4, max:float4) : float4
    + NextDouble() : double
    + NextDouble2() : double2
    + NextDouble3() : double3
    + NextDouble4() : double4
    + NextDouble(max:double) : double
    + NextDouble2(max:double2) : double2
    + NextDouble3(max:double3) : double3
    + NextDouble4(max:double4) : double4
    + NextDouble(min:double, max:double) : double
    + NextDouble2(min:double2, max:double2) : double2
    + NextDouble3(min:double3, max:double3) : double3
    + NextDouble4(min:double4, max:double4) : double4
    + NextFloat2Direction() : float2
    + NextDouble2Direction() : double2
    + NextFloat3Direction() : float3
    + NextDouble3Direction() : double3
    + NextQuaternionRotation() : quaternion
}
class RigidTransform <<struct>> {
    + RigidTransform(rotation:quaternion, translation:float3)
    + RigidTransform(rotation:float3x3, translation:float3)
    + RigidTransform(transform:float4x4)
    + {static} AxisAngle(axis:float3, angle:float) : RigidTransform
    + {static} EulerXYZ(xyz:float3) : RigidTransform
    + {static} EulerXZY(xyz:float3) : RigidTransform
    + {static} EulerYXZ(xyz:float3) : RigidTransform
    + {static} EulerYZX(xyz:float3) : RigidTransform
    + {static} EulerZXY(xyz:float3) : RigidTransform
    + {static} EulerZYX(xyz:float3) : RigidTransform
    + {static} EulerXYZ(x:float, y:float, z:float) : RigidTransform
    + {static} EulerXZY(x:float, y:float, z:float) : RigidTransform
    + {static} EulerYXZ(x:float, y:float, z:float) : RigidTransform
    + {static} EulerYZX(x:float, y:float, z:float) : RigidTransform
    + {static} EulerZXY(x:float, y:float, z:float) : RigidTransform
    + {static} EulerZYX(x:float, y:float, z:float) : RigidTransform
    + {static} Euler(xyz:float3, order:RotationOrder) : RigidTransform
    + {static} Euler(x:float, y:float, z:float, order:RotationOrder) : RigidTransform
    + {static} RotateX(angle:float) : RigidTransform
    + {static} RotateY(angle:float) : RigidTransform
    + {static} RotateZ(angle:float) : RigidTransform
    + {static} Translate(vector:float3) : RigidTransform
    + Equals(x:RigidTransform) : bool
    + <<override>> Equals(x:object) : bool
    + <<override>> GetHashCode() : int
    + <<override>> ToString() : string
    + ToString(format:string, formatProvider:IFormatProvider) : string
}
class math <<static>> <<partial>> {
    + {static} RigidTransform(rot:quaternion, pos:float3) : RigidTransform
    + {static} RigidTransform(rotation:float3x3, translation:float3) : RigidTransform
    + {static} RigidTransform(transform:float4x4) : RigidTransform
    + {static} inverse(t:RigidTransform) : RigidTransform
    + {static} mul(a:RigidTransform, b:RigidTransform) : RigidTransform
    + {static} mul(a:RigidTransform, pos:float4) : float4
    + {static} rotate(a:RigidTransform, dir:float3) : float3
    + {static} transform(a:RigidTransform, pos:float3) : float3
    + {static} hash(t:RigidTransform) : uint
    + {static} hashwide(t:RigidTransform) : uint4
}
RigidTransform - -> "rot" quaternion
RigidTransform - -> "pos" float3
RigidTransform o-> "identity" RigidTransform
class uint2 <<struct>> {
    + x : uint
    + y : uint
    + uint2(x:uint, y:uint)
    + uint2(xy:uint2)
    + uint2(v:uint)
    + uint2(v:bool)
    + uint2(v:bool2)
    + uint2(v:int)
    + uint2(v:int2)
    + uint2(v:float)
    + uint2(v:float2)
    + uint2(v:double)
    + uint2(v:double2)
    + Equals(rhs:uint2) : bool
    + <<override>> Equals(o:object) : bool
    + <<override>> GetHashCode() : int
    + <<override>> ToString() : string
    + ToString(format:string, formatProvider:IFormatProvider) : string
}
class math <<static>> <<partial>> {
    + {static} uint2(x:uint, y:uint) : uint2
    + {static} uint2(xy:uint2) : uint2
    + {static} uint2(v:uint) : uint2
    + {static} uint2(v:bool) : uint2
    + {static} uint2(v:bool2) : uint2
    + {static} uint2(v:int) : uint2
    + {static} uint2(v:int2) : uint2
    + {static} uint2(v:float) : uint2
    + {static} uint2(v:float2) : uint2
    + {static} uint2(v:double) : uint2
    + {static} uint2(v:double2) : uint2
    + {static} hash(v:uint2) : uint
    + {static} hashwide(v:uint2) : uint2
    + {static} shuffle(left:uint2, right:uint2, x:ShuffleComponent) : uint
    + {static} shuffle(left:uint2, right:uint2, x:ShuffleComponent, y:ShuffleComponent) : uint2
    + {static} shuffle(left:uint2, right:uint2, x:ShuffleComponent, y:ShuffleComponent, z:ShuffleComponent) : uint3
    + {static} shuffle(left:uint2, right:uint2, x:ShuffleComponent, y:ShuffleComponent, z:ShuffleComponent, w:ShuffleComponent) : uint4
}
class "IEquatable`1"<T> {
}
class DebuggerProxy <<sealed>> {
    + x : uint
    + y : uint
    + DebuggerProxy(v:uint2)
}
IFormattable <|- - uint2
uint2 - -> "zero" uint2
uint2 - -> "xxxx" uint4
uint2 - -> "xxxy" uint4
uint2 - -> "xxyx" uint4
uint2 - -> "xxyy" uint4
uint2 - -> "xyxx" uint4
uint2 - -> "xyxy" uint4
uint2 - -> "xyyx" uint4
uint2 - -> "xyyy" uint4
uint2 - -> "yxxx" uint4
uint2 - -> "yxxy" uint4
uint2 - -> "yxyx" uint4
uint2 - -> "yxyy" uint4
uint2 - -> "yyxx" uint4
uint2 - -> "yyxy" uint4
uint2 - -> "yyyx" uint4
uint2 - -> "yyyy" uint4
uint2 - -> "xxx" uint3
uint2 - -> "xxy" uint3
uint2 - -> "xyx" uint3
uint2 - -> "xyy" uint3
uint2 - -> "yxx" uint3
uint2 - -> "yxy" uint3
uint2 - -> "yyx" uint3
uint2 - -> "yyy" uint3
uint2 - -> "xx" uint2
uint2 - -> "xy" uint2
uint2 - -> "yx" uint2
uint2 - -> "yy" uint2
uint2 +- - DebuggerProxy
class uint2x2 <<struct>> {
    + uint2x2(c0:uint2, c1:uint2)
    + uint2x2(m00:uint, m01:uint, m10:uint, m11:uint)
    + uint2x2(v:uint)
    + uint2x2(v:bool)
    + uint2x2(v:bool2x2)
    + uint2x2(v:int)
    + uint2x2(v:int2x2)
    + uint2x2(v:float)
    + uint2x2(v:float2x2)
    + uint2x2(v:double)
    + uint2x2(v:double2x2)
    + Equals(rhs:uint2x2) : bool
    + <<override>> Equals(o:object) : bool
    + <<override>> GetHashCode() : int
    + <<override>> ToString() : string
    + ToString(format:string, formatProvider:IFormatProvider) : string
}
class math <<static>> <<partial>> {
    + {static} uint2x2(c0:uint2, c1:uint2) : uint2x2
    + {static} uint2x2(m00:uint, m01:uint, m10:uint, m11:uint) : uint2x2
    + {static} uint2x2(v:uint) : uint2x2
    + {static} uint2x2(v:bool) : uint2x2
    + {static} uint2x2(v:bool2x2) : uint2x2
    + {static} uint2x2(v:int) : uint2x2
    + {static} uint2x2(v:int2x2) : uint2x2
    + {static} uint2x2(v:float) : uint2x2
    + {static} uint2x2(v:float2x2) : uint2x2
    + {static} uint2x2(v:double) : uint2x2
    + {static} uint2x2(v:double2x2) : uint2x2
    + {static} transpose(v:uint2x2) : uint2x2
    + {static} hash(v:uint2x2) : uint
    + {static} hashwide(v:uint2x2) : uint2
}
class "IEquatable`1"<T> {
}
IFormattable <|- - uint2x2
uint2x2 - -> "c0" uint2
uint2x2 - -> "c1" uint2
uint2x2 o-> "identity" uint2x2
uint2x2 - -> "zero" uint2x2
class uint2x3 <<struct>> {
    + uint2x3(c0:uint2, c1:uint2, c2:uint2)
    + uint2x3(m00:uint, m01:uint, m02:uint, m10:uint, m11:uint, m12:uint)
    + uint2x3(v:uint)
    + uint2x3(v:bool)
    + uint2x3(v:bool2x3)
    + uint2x3(v:int)
    + uint2x3(v:int2x3)
    + uint2x3(v:float)
    + uint2x3(v:float2x3)
    + uint2x3(v:double)
    + uint2x3(v:double2x3)
    + Equals(rhs:uint2x3) : bool
    + <<override>> Equals(o:object) : bool
    + <<override>> GetHashCode() : int
    + <<override>> ToString() : string
    + ToString(format:string, formatProvider:IFormatProvider) : string
}
class math <<static>> <<partial>> {
    + {static} uint2x3(c0:uint2, c1:uint2, c2:uint2) : uint2x3
    + {static} uint2x3(m00:uint, m01:uint, m02:uint, m10:uint, m11:uint, m12:uint) : uint2x3
    + {static} uint2x3(v:uint) : uint2x3
    + {static} uint2x3(v:bool) : uint2x3
    + {static} uint2x3(v:bool2x3) : uint2x3
    + {static} uint2x3(v:int) : uint2x3
    + {static} uint2x3(v:int2x3) : uint2x3
    + {static} uint2x3(v:float) : uint2x3
    + {static} uint2x3(v:float2x3) : uint2x3
    + {static} uint2x3(v:double) : uint2x3
    + {static} uint2x3(v:double2x3) : uint2x3
    + {static} transpose(v:uint2x3) : uint3x2
    + {static} hash(v:uint2x3) : uint
    + {static} hashwide(v:uint2x3) : uint2
}
class "IEquatable`1"<T> {
}
IFormattable <|- - uint2x3
uint2x3 - -> "c0" uint2
uint2x3 - -> "c1" uint2
uint2x3 - -> "c2" uint2
uint2x3 - -> "zero" uint2x3
class uint2x4 <<struct>> {
    + uint2x4(c0:uint2, c1:uint2, c2:uint2, c3:uint2)
    + uint2x4(m00:uint, m01:uint, m02:uint, m03:uint, m10:uint, m11:uint, m12:uint, m13:uint)
    + uint2x4(v:uint)
    + uint2x4(v:bool)
    + uint2x4(v:bool2x4)
    + uint2x4(v:int)
    + uint2x4(v:int2x4)
    + uint2x4(v:float)
    + uint2x4(v:float2x4)
    + uint2x4(v:double)
    + uint2x4(v:double2x4)
    + Equals(rhs:uint2x4) : bool
    + <<override>> Equals(o:object) : bool
    + <<override>> GetHashCode() : int
    + <<override>> ToString() : string
    + ToString(format:string, formatProvider:IFormatProvider) : string
}
class math <<static>> <<partial>> {
    + {static} uint2x4(c0:uint2, c1:uint2, c2:uint2, c3:uint2) : uint2x4
    + {static} uint2x4(m00:uint, m01:uint, m02:uint, m03:uint, m10:uint, m11:uint, m12:uint, m13:uint) : uint2x4
    + {static} uint2x4(v:uint) : uint2x4
    + {static} uint2x4(v:bool) : uint2x4
    + {static} uint2x4(v:bool2x4) : uint2x4
    + {static} uint2x4(v:int) : uint2x4
    + {static} uint2x4(v:int2x4) : uint2x4
    + {static} uint2x4(v:float) : uint2x4
    + {static} uint2x4(v:float2x4) : uint2x4
    + {static} uint2x4(v:double) : uint2x4
    + {static} uint2x4(v:double2x4) : uint2x4
    + {static} transpose(v:uint2x4) : uint4x2
    + {static} hash(v:uint2x4) : uint
    + {static} hashwide(v:uint2x4) : uint2
}
class "IEquatable`1"<T> {
}
IFormattable <|- - uint2x4
uint2x4 - -> "c0" uint2
uint2x4 - -> "c1" uint2
uint2x4 - -> "c2" uint2
uint2x4 - -> "c3" uint2
uint2x4 - -> "zero" uint2x4
class uint3 <<struct>> {
    + x : uint
    + y : uint
    + z : uint
    + uint3(x:uint, y:uint, z:uint)
    + uint3(x:uint, yz:uint2)
    + uint3(xy:uint2, z:uint)
    + uint3(xyz:uint3)
    + uint3(v:uint)
    + uint3(v:bool)
    + uint3(v:bool3)
    + uint3(v:int)
    + uint3(v:int3)
    + uint3(v:float)
    + uint3(v:float3)
    + uint3(v:double)
    + uint3(v:double3)
    + Equals(rhs:uint3) : bool
    + <<override>> Equals(o:object) : bool
    + <<override>> GetHashCode() : int
    + <<override>> ToString() : string
    + ToString(format:string, formatProvider:IFormatProvider) : string
}
class math <<static>> <<partial>> {
    + {static} uint3(x:uint, y:uint, z:uint) : uint3
    + {static} uint3(x:uint, yz:uint2) : uint3
    + {static} uint3(xy:uint2, z:uint) : uint3
    + {static} uint3(xyz:uint3) : uint3
    + {static} uint3(v:uint) : uint3
    + {static} uint3(v:bool) : uint3
    + {static} uint3(v:bool3) : uint3
    + {static} uint3(v:int) : uint3
    + {static} uint3(v:int3) : uint3
    + {static} uint3(v:float) : uint3
    + {static} uint3(v:float3) : uint3
    + {static} uint3(v:double) : uint3
    + {static} uint3(v:double3) : uint3
    + {static} hash(v:uint3) : uint
    + {static} hashwide(v:uint3) : uint3
    + {static} shuffle(left:uint3, right:uint3, x:ShuffleComponent) : uint
    + {static} shuffle(left:uint3, right:uint3, x:ShuffleComponent, y:ShuffleComponent) : uint2
    + {static} shuffle(left:uint3, right:uint3, x:ShuffleComponent, y:ShuffleComponent, z:ShuffleComponent) : uint3
    + {static} shuffle(left:uint3, right:uint3, x:ShuffleComponent, y:ShuffleComponent, z:ShuffleComponent, w:ShuffleComponent) : uint4
}
class "IEquatable`1"<T> {
}
class DebuggerProxy <<sealed>> {
    + x : uint
    + y : uint
    + z : uint
    + DebuggerProxy(v:uint3)
}
IFormattable <|- - uint3
uint3 - -> "zero" uint3
uint3 - -> "xxxx" uint4
uint3 - -> "xxxy" uint4
uint3 - -> "xxxz" uint4
uint3 - -> "xxyx" uint4
uint3 - -> "xxyy" uint4
uint3 - -> "xxyz" uint4
uint3 - -> "xxzx" uint4
uint3 - -> "xxzy" uint4
uint3 - -> "xxzz" uint4
uint3 - -> "xyxx" uint4
uint3 - -> "xyxy" uint4
uint3 - -> "xyxz" uint4
uint3 - -> "xyyx" uint4
uint3 - -> "xyyy" uint4
uint3 - -> "xyyz" uint4
uint3 - -> "xyzx" uint4
uint3 - -> "xyzy" uint4
uint3 - -> "xyzz" uint4
uint3 - -> "xzxx" uint4
uint3 - -> "xzxy" uint4
uint3 - -> "xzxz" uint4
uint3 - -> "xzyx" uint4
uint3 - -> "xzyy" uint4
uint3 - -> "xzyz" uint4
uint3 - -> "xzzx" uint4
uint3 - -> "xzzy" uint4
uint3 - -> "xzzz" uint4
uint3 - -> "yxxx" uint4
uint3 - -> "yxxy" uint4
uint3 - -> "yxxz" uint4
uint3 - -> "yxyx" uint4
uint3 - -> "yxyy" uint4
uint3 - -> "yxyz" uint4
uint3 - -> "yxzx" uint4
uint3 - -> "yxzy" uint4
uint3 - -> "yxzz" uint4
uint3 - -> "yyxx" uint4
uint3 - -> "yyxy" uint4
uint3 - -> "yyxz" uint4
uint3 - -> "yyyx" uint4
uint3 - -> "yyyy" uint4
uint3 - -> "yyyz" uint4
uint3 - -> "yyzx" uint4
uint3 - -> "yyzy" uint4
uint3 - -> "yyzz" uint4
uint3 - -> "yzxx" uint4
uint3 - -> "yzxy" uint4
uint3 - -> "yzxz" uint4
uint3 - -> "yzyx" uint4
uint3 - -> "yzyy" uint4
uint3 - -> "yzyz" uint4
uint3 - -> "yzzx" uint4
uint3 - -> "yzzy" uint4
uint3 - -> "yzzz" uint4
uint3 - -> "zxxx" uint4
uint3 - -> "zxxy" uint4
uint3 - -> "zxxz" uint4
uint3 - -> "zxyx" uint4
uint3 - -> "zxyy" uint4
uint3 - -> "zxyz" uint4
uint3 - -> "zxzx" uint4
uint3 - -> "zxzy" uint4
uint3 - -> "zxzz" uint4
uint3 - -> "zyxx" uint4
uint3 - -> "zyxy" uint4
uint3 - -> "zyxz" uint4
uint3 - -> "zyyx" uint4
uint3 - -> "zyyy" uint4
uint3 - -> "zyyz" uint4
uint3 - -> "zyzx" uint4
uint3 - -> "zyzy" uint4
uint3 - -> "zyzz" uint4
uint3 - -> "zzxx" uint4
uint3 - -> "zzxy" uint4
uint3 - -> "zzxz" uint4
uint3 - -> "zzyx" uint4
uint3 - -> "zzyy" uint4
uint3 - -> "zzyz" uint4
uint3 - -> "zzzx" uint4
uint3 - -> "zzzy" uint4
uint3 - -> "zzzz" uint4
uint3 - -> "xxx" uint3
uint3 - -> "xxy" uint3
uint3 - -> "xxz" uint3
uint3 - -> "xyx" uint3
uint3 - -> "xyy" uint3
uint3 - -> "xyz" uint3
uint3 - -> "xzx" uint3
uint3 - -> "xzy" uint3
uint3 - -> "xzz" uint3
uint3 - -> "yxx" uint3
uint3 - -> "yxy" uint3
uint3 - -> "yxz" uint3
uint3 - -> "yyx" uint3
uint3 - -> "yyy" uint3
uint3 - -> "yyz" uint3
uint3 - -> "yzx" uint3
uint3 - -> "yzy" uint3
uint3 - -> "yzz" uint3
uint3 - -> "zxx" uint3
uint3 - -> "zxy" uint3
uint3 - -> "zxz" uint3
uint3 - -> "zyx" uint3
uint3 - -> "zyy" uint3
uint3 - -> "zyz" uint3
uint3 - -> "zzx" uint3
uint3 - -> "zzy" uint3
uint3 - -> "zzz" uint3
uint3 - -> "xx" uint2
uint3 - -> "xy" uint2
uint3 - -> "xz" uint2
uint3 - -> "yx" uint2
uint3 - -> "yy" uint2
uint3 - -> "yz" uint2
uint3 - -> "zx" uint2
uint3 - -> "zy" uint2
uint3 - -> "zz" uint2
uint3 +- - DebuggerProxy
class uint3x2 <<struct>> {
    + uint3x2(c0:uint3, c1:uint3)
    + uint3x2(m00:uint, m01:uint, m10:uint, m11:uint, m20:uint, m21:uint)
    + uint3x2(v:uint)
    + uint3x2(v:bool)
    + uint3x2(v:bool3x2)
    + uint3x2(v:int)
    + uint3x2(v:int3x2)
    + uint3x2(v:float)
    + uint3x2(v:float3x2)
    + uint3x2(v:double)
    + uint3x2(v:double3x2)
    + Equals(rhs:uint3x2) : bool
    + <<override>> Equals(o:object) : bool
    + <<override>> GetHashCode() : int
    + <<override>> ToString() : string
    + ToString(format:string, formatProvider:IFormatProvider) : string
}
class math <<static>> <<partial>> {
    + {static} uint3x2(c0:uint3, c1:uint3) : uint3x2
    + {static} uint3x2(m00:uint, m01:uint, m10:uint, m11:uint, m20:uint, m21:uint) : uint3x2
    + {static} uint3x2(v:uint) : uint3x2
    + {static} uint3x2(v:bool) : uint3x2
    + {static} uint3x2(v:bool3x2) : uint3x2
    + {static} uint3x2(v:int) : uint3x2
    + {static} uint3x2(v:int3x2) : uint3x2
    + {static} uint3x2(v:float) : uint3x2
    + {static} uint3x2(v:float3x2) : uint3x2
    + {static} uint3x2(v:double) : uint3x2
    + {static} uint3x2(v:double3x2) : uint3x2
    + {static} transpose(v:uint3x2) : uint2x3
    + {static} hash(v:uint3x2) : uint
    + {static} hashwide(v:uint3x2) : uint3
}
class "IEquatable`1"<T> {
}
IFormattable <|- - uint3x2
uint3x2 - -> "c0" uint3
uint3x2 - -> "c1" uint3
uint3x2 - -> "zero" uint3x2
class uint3x3 <<struct>> {
    + uint3x3(c0:uint3, c1:uint3, c2:uint3)
    + uint3x3(m00:uint, m01:uint, m02:uint, m10:uint, m11:uint, m12:uint, m20:uint, m21:uint, m22:uint)
    + uint3x3(v:uint)
    + uint3x3(v:bool)
    + uint3x3(v:bool3x3)
    + uint3x3(v:int)
    + uint3x3(v:int3x3)
    + uint3x3(v:float)
    + uint3x3(v:float3x3)
    + uint3x3(v:double)
    + uint3x3(v:double3x3)
    + Equals(rhs:uint3x3) : bool
    + <<override>> Equals(o:object) : bool
    + <<override>> GetHashCode() : int
    + <<override>> ToString() : string
    + ToString(format:string, formatProvider:IFormatProvider) : string
}
class math <<static>> <<partial>> {
    + {static} uint3x3(c0:uint3, c1:uint3, c2:uint3) : uint3x3
    + {static} uint3x3(m00:uint, m01:uint, m02:uint, m10:uint, m11:uint, m12:uint, m20:uint, m21:uint, m22:uint) : uint3x3
    + {static} uint3x3(v:uint) : uint3x3
    + {static} uint3x3(v:bool) : uint3x3
    + {static} uint3x3(v:bool3x3) : uint3x3
    + {static} uint3x3(v:int) : uint3x3
    + {static} uint3x3(v:int3x3) : uint3x3
    + {static} uint3x3(v:float) : uint3x3
    + {static} uint3x3(v:float3x3) : uint3x3
    + {static} uint3x3(v:double) : uint3x3
    + {static} uint3x3(v:double3x3) : uint3x3
    + {static} transpose(v:uint3x3) : uint3x3
    + {static} hash(v:uint3x3) : uint
    + {static} hashwide(v:uint3x3) : uint3
}
class "IEquatable`1"<T> {
}
IFormattable <|- - uint3x3
uint3x3 - -> "c0" uint3
uint3x3 - -> "c1" uint3
uint3x3 - -> "c2" uint3
uint3x3 o-> "identity" uint3x3
uint3x3 - -> "zero" uint3x3
class uint3x4 <<struct>> {
    + uint3x4(c0:uint3, c1:uint3, c2:uint3, c3:uint3)
    + uint3x4(m00:uint, m01:uint, m02:uint, m03:uint, m10:uint, m11:uint, m12:uint, m13:uint, m20:uint, m21:uint, m22:uint, m23:uint)
    + uint3x4(v:uint)
    + uint3x4(v:bool)
    + uint3x4(v:bool3x4)
    + uint3x4(v:int)
    + uint3x4(v:int3x4)
    + uint3x4(v:float)
    + uint3x4(v:float3x4)
    + uint3x4(v:double)
    + uint3x4(v:double3x4)
    + Equals(rhs:uint3x4) : bool
    + <<override>> Equals(o:object) : bool
    + <<override>> GetHashCode() : int
    + <<override>> ToString() : string
    + ToString(format:string, formatProvider:IFormatProvider) : string
}
class math <<static>> <<partial>> {
    + {static} uint3x4(c0:uint3, c1:uint3, c2:uint3, c3:uint3) : uint3x4
    + {static} uint3x4(m00:uint, m01:uint, m02:uint, m03:uint, m10:uint, m11:uint, m12:uint, m13:uint, m20:uint, m21:uint, m22:uint, m23:uint) : uint3x4
    + {static} uint3x4(v:uint) : uint3x4
    + {static} uint3x4(v:bool) : uint3x4
    + {static} uint3x4(v:bool3x4) : uint3x4
    + {static} uint3x4(v:int) : uint3x4
    + {static} uint3x4(v:int3x4) : uint3x4
    + {static} uint3x4(v:float) : uint3x4
    + {static} uint3x4(v:float3x4) : uint3x4
    + {static} uint3x4(v:double) : uint3x4
    + {static} uint3x4(v:double3x4) : uint3x4
    + {static} transpose(v:uint3x4) : uint4x3
    + {static} hash(v:uint3x4) : uint
    + {static} hashwide(v:uint3x4) : uint3
}
class "IEquatable`1"<T> {
}
IFormattable <|- - uint3x4
uint3x4 - -> "c0" uint3
uint3x4 - -> "c1" uint3
uint3x4 - -> "c2" uint3
uint3x4 - -> "c3" uint3
uint3x4 - -> "zero" uint3x4
class uint4 <<struct>> {
    + x : uint
    + y : uint
    + z : uint
    + w : uint
    + uint4(x:uint, y:uint, z:uint, w:uint)
    + uint4(x:uint, y:uint, zw:uint2)
    + uint4(x:uint, yz:uint2, w:uint)
    + uint4(x:uint, yzw:uint3)
    + uint4(xy:uint2, z:uint, w:uint)
    + uint4(xy:uint2, zw:uint2)
    + uint4(xyz:uint3, w:uint)
    + uint4(xyzw:uint4)
    + uint4(v:uint)
    + uint4(v:bool)
    + uint4(v:bool4)
    + uint4(v:int)
    + uint4(v:int4)
    + uint4(v:float)
    + uint4(v:float4)
    + uint4(v:double)
    + uint4(v:double4)
    + Equals(rhs:uint4) : bool
    + <<override>> Equals(o:object) : bool
    + <<override>> GetHashCode() : int
    + <<override>> ToString() : string
    + ToString(format:string, formatProvider:IFormatProvider) : string
}
class math <<static>> <<partial>> {
    + {static} uint4(x:uint, y:uint, z:uint, w:uint) : uint4
    + {static} uint4(x:uint, y:uint, zw:uint2) : uint4
    + {static} uint4(x:uint, yz:uint2, w:uint) : uint4
    + {static} uint4(x:uint, yzw:uint3) : uint4
    + {static} uint4(xy:uint2, z:uint, w:uint) : uint4
    + {static} uint4(xy:uint2, zw:uint2) : uint4
    + {static} uint4(xyz:uint3, w:uint) : uint4
    + {static} uint4(xyzw:uint4) : uint4
    + {static} uint4(v:uint) : uint4
    + {static} uint4(v:bool) : uint4
    + {static} uint4(v:bool4) : uint4
    + {static} uint4(v:int) : uint4
    + {static} uint4(v:int4) : uint4
    + {static} uint4(v:float) : uint4
    + {static} uint4(v:float4) : uint4
    + {static} uint4(v:double) : uint4
    + {static} uint4(v:double4) : uint4
    + {static} hash(v:uint4) : uint
    + {static} hashwide(v:uint4) : uint4
    + {static} shuffle(left:uint4, right:uint4, x:ShuffleComponent) : uint
    + {static} shuffle(left:uint4, right:uint4, x:ShuffleComponent, y:ShuffleComponent) : uint2
    + {static} shuffle(left:uint4, right:uint4, x:ShuffleComponent, y:ShuffleComponent, z:ShuffleComponent) : uint3
    + {static} shuffle(left:uint4, right:uint4, x:ShuffleComponent, y:ShuffleComponent, z:ShuffleComponent, w:ShuffleComponent) : uint4
}
class "IEquatable`1"<T> {
}
class DebuggerProxy <<sealed>> {
    + x : uint
    + y : uint
    + z : uint
    + w : uint
    + DebuggerProxy(v:uint4)
}
IFormattable <|- - uint4
uint4 - -> "zero" uint4
uint4 - -> "xxxx" uint4
uint4 - -> "xxxy" uint4
uint4 - -> "xxxz" uint4
uint4 - -> "xxxw" uint4
uint4 - -> "xxyx" uint4
uint4 - -> "xxyy" uint4
uint4 - -> "xxyz" uint4
uint4 - -> "xxyw" uint4
uint4 - -> "xxzx" uint4
uint4 - -> "xxzy" uint4
uint4 - -> "xxzz" uint4
uint4 - -> "xxzw" uint4
uint4 - -> "xxwx" uint4
uint4 - -> "xxwy" uint4
uint4 - -> "xxwz" uint4
uint4 - -> "xxww" uint4
uint4 - -> "xyxx" uint4
uint4 - -> "xyxy" uint4
uint4 - -> "xyxz" uint4
uint4 - -> "xyxw" uint4
uint4 - -> "xyyx" uint4
uint4 - -> "xyyy" uint4
uint4 - -> "xyyz" uint4
uint4 - -> "xyyw" uint4
uint4 - -> "xyzx" uint4
uint4 - -> "xyzy" uint4
uint4 - -> "xyzz" uint4
uint4 - -> "xyzw" uint4
uint4 - -> "xywx" uint4
uint4 - -> "xywy" uint4
uint4 - -> "xywz" uint4
uint4 - -> "xyww" uint4
uint4 - -> "xzxx" uint4
uint4 - -> "xzxy" uint4
uint4 - -> "xzxz" uint4
uint4 - -> "xzxw" uint4
uint4 - -> "xzyx" uint4
uint4 - -> "xzyy" uint4
uint4 - -> "xzyz" uint4
uint4 - -> "xzyw" uint4
uint4 - -> "xzzx" uint4
uint4 - -> "xzzy" uint4
uint4 - -> "xzzz" uint4
uint4 - -> "xzzw" uint4
uint4 - -> "xzwx" uint4
uint4 - -> "xzwy" uint4
uint4 - -> "xzwz" uint4
uint4 - -> "xzww" uint4
uint4 - -> "xwxx" uint4
uint4 - -> "xwxy" uint4
uint4 - -> "xwxz" uint4
uint4 - -> "xwxw" uint4
uint4 - -> "xwyx" uint4
uint4 - -> "xwyy" uint4
uint4 - -> "xwyz" uint4
uint4 - -> "xwyw" uint4
uint4 - -> "xwzx" uint4
uint4 - -> "xwzy" uint4
uint4 - -> "xwzz" uint4
uint4 - -> "xwzw" uint4
uint4 - -> "xwwx" uint4
uint4 - -> "xwwy" uint4
uint4 - -> "xwwz" uint4
uint4 - -> "xwww" uint4
uint4 - -> "yxxx" uint4
uint4 - -> "yxxy" uint4
uint4 - -> "yxxz" uint4
uint4 - -> "yxxw" uint4
uint4 - -> "yxyx" uint4
uint4 - -> "yxyy" uint4
uint4 - -> "yxyz" uint4
uint4 - -> "yxyw" uint4
uint4 - -> "yxzx" uint4
uint4 - -> "yxzy" uint4
uint4 - -> "yxzz" uint4
uint4 - -> "yxzw" uint4
uint4 - -> "yxwx" uint4
uint4 - -> "yxwy" uint4
uint4 - -> "yxwz" uint4
uint4 - -> "yxww" uint4
uint4 - -> "yyxx" uint4
uint4 - -> "yyxy" uint4
uint4 - -> "yyxz" uint4
uint4 - -> "yyxw" uint4
uint4 - -> "yyyx" uint4
uint4 - -> "yyyy" uint4
uint4 - -> "yyyz" uint4
uint4 - -> "yyyw" uint4
uint4 - -> "yyzx" uint4
uint4 - -> "yyzy" uint4
uint4 - -> "yyzz" uint4
uint4 - -> "yyzw" uint4
uint4 - -> "yywx" uint4
uint4 - -> "yywy" uint4
uint4 - -> "yywz" uint4
uint4 - -> "yyww" uint4
uint4 - -> "yzxx" uint4
uint4 - -> "yzxy" uint4
uint4 - -> "yzxz" uint4
uint4 - -> "yzxw" uint4
uint4 - -> "yzyx" uint4
uint4 - -> "yzyy" uint4
uint4 - -> "yzyz" uint4
uint4 - -> "yzyw" uint4
uint4 - -> "yzzx" uint4
uint4 - -> "yzzy" uint4
uint4 - -> "yzzz" uint4
uint4 - -> "yzzw" uint4
uint4 - -> "yzwx" uint4
uint4 - -> "yzwy" uint4
uint4 - -> "yzwz" uint4
uint4 - -> "yzww" uint4
uint4 - -> "ywxx" uint4
uint4 - -> "ywxy" uint4
uint4 - -> "ywxz" uint4
uint4 - -> "ywxw" uint4
uint4 - -> "ywyx" uint4
uint4 - -> "ywyy" uint4
uint4 - -> "ywyz" uint4
uint4 - -> "ywyw" uint4
uint4 - -> "ywzx" uint4
uint4 - -> "ywzy" uint4
uint4 - -> "ywzz" uint4
uint4 - -> "ywzw" uint4
uint4 - -> "ywwx" uint4
uint4 - -> "ywwy" uint4
uint4 - -> "ywwz" uint4
uint4 - -> "ywww" uint4
uint4 - -> "zxxx" uint4
uint4 - -> "zxxy" uint4
uint4 - -> "zxxz" uint4
uint4 - -> "zxxw" uint4
uint4 - -> "zxyx" uint4
uint4 - -> "zxyy" uint4
uint4 - -> "zxyz" uint4
uint4 - -> "zxyw" uint4
uint4 - -> "zxzx" uint4
uint4 - -> "zxzy" uint4
uint4 - -> "zxzz" uint4
uint4 - -> "zxzw" uint4
uint4 - -> "zxwx" uint4
uint4 - -> "zxwy" uint4
uint4 - -> "zxwz" uint4
uint4 - -> "zxww" uint4
uint4 - -> "zyxx" uint4
uint4 - -> "zyxy" uint4
uint4 - -> "zyxz" uint4
uint4 - -> "zyxw" uint4
uint4 - -> "zyyx" uint4
uint4 - -> "zyyy" uint4
uint4 - -> "zyyz" uint4
uint4 - -> "zyyw" uint4
uint4 - -> "zyzx" uint4
uint4 - -> "zyzy" uint4
uint4 - -> "zyzz" uint4
uint4 - -> "zyzw" uint4
uint4 - -> "zywx" uint4
uint4 - -> "zywy" uint4
uint4 - -> "zywz" uint4
uint4 - -> "zyww" uint4
uint4 - -> "zzxx" uint4
uint4 - -> "zzxy" uint4
uint4 - -> "zzxz" uint4
uint4 - -> "zzxw" uint4
uint4 - -> "zzyx" uint4
uint4 - -> "zzyy" uint4
uint4 - -> "zzyz" uint4
uint4 - -> "zzyw" uint4
uint4 - -> "zzzx" uint4
uint4 - -> "zzzy" uint4
uint4 - -> "zzzz" uint4
uint4 - -> "zzzw" uint4
uint4 - -> "zzwx" uint4
uint4 - -> "zzwy" uint4
uint4 - -> "zzwz" uint4
uint4 - -> "zzww" uint4
uint4 - -> "zwxx" uint4
uint4 - -> "zwxy" uint4
uint4 - -> "zwxz" uint4
uint4 - -> "zwxw" uint4
uint4 - -> "zwyx" uint4
uint4 - -> "zwyy" uint4
uint4 - -> "zwyz" uint4
uint4 - -> "zwyw" uint4
uint4 - -> "zwzx" uint4
uint4 - -> "zwzy" uint4
uint4 - -> "zwzz" uint4
uint4 - -> "zwzw" uint4
uint4 - -> "zwwx" uint4
uint4 - -> "zwwy" uint4
uint4 - -> "zwwz" uint4
uint4 - -> "zwww" uint4
uint4 - -> "wxxx" uint4
uint4 - -> "wxxy" uint4
uint4 - -> "wxxz" uint4
uint4 - -> "wxxw" uint4
uint4 - -> "wxyx" uint4
uint4 - -> "wxyy" uint4
uint4 - -> "wxyz" uint4
uint4 - -> "wxyw" uint4
uint4 - -> "wxzx" uint4
uint4 - -> "wxzy" uint4
uint4 - -> "wxzz" uint4
uint4 - -> "wxzw" uint4
uint4 - -> "wxwx" uint4
uint4 - -> "wxwy" uint4
uint4 - -> "wxwz" uint4
uint4 - -> "wxww" uint4
uint4 - -> "wyxx" uint4
uint4 - -> "wyxy" uint4
uint4 - -> "wyxz" uint4
uint4 - -> "wyxw" uint4
uint4 - -> "wyyx" uint4
uint4 - -> "wyyy" uint4
uint4 - -> "wyyz" uint4
uint4 - -> "wyyw" uint4
uint4 - -> "wyzx" uint4
uint4 - -> "wyzy" uint4
uint4 - -> "wyzz" uint4
uint4 - -> "wyzw" uint4
uint4 - -> "wywx" uint4
uint4 - -> "wywy" uint4
uint4 - -> "wywz" uint4
uint4 - -> "wyww" uint4
uint4 - -> "wzxx" uint4
uint4 - -> "wzxy" uint4
uint4 - -> "wzxz" uint4
uint4 - -> "wzxw" uint4
uint4 - -> "wzyx" uint4
uint4 - -> "wzyy" uint4
uint4 - -> "wzyz" uint4
uint4 - -> "wzyw" uint4
uint4 - -> "wzzx" uint4
uint4 - -> "wzzy" uint4
uint4 - -> "wzzz" uint4
uint4 - -> "wzzw" uint4
uint4 - -> "wzwx" uint4
uint4 - -> "wzwy" uint4
uint4 - -> "wzwz" uint4
uint4 - -> "wzww" uint4
uint4 - -> "wwxx" uint4
uint4 - -> "wwxy" uint4
uint4 - -> "wwxz" uint4
uint4 - -> "wwxw" uint4
uint4 - -> "wwyx" uint4
uint4 - -> "wwyy" uint4
uint4 - -> "wwyz" uint4
uint4 - -> "wwyw" uint4
uint4 - -> "wwzx" uint4
uint4 - -> "wwzy" uint4
uint4 - -> "wwzz" uint4
uint4 - -> "wwzw" uint4
uint4 - -> "wwwx" uint4
uint4 - -> "wwwy" uint4
uint4 - -> "wwwz" uint4
uint4 - -> "wwww" uint4
uint4 - -> "xxx" uint3
uint4 - -> "xxy" uint3
uint4 - -> "xxz" uint3
uint4 - -> "xxw" uint3
uint4 - -> "xyx" uint3
uint4 - -> "xyy" uint3
uint4 - -> "xyz" uint3
uint4 - -> "xyw" uint3
uint4 - -> "xzx" uint3
uint4 - -> "xzy" uint3
uint4 - -> "xzz" uint3
uint4 - -> "xzw" uint3
uint4 - -> "xwx" uint3
uint4 - -> "xwy" uint3
uint4 - -> "xwz" uint3
uint4 - -> "xww" uint3
uint4 - -> "yxx" uint3
uint4 - -> "yxy" uint3
uint4 - -> "yxz" uint3
uint4 - -> "yxw" uint3
uint4 - -> "yyx" uint3
uint4 - -> "yyy" uint3
uint4 - -> "yyz" uint3
uint4 - -> "yyw" uint3
uint4 - -> "yzx" uint3
uint4 - -> "yzy" uint3
uint4 - -> "yzz" uint3
uint4 - -> "yzw" uint3
uint4 - -> "ywx" uint3
uint4 - -> "ywy" uint3
uint4 - -> "ywz" uint3
uint4 - -> "yww" uint3
uint4 - -> "zxx" uint3
uint4 - -> "zxy" uint3
uint4 - -> "zxz" uint3
uint4 - -> "zxw" uint3
uint4 - -> "zyx" uint3
uint4 - -> "zyy" uint3
uint4 - -> "zyz" uint3
uint4 - -> "zyw" uint3
uint4 - -> "zzx" uint3
uint4 - -> "zzy" uint3
uint4 - -> "zzz" uint3
uint4 - -> "zzw" uint3
uint4 - -> "zwx" uint3
uint4 - -> "zwy" uint3
uint4 - -> "zwz" uint3
uint4 - -> "zww" uint3
uint4 - -> "wxx" uint3
uint4 - -> "wxy" uint3
uint4 - -> "wxz" uint3
uint4 - -> "wxw" uint3
uint4 - -> "wyx" uint3
uint4 - -> "wyy" uint3
uint4 - -> "wyz" uint3
uint4 - -> "wyw" uint3
uint4 - -> "wzx" uint3
uint4 - -> "wzy" uint3
uint4 - -> "wzz" uint3
uint4 - -> "wzw" uint3
uint4 - -> "wwx" uint3
uint4 - -> "wwy" uint3
uint4 - -> "wwz" uint3
uint4 - -> "www" uint3
uint4 - -> "xx" uint2
uint4 - -> "xy" uint2
uint4 - -> "xz" uint2
uint4 - -> "xw" uint2
uint4 - -> "yx" uint2
uint4 - -> "yy" uint2
uint4 - -> "yz" uint2
uint4 - -> "yw" uint2
uint4 - -> "zx" uint2
uint4 - -> "zy" uint2
uint4 - -> "zz" uint2
uint4 - -> "zw" uint2
uint4 - -> "wx" uint2
uint4 - -> "wy" uint2
uint4 - -> "wz" uint2
uint4 - -> "ww" uint2
uint4 +- - DebuggerProxy
class uint4x2 <<struct>> {
    + uint4x2(c0:uint4, c1:uint4)
    + uint4x2(m00:uint, m01:uint, m10:uint, m11:uint, m20:uint, m21:uint, m30:uint, m31:uint)
    + uint4x2(v:uint)
    + uint4x2(v:bool)
    + uint4x2(v:bool4x2)
    + uint4x2(v:int)
    + uint4x2(v:int4x2)
    + uint4x2(v:float)
    + uint4x2(v:float4x2)
    + uint4x2(v:double)
    + uint4x2(v:double4x2)
    + Equals(rhs:uint4x2) : bool
    + <<override>> Equals(o:object) : bool
    + <<override>> GetHashCode() : int
    + <<override>> ToString() : string
    + ToString(format:string, formatProvider:IFormatProvider) : string
}
class math <<static>> <<partial>> {
    + {static} uint4x2(c0:uint4, c1:uint4) : uint4x2
    + {static} uint4x2(m00:uint, m01:uint, m10:uint, m11:uint, m20:uint, m21:uint, m30:uint, m31:uint) : uint4x2
    + {static} uint4x2(v:uint) : uint4x2
    + {static} uint4x2(v:bool) : uint4x2
    + {static} uint4x2(v:bool4x2) : uint4x2
    + {static} uint4x2(v:int) : uint4x2
    + {static} uint4x2(v:int4x2) : uint4x2
    + {static} uint4x2(v:float) : uint4x2
    + {static} uint4x2(v:float4x2) : uint4x2
    + {static} uint4x2(v:double) : uint4x2
    + {static} uint4x2(v:double4x2) : uint4x2
    + {static} transpose(v:uint4x2) : uint2x4
    + {static} hash(v:uint4x2) : uint
    + {static} hashwide(v:uint4x2) : uint4
}
class "IEquatable`1"<T> {
}
IFormattable <|- - uint4x2
uint4x2 - -> "c0" uint4
uint4x2 - -> "c1" uint4
uint4x2 - -> "zero" uint4x2
class uint4x3 <<struct>> {
    + uint4x3(c0:uint4, c1:uint4, c2:uint4)
    + uint4x3(m00:uint, m01:uint, m02:uint, m10:uint, m11:uint, m12:uint, m20:uint, m21:uint, m22:uint, m30:uint, m31:uint, m32:uint)
    + uint4x3(v:uint)
    + uint4x3(v:bool)
    + uint4x3(v:bool4x3)
    + uint4x3(v:int)
    + uint4x3(v:int4x3)
    + uint4x3(v:float)
    + uint4x3(v:float4x3)
    + uint4x3(v:double)
    + uint4x3(v:double4x3)
    + Equals(rhs:uint4x3) : bool
    + <<override>> Equals(o:object) : bool
    + <<override>> GetHashCode() : int
    + <<override>> ToString() : string
    + ToString(format:string, formatProvider:IFormatProvider) : string
}
class math <<static>> <<partial>> {
    + {static} uint4x3(c0:uint4, c1:uint4, c2:uint4) : uint4x3
    + {static} uint4x3(m00:uint, m01:uint, m02:uint, m10:uint, m11:uint, m12:uint, m20:uint, m21:uint, m22:uint, m30:uint, m31:uint, m32:uint) : uint4x3
    + {static} uint4x3(v:uint) : uint4x3
    + {static} uint4x3(v:bool) : uint4x3
    + {static} uint4x3(v:bool4x3) : uint4x3
    + {static} uint4x3(v:int) : uint4x3
    + {static} uint4x3(v:int4x3) : uint4x3
    + {static} uint4x3(v:float) : uint4x3
    + {static} uint4x3(v:float4x3) : uint4x3
    + {static} uint4x3(v:double) : uint4x3
    + {static} uint4x3(v:double4x3) : uint4x3
    + {static} transpose(v:uint4x3) : uint3x4
    + {static} hash(v:uint4x3) : uint
    + {static} hashwide(v:uint4x3) : uint4
}
class "IEquatable`1"<T> {
}
IFormattable <|- - uint4x3
uint4x3 - -> "c0" uint4
uint4x3 - -> "c1" uint4
uint4x3 - -> "c2" uint4
uint4x3 - -> "zero" uint4x3
class uint4x4 <<struct>> {
    + uint4x4(c0:uint4, c1:uint4, c2:uint4, c3:uint4)
    + uint4x4(m00:uint, m01:uint, m02:uint, m03:uint, m10:uint, m11:uint, m12:uint, m13:uint, m20:uint, m21:uint, m22:uint, m23:uint, m30:uint, m31:uint, m32:uint, m33:uint)
    + uint4x4(v:uint)
    + uint4x4(v:bool)
    + uint4x4(v:bool4x4)
    + uint4x4(v:int)
    + uint4x4(v:int4x4)
    + uint4x4(v:float)
    + uint4x4(v:float4x4)
    + uint4x4(v:double)
    + uint4x4(v:double4x4)
    + Equals(rhs:uint4x4) : bool
    + <<override>> Equals(o:object) : bool
    + <<override>> GetHashCode() : int
    + <<override>> ToString() : string
    + ToString(format:string, formatProvider:IFormatProvider) : string
}
class math <<static>> <<partial>> {
    + {static} uint4x4(c0:uint4, c1:uint4, c2:uint4, c3:uint4) : uint4x4
    + {static} uint4x4(m00:uint, m01:uint, m02:uint, m03:uint, m10:uint, m11:uint, m12:uint, m13:uint, m20:uint, m21:uint, m22:uint, m23:uint, m30:uint, m31:uint, m32:uint, m33:uint) : uint4x4
    + {static} uint4x4(v:uint) : uint4x4
    + {static} uint4x4(v:bool) : uint4x4
    + {static} uint4x4(v:bool4x4) : uint4x4
    + {static} uint4x4(v:int) : uint4x4
    + {static} uint4x4(v:int4x4) : uint4x4
    + {static} uint4x4(v:float) : uint4x4
    + {static} uint4x4(v:float4x4) : uint4x4
    + {static} uint4x4(v:double) : uint4x4
    + {static} uint4x4(v:double4x4) : uint4x4
    + {static} transpose(v:uint4x4) : uint4x4
    + {static} hash(v:uint4x4) : uint
    + {static} hashwide(v:uint4x4) : uint4
}
class "IEquatable`1"<T> {
}
IFormattable <|- - uint4x4
uint4x4 - -> "c0" uint4
uint4x4 - -> "c1" uint4
uint4x4 - -> "c2" uint4
uint4x4 - -> "c3" uint4
uint4x4 o-> "identity" uint4x4
uint4x4 - -> "zero" uint4x4
class MatrixDrawer {
    + <<override>> CanCacheInspectorGUI(property:SerializedProperty) : bool
    + <<override>> GetPropertyHeight(property:SerializedProperty, label:GUIContent) : float
    + <<override>> OnGUI(position:Rect, property:SerializedProperty, label:GUIContent) : void
}
PropertyDrawer <|- - MatrixDrawer
class PostNormalizedVectorDrawer {
    + <<override>> GetPropertyHeight(property:SerializedProperty, label:GUIContent) : float
    + <<override>> OnGUI(position:Rect, property:SerializedProperty, label:GUIContent) : void
}
class Content <<static>> {
    + {static} <<readonly>> tooltip : string
}
class VectorPropertyGUIData {
    + <<readonly>> Valid : bool
    + VectorPropertyGUIData(property:SerializedProperty)
    + UpdatePreNormalizedValues() : void
    + ApplyPreNormalizedValues() : void
    + UnapplyPreNormalizedValues() : void
    + PostNormalize(normalize:Func<double4, double4>) : void
    + RebuildIfDirty() : void
}
PrimitiveVectorDrawer <|- - PostNormalizedVectorDrawer
PostNormalizedVectorDrawer +- - Content
PostNormalizedVectorDrawer +- - VectorPropertyGUIData
class PrimitiveVectorDrawer {
    + <<override>> CanCacheInspectorGUI(property:SerializedProperty) : bool
    + <<override>> GetPropertyHeight(property:SerializedProperty, label:GUIContent) : float
    + <<override>> OnGUI(position:Rect, property:SerializedProperty, label:GUIContent) : void
}
class EditorGUICopy {
    + {static} MultiPropertyField(position:Rect, subLabels:GUIContent[], valuesIterator:SerializedProperty, label:GUIContent) : void
}
class Content <<static>> {
    + {static} <<readonly>> doNotNormalizeCompatibility : string
    + {static} <<readonly>> doNotNormalizeTooltip : string
}
enum PropertyVisibility {
    All,
    OnlyVisible,
}
PropertyDrawer <|- - PrimitiveVectorDrawer
PrimitiveVectorDrawer +- - Content
EditorGUICopy +- - PropertyVisibility
class QuaternionDrawer {
}
PostNormalizedVectorDrawer <|- - QuaternionDrawer
class RecorderBindings {
    + SetBindingValue(id:string, value:UnityObject) : void
    + GetBindingValue(id:string) : UnityObject
    + HasBindingValue(id:string) : bool
    + RemoveBinding(id:string) : void
    + IsEmpty() : bool
    + DuplicateBinding(src:string, dst:string) : void
}
class PropertyObjects {
}
class "SerializedDictionary`2"<T1,T2> {
}
MonoBehaviour <|- - RecorderBindings
RecorderBindings +- - PropertyObjects
"SerializedDictionary`2" "<string,UnityObject>" <|- - PropertyObjects
class "SerializedDictionary`2"<TKey,TValue> {
    + OnBeforeSerialize() : void
    + OnAfterDeserialize() : void
}
class "Dictionary`2"<T1,T2> {
}
ISerializationCallbackReceiver <|- - "SerializedDictionary`2"
"SerializedDictionary`2" - -> "dictionary<TKey,TValue>" "Dictionary`2"
class SetAdditionalPropertiesVisibilityAttribute <<sealed>> {
}
class AdditionalPropertiesPreferences {
    + PreferenceGUI() : void
}
class Styles {
}
class "List`1"<T> {
}
class Keys <<static>> {
}
Attribute <|- - SetAdditionalPropertiesVisibilityAttribute
ICoreRenderPipelinePreferencesProvider <|- - AdditionalPropertiesPreferences
AdditionalPropertiesPreferences - -> "keywords<string>" "List`1"
AdditionalPropertiesPreferences o-> "header" GUIContent
AdditionalPropertiesPreferences +- - Styles
Styles o-> "additionalPropertiesLabel" GUIContent
AdditionalPropertiesPreferences +- - Keys
class "AdditionalPropertiesState`2"<TState,TTarget> {
    + AdditionalPropertiesState(defaultValue:TState, prefix:string)
    + GetAdditionalPropertiesState(mask:TState) : bool
    + SetAdditionalPropertiesState(mask:TState, value:bool) : void
    + ShowAll() : void
    + HideAll() : void
    + RegisterEditor(editor:Editor) : void
    + UnregisterEditor(editor:Editor) : void
}
class CameraEditorUtils <<static>> {
    + {static} DrawCameraSceneViewOverlay(target:Object, sceneView:SceneView, previewCameraGetter:GetPreviewCamera) : void
    + {static} IsViewPortRectValidToRender(normalizedViewPortRect:Rect) : bool
}
CameraEditorUtils - -> "GUITextureBlit2SRGBMaterial" Material
class RemoveComponentUtils <<static>> {
    + {static} ComponentDependencies(component:Component) : IEnumerable<Component>
    + {static} CanRemoveComponent(component:Component, dependencies:IEnumerable<Component>) : bool
}
class ContextualMenuDispatcher <<static>> {
}
interface "IRemoveAdditionalDataContextualMenu`1"<T> {
}
class "RemoveAdditionalDataContextualMenu`1"<T> {
    + RemoveComponent(component:T, dependencies:IEnumerable<Component>) : void
}
enum FoldoutOption {
    None= 0,
    Indent= 1 << 0,
    Boxed= 1 << 2,
    SubFoldout= 1 << 3,
    NoSpaceAtEnd= 1 << 4,
}
enum GroupOption {
    None= 0,
    Indent= 1 << 0,
}
class "CoreEditorDrawer`1"<TData> <<static>> {
    + {static} Conditional(enabler:Enabler, contentDrawers:IDrawer[]) : IDrawer
    + {static} Conditional(enabler:Enabler, contentDrawers:ActionDrawer[]) : IDrawer
    + {static} TernaryConditional(@switch:Enabler, drawIfTrue:IDrawer, drawIfFalse:IDrawer) : IDrawer
    + {static} TernaryConditional(@switch:Enabler, drawIfTrue:ActionDrawer, drawIfFalse:ActionDrawer) : IDrawer
    + {static} Group(contentDrawers:IDrawer[]) : IDrawer
    + {static} Group(contentDrawers:ActionDrawer[]) : IDrawer
    + {static} Group(labelWidth:float, contentDrawers:IDrawer[]) : IDrawer
    + {static} Group(header:GUIContent, contentDrawers:IDrawer[]) : IDrawer
    + {static} Group(labelWidth:float, contentDrawers:ActionDrawer[]) : IDrawer
    + {static} Group(header:GUIContent, contentDrawers:ActionDrawer[]) : IDrawer
    + {static} Group(options:GroupOption, contentDrawers:IDrawer[]) : IDrawer
    + {static} Group(options:GroupOption, contentDrawers:ActionDrawer[]) : IDrawer
    + {static} Group(labelWidth:float, options:GroupOption, contentDrawers:IDrawer[]) : IDrawer
    + {static} Group(header:GUIContent, options:GroupOption, contentDrawers:IDrawer[]) : IDrawer
    + {static} Group(labelWidth:float, options:GroupOption, contentDrawers:ActionDrawer[]) : IDrawer
    + {static} Group(header:GUIContent, options:GroupOption, contentDrawers:ActionDrawer[]) : IDrawer
    + {static} Select(dataSelect:DataSelect<T2Data>, otherDrawers:CoreEditorDrawer<T2Data>.IDrawer[]) : IDrawer
    + {static} Select(dataSelect:DataSelect<T2Data>, otherDrawers:CoreEditorDrawer<T2Data>.ActionDrawer[]) : IDrawer
    + {static} FoldoutGroup(title:string, mask:TEnum, state:ExpandedState<TEnum, TState>, contentDrawers:IDrawer[]) : IDrawer
    + {static} FoldoutGroup(title:string, mask:TEnum, state:ExpandedState<TEnum, TState>, contentDrawers:ActionDrawer[]) : IDrawer
    + {static} FoldoutGroup(title:string, mask:TEnum, state:ExpandedState<TEnum, TState>, options:FoldoutOption, contentDrawers:IDrawer[]) : IDrawer
    + {static} FoldoutGroup(title:string, mask:TEnum, state:ExpandedState<TEnum, TState>, options:FoldoutOption, contentDrawers:ActionDrawer[]) : IDrawer
    + {static} FoldoutGroup(title:GUIContent, mask:TEnum, state:ExpandedState<TEnum, TState>, contentDrawers:IDrawer[]) : IDrawer
    + {static} FoldoutGroup(title:GUIContent, mask:TEnum, state:ExpandedState<TEnum, TState>, contentDrawers:ActionDrawer[]) : IDrawer
    + {static} FoldoutGroup(title:GUIContent, mask:TEnum, state:ExpandedState<TEnum, TState>, options:FoldoutOption, contentDrawers:IDrawer[]) : IDrawer
    + {static} FoldoutGroup(title:GUIContent, mask:TEnum, state:ExpandedState<TEnum, TState>, options:FoldoutOption, contentDrawers:ActionDrawer[]) : IDrawer
    + {static} AdvancedFoldoutGroup(foldoutTitle:GUIContent, foldoutMask:TEnum, foldoutState:ExpandedState<TEnum, TState>, isAdvanced:Enabler, switchAdvanced:SwitchEnabler, normalContent:IDrawer, advancedContent:IDrawer, options:FoldoutOption) : IDrawer
    + {static} AdvancedFoldoutGroup(foldoutTitle:GUIContent, foldoutMask:TEnum, foldoutState:ExpandedState<TEnum, TState>, isAdvanced:Enabler, switchAdvanced:SwitchEnabler, normalContent:ActionDrawer, advancedContent:IDrawer, options:FoldoutOption) : IDrawer
    + {static} AdvancedFoldoutGroup(foldoutTitle:GUIContent, foldoutMask:TEnum, foldoutState:ExpandedState<TEnum, TState>, isAdvanced:Enabler, switchAdvanced:SwitchEnabler, normalContent:IDrawer, advancedContent:ActionDrawer, options:FoldoutOption) : IDrawer
    + {static} AdvancedFoldoutGroup(foldoutTitle:GUIContent, foldoutMask:TEnum, foldoutState:ExpandedState<TEnum, TState>, isAdvanced:Enabler, switchAdvanced:SwitchEnabler, normalContent:ActionDrawer, advancedContent:ActionDrawer, options:FoldoutOption) : IDrawer
    + {static} AdditionalPropertiesFoldoutGroup(foldoutTitle:GUIContent, foldoutMask:TEnum, foldoutState:ExpandedState<TEnum, TState>, additionalPropertiesMask:TAPEnum, additionalPropertiesState:AdditionalPropertiesState<TAPEnum, TAPState>, normalContent:IDrawer, additionalContent:IDrawer, options:FoldoutOption) : IDrawer
    + {static} AdditionalPropertiesFoldoutGroup(foldoutTitle:GUIContent, foldoutMask:TEnum, foldoutState:ExpandedState<TEnum, TState>, additionalPropertiesMask:TAPEnum, additionalPropertiesState:AdditionalPropertiesState<TAPEnum, TAPState>, normalContent:ActionDrawer, additionalContent:IDrawer, options:FoldoutOption) : IDrawer
    + {static} AdditionalPropertiesFoldoutGroup(foldoutTitle:GUIContent, foldoutMask:TEnum, foldoutState:ExpandedState<TEnum, TState>, additionalPropertiesMask:TAPEnum, additionalPropertiesState:AdditionalPropertiesState<TAPEnum, TAPState>, normalContent:IDrawer, additionalContent:ActionDrawer, options:FoldoutOption) : IDrawer
    + {static} AdditionalPropertiesFoldoutGroup(foldoutTitle:GUIContent, foldoutMask:TEnum, foldoutState:ExpandedState<TEnum, TState>, additionalPropertiesMask:TAPEnum, additionalPropertiesState:AdditionalPropertiesState<TAPEnum, TAPState>, normalContent:ActionDrawer, additionalContent:ActionDrawer, options:FoldoutOption) : IDrawer
}
class CoreEditorDrawersExtensions <<static>> {
    + {static} Draw(drawers:IEnumerable<CoreEditorDrawer<TData>.IDrawer>, data:TData, owner:Editor) : void
}
interface IDrawer {
}
class ConditionalDrawerInternal {
    + ConditionalDrawerInternal(enabler:Enabler, actionDrawers:ActionDrawer[])
}
class ConditionalDrawerWithAdditionalPropertiesInternal {
    + ConditionalDrawerWithAdditionalPropertiesInternal(enabler:Enabler, anim:AnimFloat, actionDrawers:ActionDrawer[])
}
class TernaryConditionalDrawerInternal {
    + TernaryConditionalDrawerInternal(@switch:Enabler, drawIfTrue:ActionDrawer, drawIfFalse:ActionDrawer)
}
class GroupDrawerInternal {
    + GroupDrawerInternal(labelWidth:float, header:GUIContent, options:GroupOption, actionDrawers:ActionDrawer[])
}
class "FoldoutGroupDrawerInternal`2"<TEnum,TState> {
    + FoldoutGroupDrawerInternal(title:GUIContent, mask:TEnum, state:ExpandedState<TEnum, TState>, enabler:Enabler, switchEnabler:SwitchEnabler, options:FoldoutOption, actionDrawers:ActionDrawer[])
}
class "SelectDrawerInternal`1"<T2Data> {
    + SelectDrawerInternal(dataSelect:DataSelect<T2Data>, otherDrawers:CoreEditorDrawer<T2Data>.ActionDrawer[])
}
"CoreEditorDrawer`1" o-> "space" IDrawer
"CoreEditorDrawer`1" o-> "noop" IDrawer
"CoreEditorDrawer`1" +- - IDrawer
"CoreEditorDrawer`1" +- - ConditionalDrawerInternal
IDrawer <|- - ConditionalDrawerInternal
"CoreEditorDrawer`1" +- - ConditionalDrawerWithAdditionalPropertiesInternal
IDrawer <|- - ConditionalDrawerWithAdditionalPropertiesInternal
"CoreEditorDrawer`1" +- - TernaryConditionalDrawerInternal
IDrawer <|- - TernaryConditionalDrawerInternal
"CoreEditorDrawer`1" +- - GroupDrawerInternal
IDrawer <|- - GroupDrawerInternal
"CoreEditorDrawer`1" +- - "FoldoutGroupDrawerInternal`2"
IDrawer <|- - "FoldoutGroupDrawerInternal`2"
"CoreEditorDrawer`1" +- - "SelectDrawerInternal`1"
IDrawer <|- - "SelectDrawerInternal`1"
class CoreEditorConstants <<static>> {
    + {static} <<readonly>> additionalPropertiesHightLightSpeed : float = 0.3f
    + {static} standardHorizontalSpacing : float <<get>>
}
class CoreEditorStyles <<static>> {
}
CoreEditorStyles - -> "smallTickbox" GUIStyle
CoreEditorStyles - -> "smallMixedTickbox" GUIStyle
CoreEditorStyles - -> "miniLabelButton" GUIStyle
CoreEditorStyles - -> "contextMenuStyle" GUIStyle
CoreEditorStyles - -> "additionalPropertiesHighlightStyle" GUIStyle
CoreEditorStyles - -> "iconHelpStyle" GUIStyle
CoreEditorStyles - -> "sectionHeaderStyle" GUIStyle
CoreEditorStyles - -> "subSectionHeaderStyle" GUIStyle
CoreEditorStyles - -> "redTexture" Texture2D
CoreEditorStyles - -> "greenTexture" Texture2D
CoreEditorStyles - -> "blueTexture" Texture2D
CoreEditorStyles - -> "paneOptionsIcon" Texture2D
CoreEditorStyles - -> "iconWarn" Texture2D
CoreEditorStyles - -> "iconHelp" Texture2D
CoreEditorStyles - -> "iconFail" Texture2D
CoreEditorStyles - -> "iconSuccess" Texture2D
CoreEditorStyles - -> "iconPending" Texture2D
CoreEditorStyles - -> "globalSettingsIcon" Texture2D
CoreEditorStyles - -> "backgroundColor" Color
CoreEditorStyles - -> "backgroundHighlightColor" Color
CoreEditorStyles - -> "contextMenuIcon" GUIContent
CoreEditorStyles o-> "resetButtonLabel" GUIContent
CoreEditorStyles o-> "resetAllButtonLabel" GUIContent
CoreEditorStyles o-> "empty" GUIContent
class CoreEditorUtils <<static>> {
    + {static} FindProperty(expr:Expression<Func<T, TValue>>) : string
    + {static} CreateColoredTexture2D(color:Color, textureName:string) : Texture2D
    + {static} DrawFixMeBox(text:string, action:Action) : void
    + {static} DrawFixMeBox(message:GUIContent, buttonLabel:string, action:Action) : void
    + {static} DrawFixMeBox(message:GUIContent, action:Action) : void
    + {static} DrawFixMeBox(text:string, messageType:MessageType, action:Action) : void
    + {static} DrawMultipleFields(label:string, ppts:SerializedProperty[], labels:GUIContent[]) : void
    + {static} DrawEnumPopup(rect:Rect, label:GUIContent, serializedProperty:SerializedProperty) : void
    + {static} DrawMultipleFields(label:GUIContent, ppts:SerializedProperty[], labels:GUIContent[]) : void
    + {static} DrawMultipleFields(label:GUIContent, labels:GUIContent[], values:T[]) : void
    + {static} DrawSplitter(isBoxed:bool) : void
    + {static} DrawHeader(title:string) : void
    + {static} DrawHeader(title:GUIContent) : void
    + {static} DrawHeaderFoldout(title:string, state:bool, isBoxed:bool, hasMoreOptions:Func<bool>, toggleMoreOption:Action) : bool
    + {static} DrawHeaderFoldout(title:GUIContent, state:bool, isBoxed:bool, hasMoreOptions:Func<bool>, toggleMoreOptions:Action, documentationURL:string, contextAction:Action<Vector2>) : bool
    + {static} DrawSubHeaderFoldout(title:string, state:bool, isBoxed:bool, hasMoreOptions:Func<bool>, toggleMoreOptions:Action) : bool
    + {static} DrawSubHeaderFoldout(title:GUIContent, state:bool, isBoxed:bool, hasMoreOptions:Func<bool>, toggleMoreOptions:Action) : bool
    + {static} DrawSubHeaderFoldout(title:string, state:bool, isBoxed:bool) : bool
    + {static} DrawSubHeaderFoldout(title:GUIContent, state:bool, isBoxed:bool) : bool
    + {static} DrawHeaderToggle(title:string, group:SerializedProperty, activeField:SerializedProperty, contextAction:Action<Vector2>, hasMoreOptions:Func<bool>, toggleMoreOptions:Action) : bool
    + {static} DrawHeaderToggle(title:GUIContent, group:SerializedProperty, activeField:SerializedProperty, contextAction:Action<Vector2>, hasMoreOptions:Func<bool>, toggleMoreOptions:Action) : bool
    + {static} DrawHeaderToggle(title:string, group:SerializedProperty, activeField:SerializedProperty, contextAction:Action<Vector2>, hasMoreOptions:Func<bool>, toggleMoreOptions:Action, documentationURL:string) : bool
    + {static} DrawHeaderToggle(title:GUIContent, group:SerializedProperty, activeField:SerializedProperty, contextAction:Action<Vector2>, hasMoreOptions:Func<bool>, toggleMoreOptions:Action, documentationURL:string) : bool
    + {static} DrawSectionHeader(title:GUIContent, documentationURL:string, contextAction:Action<Vector2>, hasMoreOptions:Func<bool>, toggleMoreOptions:Action) : void
    + {static} DrawVector6(label:GUIContent, positive:SerializedProperty, negative:SerializedProperty, min:Vector3, max:Vector3, colors:Color[], multiplicator:SerializedProperty, allowIntersection:bool) : void
    + {static} DrawPopup(label:GUIContent, property:SerializedProperty, options:string[]) : void
    + {static} DrawEnumPopup(property:SerializedProperty, type:System.Type, label:GUIContent) : void
    + {static} RemoveMaterialKeywords(material:Material) : void
    + {static} GetAdditionalData(targets:UnityEngine.Object[], initDefault:Action<T>) : T[]
    + {static} AddAdditionalData(go:GameObject, initDefault:Action<AdditionalT>) : void
    + {static} CreateGameObject(parent:GameObject, name:string, types:Type[]) : GameObject
    + {static} CreateGameObject(name:string, context:UnityEngine.Object) : GameObject
    {static} + GetCurrentProjectVersion() : string
    {static} + CheckOutFile(VCSEnabled:bool, mat:UnityObject) : void
    + {static} LoadIcon(path:string, name:string, extention:string) : Texture2D
}
enum Skin {
    Auto,
    Personnal,
    Professional,
}
CoreEditorUtils +- - Skin
class CoreRenderPipelinePreferences <<static>> {
    + {static} <<readonly>> corePreferencePath : string = "Preferences/Core Render Pipeline"
    + {static} Open() : void
}
class EditorPrefBool <<struct>> {
    + value : bool <<get>> <<set>>
    + EditorPrefBool(key:string, defaultValue:bool)
}
class "EditorPrefBoolFlags`1"<T> <<struct>> {
    + value : T <<get>> <<set>>
    + rawValue : uint <<get>> <<set>>
    + EditorPrefBoolFlags(key:string)
    + Equals(other:T) : bool
    + Equals(other:EditorPrefBoolFlags<T>) : bool
    + HasFlag(v:T) : bool
    + SetFlag(f:T, v:bool) : void
}
class "IEquatable`1"<T> {
}
"IEquatable`1" "<T>" <|- - "EditorPrefBoolFlags`1"
"IEquatable`1" "<EditorPrefBoolFlags<T>>" <|- - "EditorPrefBoolFlags`1"
class EditorWindowWithHelpButton {
}
EditorWindow <|- - EditorWindowWithHelpButton
class "ExpandedState`2"<TState,TTarget> <<struct>> {
    + ExpandedState(defaultValue:TState, prefix:string)
    + GetExpandedAreas(mask:TState) : bool
    + SetExpandedAreas(mask:TState, value:bool) : void
    + ExpandAll() : void
    + CollapseAll() : void
}
class FilterWindow {
    + {static} <<readonly>> DefaultWidth : float = 250f
    + {static} <<readonly>> DefaultHeight : float = 300f
}
interface IProvider {
}
class Element {
    + level : int
    + name : string <<get>>
    + CompareTo(o:object) : int
}
class GroupElement {
    + selectedIndex : int
    + WantsFocus : bool <<get>> <<protected set>>
    + <<virtual>> ShouldDisable : bool <<get>>
    + GroupElement(level:int, name:string)
    + <<virtual>> HandleKeyboard(evt:Event, window:FilterWindow, goToParent:Action) : bool
    + <<virtual>> OnGUI(sFilterWindow:FilterWindow) : bool
}
class Styles {
    + Styles()
}
EditorWindow <|- - FilterWindow
FilterWindow +- - IProvider
FilterWindow +- - Element
IComparable <|- - Element
Element - -> "content" GUIContent
FilterWindow +- - GroupElement
Element <|- - GroupElement
GroupElement - -> "scroll" Vector2
FilterWindow +- - Styles
Styles o-> "header" GUIStyle
Styles o-> "componentButton" GUIStyle
Styles - -> "groupButton" GUIStyle
Styles o-> "background" GUIStyle
Styles o-> "rightArrow" GUIStyle
Styles o-> "leftArrow" GUIStyle
interface ICoreRenderPipelinePreferencesProvider {
}
class InspectorCurveEditor <<sealed>> {
    + InspectorCurveEditor()
    + InspectorCurveEditor(settings:Settings)
    + Add(curves:SerializedProperty[]) : void
    + Add(curve:SerializedProperty) : void
    + Add(curve:SerializedProperty, state:CurveState) : void
    + Remove(curve:SerializedProperty) : void
    + RemoveAll() : void
    + GetCurveState(curve:SerializedProperty) : CurveState
    + SetCurveState(curve:SerializedProperty, state:CurveState) : void
    + GetSelection() : Selection
    + SetKeyframe(curve:SerializedProperty, keyframeIndex:int, keyframe:Keyframe) : void
    + OnGUI(rect:Rect) : bool
}
enum EditMode {
    None,
    Moving,
    TangentEdit,
}
enum Tangent {
    In,
    Out,
}
class Settings <<struct>> {
    + curvePickingDistance : float
    + keyTimeClampingDistance : float
}
class CurveState <<struct>> {
    + visible : bool
    + editable : bool
    + minPointCount : uint
    + zeroKeyConstantValue : float
    + width : float
    + handleWidth : float
    + showNonEditableHandles : bool
    + onlyShowHandlesOnSelection : bool
    + loopInBounds : bool
}
class Selection <<struct>> {
    + keyframeIndex : int
    + keyframe : Keyframe?
    + Selection(curve:SerializedProperty, keyframeIndex:int, keyframe:Keyframe?)
}
class MenuAction <<struct>> {
}
InspectorCurveEditor - -> "settings" Settings
InspectorCurveEditor +- - EditMode
InspectorCurveEditor +- - Tangent
InspectorCurveEditor +- - Settings
Settings - -> "bounds" Rect
Settings - -> "padding" RectOffset
Settings - -> "selectionColor" Color
Settings - -> "defaultSettings" Settings
InspectorCurveEditor +- - CurveState
CurveState - -> "color" Color
CurveState - -> "defaultState" CurveState
InspectorCurveEditor +- - Selection
Selection - -> "curve" SerializedProperty
InspectorCurveEditor +- - MenuAction
class DialogText <<static>> {
    + {static} <<readonly>> title : string = "Material Upgrader"
    + {static} <<readonly>> proceed : string = "Proceed"
    + {static} <<readonly>> ok : string = "Ok"
    + {static} <<readonly>> cancel : string = "Cancel"
    + {static} <<readonly>> noSelectionMessage : string = "You must select at least one material."
    + {static} <<readonly>> projectBackMessage : string = "Make sure to have a project backup before proceeding."
}
class MaterialUpgrader {
    + NewShaderPath : string <<get>>
    + GetPropertyRenameMap(type:MaterialPropertyType) : IReadOnlyDictionary<string, string>
    + Upgrade(material:Material, flags:UpgradeFlags) : void
    + <<virtual>> Convert(srcMaterial:Material, dstMaterial:Material) : void
    + RenameShader(oldName:string, newName:string, finalizer:MaterialFinalizer) : void
    + RenameTexture(oldName:string, newName:string) : void
    + RenameFloat(oldName:string, newName:string) : void
    + RenameColor(oldName:string, newName:string) : void
    + RemoveTexture(name:string) : void
    + SetFloat(propertyName:string, value:float) : void
    + SetColor(propertyName:string, value:Color) : void
    + SetTexture(propertyName:string, value:Texture) : void
    + RenameKeywordToFloat(oldName:string, newName:string, setVal:float, unsetVal:float) : void
    + {static} UpgradeProjectFolder(upgraders:List<MaterialUpgrader>, progressBarName:string, flags:UpgradeFlags) : void
    + {static} UpgradeProjectFolder(upgraders:List<MaterialUpgrader>, shaderNamesToIgnore:HashSet<string>, progressBarName:string, flags:UpgradeFlags) : void
    + {static} Upgrade(material:Material, upgrader:MaterialUpgrader, flags:UpgradeFlags) : void
    + {static} Upgrade(material:Material, upgraders:List<MaterialUpgrader>, flags:UpgradeFlags) : void
    + {static} Upgrade(material:Material, upgraders:List<MaterialUpgrader>, flags:UpgradeFlags, message:string) : bool
    + {static} UpgradeSelection(upgraders:List<MaterialUpgrader>, progressBarName:string, flags:UpgradeFlags) : void
    + {static} UpgradeSelection(upgraders:List<MaterialUpgrader>, shaderNamesToIgnore:HashSet<string>, progressBarName:string, flags:UpgradeFlags) : void
}
class KeywordFloatRename {
    + keyword : string
    + property : string
    + setVal : float
    + unsetVal : float
}
enum MaterialPropertyType {
    Texture,
    Float,
    Color,
}
enum UpgradeFlags {
    None= 0,
    LogErrorOnNonExistingProperty= 1,
    CleanupNonUpgradedProperties= 2,
    LogMessageWhenNoUpgraderFound= 4,
}
MaterialUpgrader +- - KeywordFloatRename
MaterialUpgrader +- - MaterialPropertyType
MaterialUpgrader +- - UpgradeFlags
class MenuManager <<static>> {
    + {static} AddMenuItem(path:string, shortcut:string, @checked:bool, priority:int, execute:System.Action, validate:System.Func<bool>) : void
    + {static} RemoveMenuItem(path:string) : void
}
class ProjectorEditor {
    + <<override>> OnInspectorGUI() : void
}
Editor <|- - ProjectorEditor
class "PropertyFetcher`1"<T> <<sealed>> {
    + PropertyFetcher(obj:SerializedObject)
    + Find(str:string) : SerializedProperty
    + Find(expr:Expression<Func<T, TValue>>) : SerializedProperty
    + Dispose() : void
}
class "RelativePropertyFetcher`1"<T> <<sealed>> {
    + RelativePropertyFetcher(obj:SerializedProperty)
    + Find(str:string) : SerializedProperty
    + Find(expr:Expression<Func<T, TValue>>) : SerializedProperty
    + Dispose() : void
}
class PropertyFetcherExtensions <<static>> {
    + {static} Find(obj:SerializedObject, expr:Expression<Func<TSource, TValue>>) : SerializedProperty
    + {static} Find(obj:SerializedProperty, expr:Expression<Func<TSource, TValue>>) : SerializedProperty
}
IDisposable <|- - "PropertyFetcher`1"
"PropertyFetcher`1" - -> "obj" SerializedObject
IDisposable <|- - "RelativePropertyFetcher`1"
"RelativePropertyFetcher`1" - -> "obj" SerializedProperty
class QuaternionPropertyDrawer {
    + <<override>> OnGUI(position:Rect, property:SerializedProperty, label:GUIContent) : void
}
PropertyDrawer <|- - QuaternionPropertyDrawer
class SerializedPropertyExtension <<static>> {
    + {static} IsTargetAlive(property:SerializedProperty) : bool
    + {static} GetEnumValue(property:SerializedProperty) : T
    + {static} GetEnumName(property:SerializedProperty) : string
    + {static} SetEnumValue(property:SerializedProperty, value:T) : void
    + {static} GetInline(serializedProperty:SerializedProperty) : T
    + {static} SetInline(serializedProperty:SerializedProperty, value:T) : void
}
class SpeedTree8MaterialUpgrader {
    + SpeedTree8MaterialUpgrader(sourceShaderName:string, destShaderName:string, finalizer:MaterialFinalizer)
    + {static} PostprocessSpeedTree8Materials(speedtree:GameObject, stImporter:SpeedTreeImporter, finalizer:MaterialFinalizer) : void
    + {static} SpeedTree8MaterialFinalizer(material:Material) : void
}
enum WindQuality {
    None= 0,
    Fastest,
    Fast,
    Better,
    Best,
    Palm,
    Count,
}
MaterialUpgrader <|- - SpeedTree8MaterialUpgrader
SpeedTree8MaterialUpgrader +- - WindQuality
class CoreRPHelpURLAttribute {
    + CoreRPHelpURLAttribute(pageName:string, packageName:string)
}
class DocumentationInfo {
    + {static} version : string <<get>>
    + {static} GetPageLink(packageName:string, pageName:string) : string
}
class DocumentationUtils <<static>> {
    + {static} GetHelpURL(mask:TEnum) : string
}
HelpURLAttribute <|- - CoreRPHelpURLAttribute
class DummyShaderLibrary {
}
class AnimationClipUpgrader <<static>> <<partial>> {
    + {static} DoUpgradeAllClipsMenuItem(allUpgraders:IEnumerable<MaterialUpgrader>, progressBarName:string, knownUpgradePaths:IReadOnlyDictionary<UID, MaterialUpgrader>, filterFlags:SerializedShaderPropertyUsage) : void
}
class AnimationClipUpgrader <<static>> <<partial>> {
}
interface IAnimationClip {
}
class AnimationClipProxy <<struct>> {
    + GetCurveBindings() : EditorCurveBinding[]
    + ReplaceBindings(oldBindings:EditorCurveBinding[], newBindings:EditorCurveBinding[]) : void
    + <<override>> ToString() : string
}
interface IRenderer {
}
class RendererProxy <<struct>> {
    + GetSharedMaterials(materials:List<IMaterial>) : void
    + <<override>> ToString() : string
}
interface IAssetPath {
}
class ClipPath <<struct>> {
    + Path : string <<get>> <<set>>
    + <<override>> ToString() : string
}
class PrefabPath <<struct>> {
    + Path : string <<get>> <<set>>
    + <<override>> ToString() : string
}
class ScenePath <<struct>> {
    + Path : string <<get>> <<set>>
    + <<override>> ToString() : string
}
AnimationClipUpgrader +- - IAnimationClip
AnimationClipUpgrader +- - AnimationClipProxy
IAnimationClip <|- - AnimationClipProxy
AnimationClipProxy - -> "Clip" AnimationClip
AnimationClipUpgrader +- - IRenderer
AnimationClipUpgrader +- - RendererProxy
IRenderer <|- - RendererProxy
AnimationClipUpgrader +- - IAssetPath
AnimationClipUpgrader +- - ClipPath
IAssetPath <|- - ClipPath
AnimationClipUpgrader +- - PrefabPath
IAssetPath <|- - PrefabPath
AnimationClipUpgrader +- - ScenePath
IAssetPath <|- - ScenePath
class AssetVersion {
    + version : int
}
ScriptableObject <|- - AssetVersion
class ForwardRendererDataEditor {
    + <<override>> OnInspectorGUI() : void
}
class EditorUtils <<static>> <<partial>> {
}
ScriptableRendererDataEditor <|- - ForwardRendererDataEditor
class ResourceGuid <<static>> {
    + {static} <<readonly>> rendererTemplate : string = "51493ed8d97d3c24b94c6cffe834630b"
}
class EditorUtils <<static>> <<partial>> {
}
enum Unit {
    Metric,
    Percent,
}
class Styles {
    + {static} defaultLineSpace : float
}
EditorUtils +- - Unit
EditorUtils +- - Styles
class LightExplorer {
}
class Styles <<static>> {
}
DefaultLightingExplorerExtension <|- - LightExplorer
LightExplorer +- - Styles
Styles o-> "Enabled" GUIContent
Styles o-> "Name" GUIContent
Styles o-> "Mode" GUIContent
Styles o-> "HDR" GUIContent
Styles o-> "ShadowDistance" GUIContent
Styles o-> "NearPlane" GUIContent
Styles o-> "FarPlane" GUIContent
Styles o-> "Resolution" GUIContent
class PostProcessDataEditor {
    + <<override>> OnInspectorGUI() : void
}
Editor <|- - PostProcessDataEditor
class StencilStateDataDrawer {
    + <<override>> OnGUI(rect:Rect, property:SerializedProperty, label:GUIContent) : void
    + <<override>> GetPropertyHeight(property:SerializedProperty, label:GUIContent) : float
}
class Styles {
}
PropertyDrawer <|- - StencilStateDataDrawer
StencilStateDataDrawer +- - Styles
Styles o-> "overrideStencil" GUIContent
Styles o-> "stencilValue" GUIContent
Styles o-> "stencilFunction" GUIContent
Styles o-> "stencilPass" GUIContent
Styles o-> "stencilFail" GUIContent
Styles o-> "stencilZFail" GUIContent
class "SavedParameter`1"<T> {
    + SavedParameter(key:string, value:T, getter:GetParameter, setter:SetParameter)
    + value : T <<get>> <<set>>
}
class SavedBool <<sealed>> {
    + SavedBool(key:string, value:bool)
}
class SavedInt <<sealed>> {
    + SavedInt(key:string, value:int)
}
class SavedFloat <<sealed>> {
    + SavedFloat(key:string, value:float)
}
class SavedString <<sealed>> {
    + SavedString(key:string, value:string)
}
class "IEquatable`1"<T> {
}
"SavedParameter`1" "<bool>" <|- - SavedBool
"SavedParameter`1" "<int>" <|- - SavedInt
"SavedParameter`1" "<float>" <|- - SavedFloat
"SavedParameter`1" "<string>" <|- - SavedString
class ScriptableRendererDataEditor {
    + <<override>> OnInspectorGUI() : void
}
class Styles {
}
Editor <|- - ScriptableRendererDataEditor
ScriptableRendererDataEditor +- - Styles
Styles o-> "RenderFeatures" GUIContent
Styles o-> "PassNameField" GUIContent
Styles o-> "MissingFeature" GUIContent
Styles - -> "BoldLabelSimple" GUIStyle
class ScriptableRendererFeatureEditor {
    + <<override>> OnInspectorGUI() : void
}
Editor <|- - ScriptableRendererFeatureEditor
enum ShaderFeatures {
    None= 0,
    MainLight= (1 << 0),
    MainLightShadows= (1 << 1),
    AdditionalLights= (1 << 2),
    AdditionalLightShadows= (1 << 3),
    VertexLighting= (1 << 4),
    SoftShadows= (1 << 5),
    MixedLighting= (1 << 6),
    TerrainHoles= (1 << 7),
    DeferredShading= (1 << 8),
    AccurateGbufferNormals= (1 << 9),
    ScreenSpaceOcclusion= (1 << 10),
    ScreenSpaceShadows= (1 << 11),
    UseFastSRGBLinearConversion= (1 << 12),
    LightLayers= (1 << 13),
    ReflectionProbeBlending= (1 << 14),
    ReflectionProbeBoxProjection= (1 << 15),
    DBufferMRT1= (1 << 16),
    DBufferMRT2= (1 << 17),
    DBufferMRT3= (1 << 18),
    DecalScreenSpace= (1 << 19),
    DecalGBuffer= (1 << 20),
    DecalNormalBlendLow= (1 << 21),
    DecalNormalBlendMedium= (1 << 22),
    DecalNormalBlendHigh= (1 << 23),
    ClusteredRendering= (1 << 24),
    RenderPassEnabled= (1 << 25),
    MainLightShadowsCascade= (1 << 26),
    DrawProcedural= (1 << 27),
    ScreenSpaceOcclusionAfterOpaque= (1 << 28),
    AdditionalLightsKeepOffVariants= (1 << 29),
    ShadowsKeepOffVariants= (1 << 30),
}
enum VolumeFeatures {
    None= 0,
    Calculated= (1 << 0),
    LensDistortion= (1 << 1),
    Bloom= (1 << 2),
    ChromaticAberration= (1 << 3),
    ToneMaping= (1 << 4),
    FilmGrain= (1 << 5),
    DepthOfField= (1 << 6),
    CameraMotionBlur= (1 << 7),
    PaniniProjection= (1 << 8),
}
class ShaderPreprocessor {
    + {static} <<readonly>> kPassNameGBuffer : string = "GBuffer"
    + {static} <<readonly>> kTerrainShaderName : string = "Universal Render Pipeline/Terrain/Lit"
    + callbackOrder : int <<get>>
    + OnProcessShader(shader:Shader, snippetData:ShaderSnippetData, compilerDataList:IList<ShaderCompilerData>) : void
}
class ShaderBuildPreprocessor {
    + callbackOrder : int <<get>>
    + OnPreprocessBuild(report:BuildReport) : void
}
class "StripTool`1"<T> <<struct>> {
    + StripTool(features:T, shader:Shader, snippetData:ShaderSnippetData, keywordSet:ShaderKeywordSet, stripUnusedVariants:bool, shaderCompilerPlatform:ShaderCompilerPlatform)
    + StripMultiCompileKeepOffVariant(kw:LocalKeyword, feature:T, kw2:LocalKeyword, feature2:T, kw3:LocalKeyword, feature3:T) : bool
    + StripMultiCompile(kw:LocalKeyword, feature:T, kw2:LocalKeyword, feature2:T, kw3:LocalKeyword, feature3:T) : bool
    + StripMultiCompileKeepOffVariant(kw:LocalKeyword, feature:T, kw2:LocalKeyword, feature2:T) : bool
    + StripMultiCompile(kw:LocalKeyword, feature:T, kw2:LocalKeyword, feature2:T) : bool
    + StripMultiCompileKeepOffVariant(kw:LocalKeyword, feature:T) : bool
    + StripMultiCompile(kw:LocalKeyword, feature:T) : bool
}
class "List`1"<T> {
}
IPreprocessShaders <|- - ShaderPreprocessor
IPreprocessBuildWithReport <|- - ShaderBuildPreprocessor
ShaderBuildPreprocessor - -> "supportedFeaturesList<ShaderFeatures>" "List`1"
ShaderBuildPreprocessor - -> "volumeFeatures" VolumeFeatures
ShaderPreprocessor +- - "StripTool`1"
class ShaderUtils <<static>> {
}
enum ShaderID {
    Unknown= -1,
    Lit= ShaderPathID.Lit,
    SimpleLit= ShaderPathID.SimpleLit,
    Unlit= ShaderPathID.Unlit,
    TerrainLit= ShaderPathID.TerrainLit,
    ParticlesLit= ShaderPathID.ParticlesLit,
    ParticlesSimpleLit= ShaderPathID.ParticlesSimpleLit,
    ParticlesUnlit= ShaderPathID.ParticlesUnlit,
    BakedLit= ShaderPathID.BakedLit,
    SpeedTree7= ShaderPathID.SpeedTree7,
    SpeedTree7Billboard= ShaderPathID.SpeedTree7Billboard,
    SpeedTree8= ShaderPathID.SpeedTree8,
    SG_Unlit= 1000,
    SG_Lit,
}
enum MaterialUpdateType {
    CreatedNewMaterial,
    ChangedAssignedShader,
    ModifiedShader,
    ModifiedMaterial,
}
ShaderUtils +- - ShaderID
ShaderUtils +- - MaterialUpdateType
class TrackballUIDrawer <<sealed>> {
    + OnGUI(property:SerializedProperty, overrideState:SerializedProperty, title:GUIContent, computeFunc:Func<Vector4, Vector3>) : void
}
class UniversalAdditionalCameraDataEditor {
    + <<override>> OnInspectorGUI() : void
}
Editor <|- - UniversalAdditionalCameraDataEditor
class UniversalAdditionLightDataEditor {
    + <<override>> OnInspectorGUI() : void
}
Editor <|- - UniversalAdditionLightDataEditor
class UniversalAnalytics {
    + callbackOrder : int <<get>>
    + OnPostprocessBuild(report:BuildReport) : void
}
class AnalyticsData <<struct>> {
    + renderer_data_amount : int
    + renderer_features_amount : int
    + main_light_rendering_mode : string
    + additional_light_rendering_mode : string
}
IPostprocessBuildWithReport <|- - UniversalAnalytics
UniversalAnalytics +- - AnalyticsData
class UniversalRendererDataEditor {
    + <<override>> OnInspectorGUI() : void
}
class Styles <<static>> {
}
ScriptableRendererDataEditor <|- - UniversalRendererDataEditor
UniversalRendererDataEditor +- - Styles
Styles o-> "RendererTitle" GUIContent
Styles o-> "PostProcessIncluded" GUIContent
Styles o-> "PostProcessLabel" GUIContent
Styles o-> "FilteringSectionLabel" GUIContent
Styles o-> "OpaqueMask" GUIContent
Styles o-> "TransparentMask" GUIContent
Styles o-> "RenderingSectionLabel" GUIContent
Styles o-> "RenderingModeLabel" GUIContent
Styles o-> "DepthPrimingModeLabel" GUIContent
Styles o-> "DepthPrimingModeInfo" GUIContent
Styles o-> "CopyDepthModeLabel" GUIContent
Styles o-> "RenderPassLabel" GUIContent
Styles o-> "RenderPassSectionLabel" GUIContent
Styles o-> "ShadowsSectionLabel" GUIContent
Styles o-> "PostProcessingSectionLabel" GUIContent
Styles o-> "OverridesSectionLabel" GUIContent
Styles o-> "accurateGbufferNormalsLabel" GUIContent
Styles o-> "defaultStencilStateLabel" GUIContent
Styles o-> "shadowTransparentReceiveLabel" GUIContent
Styles o-> "invalidStencilOverride" GUIContent
Styles o-> "clusteredRenderingLabel" GUIContent
Styles o-> "intermediateTextureMode" GUIContent
class UniversalRenderPipelineAssetEditor {
    + <<override>> OnInspectorGUI() : void
}
Editor <|- - UniversalRenderPipelineAssetEditor
class UniversalRenderPipelineLightEditor {
    + <<override>> OnInspectorGUI() : void
}
LightEditor <|- - UniversalRenderPipelineLightEditor
class UniversalRenderPipelineMaterialUpgrader <<sealed>> {
    + <<override>> name : string <<get>>
    + <<override>> info : string <<get>>
    + <<override>> priority : int <<get>>
    + <<override>> OnInitialize(context:InitializeConverterContext, callback:Action) : void
    + <<override>> OnRun(context:RunItemContext) : void
    + <<override>> OnClicked(index:int) : void
}
class SupportedUpgradeParams <<static>> {
}
class StandardUpgrader {
    + {static} UpdateStandardMaterialKeywords(material:Material) : void
    + {static} UpdateStandardSpecularMaterialKeywords(material:Material) : void
    + StandardUpgrader(oldShaderName:string)
}
class StandardSimpleLightingUpgrader {
    + StandardSimpleLightingUpgrader(oldShaderName:string, upgradeParams:UpgradeParams)
    + {static} UpdateMaterialKeywords(material:Material) : void
}
class TerrainUpgrader {
    + TerrainUpgrader(oldShaderName:string)
}
class SpeedTreeUpgrader {
}
class SpeedTreeBillboardUpgrader {
}
class SpeedTree8Upgrader {
}
class ParticleUpgrader {
    + ParticleUpgrader(oldShaderName:string)
    + {static} UpdateStandardSurface(material:Material) : void
    + {static} UpdateUnlit(material:Material) : void
    + {static} UpdateSurfaceBlendModes(material:Material) : void
}
class AutodeskInteractiveUpgrader {
    + AutodeskInteractiveUpgrader(oldShaderName:string)
    + <<override>> Convert(srcMaterial:Material, dstMaterial:Material) : void
}
class "IReadOnlyList`1"<T> {
}
enum LegacyRenderingMode {
    Opaque,
    Cutout,
    Fade,
    Transparent,
}
RenderPipelineConverter <|- - UniversalRenderPipelineMaterialUpgrader
UniversalRenderPipelineMaterialUpgrader - -> "container" Type
UniversalRenderPipelineMaterialUpgrader - -> "upgraders<MaterialUpgrader>" "IReadOnlyList`1"
SupportedUpgradeParams o-> "diffuseOpaque" UpgradeParams
SupportedUpgradeParams o-> "specularOpaque" UpgradeParams
SupportedUpgradeParams o-> "diffuseAlpha" UpgradeParams
SupportedUpgradeParams o-> "specularAlpha" UpgradeParams
SupportedUpgradeParams o-> "diffuseAlphaCutout" UpgradeParams
SupportedUpgradeParams o-> "specularAlphaCutout" UpgradeParams
SupportedUpgradeParams o-> "diffuseCubemap" UpgradeParams
SupportedUpgradeParams o-> "specularCubemap" UpgradeParams
SupportedUpgradeParams o-> "diffuseCubemapAlpha" UpgradeParams
SupportedUpgradeParams o-> "specularCubemapAlpha" UpgradeParams
MaterialUpgrader <|- - StandardUpgrader
MaterialUpgrader <|- - StandardSimpleLightingUpgrader
MaterialUpgrader <|- - TerrainUpgrader
MaterialUpgrader <|- - SpeedTreeUpgrader
MaterialUpgrader <|- - SpeedTreeBillboardUpgrader
MaterialUpgrader <|- - SpeedTree8Upgrader
MaterialUpgrader <|- - ParticleUpgrader
MaterialUpgrader <|- - AutodeskInteractiveUpgrader
StandardUpgrader +- - LegacyRenderingMode
enum UpgradeSurfaceType {
    Opaque,
    Transparent,
}
enum UpgradeBlendMode {
    Alpha,
    Premultiply,
    Additive,
    Multiply,
}
enum SpecularSource {
    SpecularTextureAndColor,
    NoSpecular,
}
enum SmoothnessSource {
    SpecularAlpha,
    BaseAlpha,
}
enum ReflectionSource {
    NoReflection,
    Cubemap,
    ReflectionProbe,
}
class UpgradeParams <<struct>> {
    + alphaClip : bool <<get>> <<set>>
}
UpgradeParams - -> "surfaceType" UpgradeSurfaceType
UpgradeParams - -> "blendMode" UpgradeBlendMode
UpgradeParams - -> "specularSource" SpecularSource
UpgradeParams - -> "smoothnessSource" SmoothnessSource
enum SerializedShaderPropertyUsage {
    Unknown= 0,
    NoShaderProperties= 1,
    UsedByUpgraded= 2,
    UsedByNonUpgraded= 4,
    UsedByAmbiguouslyUpgraded= 8,
}
class UpgradeUtility <<static>> {
    + {static} GetAllUpgradePathsToShaders(upgraders:IEnumerable<MaterialUpgrader>) : Dictionary<string, IReadOnlyList<MaterialUpgrader>>
    + {static} GetNewPropertyName(shaderPropertyName:string, material:IMaterial, materialPropertyType:MaterialUpgrader.MaterialPropertyType, allUpgradePathsToNewShaders:IReadOnlyDictionary<string, IReadOnlyList<MaterialUpgrader>>, upgradePathsUsedByMaterials:IReadOnlyDictionary<UID, MaterialUpgrader>, newPropertyName:string) : SerializedShaderPropertyUsage
}
class UID <<struct>> {
    + Value : string
}
interface IMaterial {
}
class MaterialProxy <<struct>> {
    + MaterialProxy(material:Material, allAssetsAtPath:UnityObject[])
    + ShaderName : string <<get>>
    + <<override>> ToString() : string
}
UpgradeUtility +- - UID
UpgradeUtility +- - IMaterial
UpgradeUtility +- - MaterialProxy
IMaterial <|- - MaterialProxy
MaterialProxy - -> "ID" UID
class ComponentUtility <<static>> {
    + {static} IsUniversalCamera(camera:Camera) : bool
    + {static} IsUniversalLight(light:Light) : bool
}
class DeferredConfig <<static>> {
    + <<const>> kPreferredCBufferSize : int
    + <<const>> kPreferredStructuredBufferSize : int
    + <<const>> kTilePixelWidth : int = 16
    + <<const>> kTilePixelHeight : int = 16
    + <<const>> kTilerDepth : int = 3
    + <<const>> kTilerSubdivisions : int = 4
    + <<const>> kAvgLightPerTile : int = 32
    + <<const>> kTileDepthInfoIntermediateLevel : int
    + <<const>> kHasNativeQuadSupport : bool = false
}
enum LightFlag {
    SubtractiveMixedLighting= 4,
}
class DeferredLights {
    + Setup(renderingData:RenderingData, additionalLightsShadowCasterPass:AdditionalLightsShadowCasterPass, hasDepthPrepass:bool, hasNormalPrepass:bool, depthCopyTexture:RenderTargetHandle, depthInfoTexture:RenderTargetHandle, tileDepthInfoTexture:RenderTargetHandle, depthAttachment:RenderTargetHandle, colorAttachment:RenderTargetHandle) : void
    + OnCameraCleanup(cmd:CommandBuffer) : void
}
class SortPrePunctualLight {
    + Compare(a:DeferredTiler.PrePunctualLight, b:DeferredTiler.PrePunctualLight) : int
}
class BitArray <<struct>> {
    + BitArray(bitCount:int, allocator:Allocator, options:NativeArrayOptions)
    + Dispose() : void
    + Clear() : void
    + IsSet(bitIndex:int) : bool
    + Set(bitIndex:int, val:bool) : void
}
class ShaderConstants <<static>> {
    + {static} <<readonly>> _LitStencilRef : int
    + {static} <<readonly>> _LitStencilReadMask : int
    + {static} <<readonly>> _LitStencilWriteMask : int
    + {static} <<readonly>> _SimpleLitStencilRef : int
    + {static} <<readonly>> _SimpleLitStencilReadMask : int
    + {static} <<readonly>> _SimpleLitStencilWriteMask : int
    + {static} <<readonly>> _StencilRef : int
    + {static} <<readonly>> _StencilReadMask : int
    + {static} <<readonly>> _StencilWriteMask : int
    + {static} <<readonly>> _LitPunctualStencilRef : int
    + {static} <<readonly>> _LitPunctualStencilReadMask : int
    + {static} <<readonly>> _LitPunctualStencilWriteMask : int
    + {static} <<readonly>> _SimpleLitPunctualStencilRef : int
    + {static} <<readonly>> _SimpleLitPunctualStencilReadMask : int
    + {static} <<readonly>> _SimpleLitPunctualStencilWriteMask : int
    + {static} <<readonly>> _LitDirStencilRef : int
    + {static} <<readonly>> _LitDirStencilReadMask : int
    + {static} <<readonly>> _LitDirStencilWriteMask : int
    + {static} <<readonly>> _SimpleLitDirStencilRef : int
    + {static} <<readonly>> _SimpleLitDirStencilReadMask : int
    + {static} <<readonly>> _SimpleLitDirStencilWriteMask : int
    + {static} <<readonly>> _ClearStencilRef : int
    + {static} <<readonly>> _ClearStencilReadMask : int
    + {static} <<readonly>> _ClearStencilWriteMask : int
    + {static} <<readonly>> UDepthRanges : int
    + {static} <<readonly>> _DepthRanges : int
    + {static} <<readonly>> _DownsamplingWidth : int
    + {static} <<readonly>> _DownsamplingHeight : int
    + {static} <<readonly>> _SourceShiftX : int
    + {static} <<readonly>> _SourceShiftY : int
    + {static} <<readonly>> _TileShiftX : int
    + {static} <<readonly>> _TileShiftY : int
    + {static} <<readonly>> _tileXCount : int
    + {static} <<readonly>> _DepthRangeOffset : int
    + {static} <<readonly>> _BitmaskTex : int
    + {static} <<readonly>> UTileList : int
    + {static} <<readonly>> _TileList : int
    + {static} <<readonly>> UPunctualLightBuffer : int
    + {static} <<readonly>> _PunctualLightBuffer : int
    + {static} <<readonly>> URelLightList : int
    + {static} <<readonly>> _RelLightList : int
    + {static} <<readonly>> _TilePixelWidth : int
    + {static} <<readonly>> _TilePixelHeight : int
    + {static} <<readonly>> _InstanceOffset : int
    + {static} <<readonly>> _DepthTex : int
    + {static} <<readonly>> _DepthTexSize : int
    + {static} <<readonly>> _ScreenToWorld : int
    + {static} <<readonly>> _unproject0 : int
    + {static} <<readonly>> _unproject1 : int
    + {static} _MainLightPosition : int
    + {static} _MainLightColor : int
    + {static} _MainLightLayerMask : int
    + {static} _SpotLightScale : int
    + {static} _SpotLightBias : int
    + {static} _SpotLightGuard : int
    + {static} _LightPosWS : int
    + {static} _LightColor : int
    + {static} _LightAttenuation : int
    + {static} _LightOcclusionProbInfo : int
    + {static} _LightDirection : int
    + {static} _LightFlags : int
    + {static} _ShadowLightIndex : int
    + {static} _LightLayerMask : int
    + {static} _CookieLightIndex : int
}
class CullLightsJob <<struct>> {
    + coarseHeaderOffset : int
    + istart : int
    + iend : int
    + jstart : int
    + jend : int
    + Execute() : void
}
class DrawCall <<struct>> {
    + tileListSize : int
    + punctualLightBufferSize : int
    + relLightListSize : int
    + instanceOffset : int
    + instanceCount : int
}
enum TileDeferredPasses {
    PunctualLit,
    PunctualSimpleLit,
}
enum StencilDeferredPasses {
    StencilVolume,
    PunctualLit,
    PunctualSimpleLit,
    DirectionalLit,
    DirectionalSimpleLit,
    ClearStencilPartial,
    Fog,
    SSAOOnly,
}
class InitParams <<struct>> {
}
class "IComparer`1"<T> {
}
class "NativeArray`1"<T> {
}
DeferredLights +- - ShaderConstants
DeferredLights +- - CullLightsJob
IJob <|- - CullLightsJob
CullLightsJob - -> "tiler" DeferredTiler
CullLightsJob - -> "prePunctualLights<DeferredTiler.PrePunctualLight>" "NativeArray`1"
CullLightsJob - -> "coarseTiles<ushort>" "NativeArray`1"
CullLightsJob - -> "coarseTileHeaders<uint>" "NativeArray`1"
DeferredLights +- - DrawCall
DrawCall - -> "tileList" ComputeBuffer
DrawCall - -> "punctualLightBuffer" ComputeBuffer
DrawCall - -> "relLightList" ComputeBuffer
DeferredLights +- - TileDeferredPasses
DeferredLights +- - StencilDeferredPasses
DeferredLights +- - InitParams
InitParams - -> "tileDepthInfoMaterial" Material
InitParams - -> "tileDeferredMaterial" Material
InitParams - -> "stencilDeferredMaterial" Material
InitParams - -> "lightCookieManager" LightCookieManager
class DeferredShaderData {
    + Dispose() : void
}
class ComputeBufferInfo <<struct>> {
    + frameUsed : uint
}
IDisposable <|- - DeferredShaderData
DeferredShaderData +- - ComputeBufferInfo
ComputeBufferInfo - -> "type" ComputeBufferType
class DeferredTiler <<struct>> {
    + DeferredTiler(tilePixelWidth:int, tilePixelHeight:int, avgLightPerTile:int, tilerLevel:int)
    + TilerLevel : int <<get>>
    + TileXCount : int <<get>>
    + TileYCount : int <<get>>
    + TilePixelWidth : int <<get>>
    + TilePixelHeight : int <<get>>
    + TileHeaderSize : int <<get>>
    + MaxLightPerTile : int <<get>>
    + TileDataCapacity : int <<get>>
    + GetTileOffsetAndCount(i:int, j:int, offset:int, count:int) : void
    + GetTileHeaderOffset(i:int, j:int) : int
    + Setup(tileDataCapacity:int) : void
    + OnCameraCleanup() : void
    + PrecomputeTiles(proj:Matrix4x4, isOrthographic:bool, renderWidth:int, renderHeight:int) : void
    <<unsafe>> + CullFinalLights(punctualLights:NativeArray<PrePunctualLight>, lightIndices:NativeArray<ushort>, lightStartIndex:int, lightCount:int, istart:int, iend:int, jstart:int, jend:int) : void
    <<unsafe>> + CullIntermediateLights(punctualLights:NativeArray<PrePunctualLight>, lightIndices:NativeArray<ushort>, lightStartIndex:int, lightCount:int, istart:int, iend:int, jstart:int, jend:int) : void
    + {static} _f32tof16(x:float) : uint
}
class PrePunctualLight <<struct>> {
    + radius : float
    + minDist : float
    + visLightIndex : ushort
}
enum ClipResult {
    Unknown,
    In,
    Out,
}
class "NativeArray`1"<T> {
}
DeferredTiler - -> "Tiles<ushort>" "NativeArray`1"
DeferredTiler - -> "TileHeaders<uint>" "NativeArray`1"
DeferredTiler +- - PrePunctualLight
PrePunctualLight - -> "posVS" float3
PrePunctualLight - -> "screenPos" float2
DeferredTiler +- - ClipResult
abstract class ScriptableRenderPass <<partial>> {
    + <<virtual>> FrameCleanup(cmd:CommandBuffer) : void
}
class ForwardRenderer <<sealed>> {
    + ForwardRenderer(data:ForwardRendererData)
    + <<override>> Setup(context:ScriptableRenderContext, renderingData:RenderingData) : void
    + <<override>> SetupLights(context:ScriptableRenderContext, renderingData:RenderingData) : void
    + <<override>> SetupCullingParameters(cullingParameters:ScriptableCullingParameters, cameraData:CameraData) : void
    + <<override>> FinishRendering(cmd:CommandBuffer) : void
}
class AdditionalLightsShadowCasterPass <<partial>> {
    + {static} m_AdditionalShadowsBufferId : int
    + {static} m_AdditionalShadowsIndicesId : int
}
enum ShadowCascadesOption {
    NoCascades,
    TwoCascades,
    FourCascades,
}
class UniversalRenderPipelineAsset <<partial>> {
}
abstract class ScriptableRenderer <<partial>> {
}
ScriptableRenderer <|- - ForwardRenderer
UniversalRenderPipelineAsset - -> "shadowCascadeOption" ShadowCascadesOption
ScriptableRenderer - -> "cameraDepth" RenderTargetIdentifier
class URPHelpURLAttribute {
    + URPHelpURLAttribute(pageName:string)
}
class Documentation {
    + <<const>> packageName : string = "com.unity.render-pipelines.universal"
    + {static} GetPageLink(pageName:string) : string
}
CoreRPHelpURLAttribute <|- - URPHelpURLAttribute
DocumentationInfo <|- - Documentation
class ForwardLights {
    + ForwardLights()
    + Setup(context:ScriptableRenderContext, renderingData:RenderingData) : void
}
class LightConstantBuffer <<static>> {
    + {static} _MainLightPosition : int
    + {static} _MainLightColor : int
    + {static} _MainLightOcclusionProbesChannel : int
    + {static} _MainLightLayerMask : int
    + {static} _AdditionalLightsCount : int
    + {static} _AdditionalLightsPosition : int
    + {static} _AdditionalLightsColor : int
    + {static} _AdditionalLightsAttenuation : int
    + {static} _AdditionalLightsSpotDir : int
    + {static} _AdditionalLightOcclusionProbeChannel : int
    + {static} _AdditionalLightsLayerMasks : int
}
class InitParams <<struct>> {
    + clusteredRendering : bool
    + tileSize : int
}
ForwardLights +- - LightConstantBuffer
ForwardLights +- - InitParams
InitParams - -> "lightCookieManager" LightCookieManager
class ForwardRendererData {
    + shadowTransparentReceive : bool <<get>> <<set>>
    + accurateGbufferNormals : bool <<get>> <<set>>
}
class ShaderResources <<sealed>> {
}
ScriptableRendererData <|- - ForwardRendererData
ForwardRendererData - -> "shaders" ShaderResources
ForwardRendererData - -> "postProcessData" PostProcessData
ForwardRendererData - -> "opaqueLayerMask" LayerMask
ForwardRendererData - -> "transparentLayerMask" LayerMask
ForwardRendererData - -> "defaultStencilState" StencilStateData
ForwardRendererData - -> "renderingMode" RenderingMode
ForwardRendererData +- - ShaderResources
ShaderResources - -> "blitPS" Shader
ShaderResources - -> "copyDepthPS" Shader
ShaderResources - -> "screenSpaceShadowPS" Shader
ShaderResources - -> "samplingPS" Shader
ShaderResources - -> "stencilDeferredPS" Shader
ShaderResources - -> "fallbackErrorPS" Shader
ShaderResources - -> "materialErrorPS" Shader
ShaderResources - -> "cameraMotionVector" Shader
ShaderResources - -> "objectMotionVector" Shader
enum IntermediateTextureMode {
    Auto,
    Always,
}
class LightCookieManager {
    + LightCookieManager(settings:Settings)
    + isInitialized() : bool
    + Dispose() : void
    + GetLightCookieShaderDataIndex(visibleLightIndex:int) : int
    + Setup(ctx:ScriptableRenderContext, cmd:CommandBuffer, lightData:LightData) : void
}
class ShaderProperty <<static>> {
    + {static} <<readonly>> mainLightTexture : int
    + {static} <<readonly>> mainLightWorldToLight : int
    + {static} <<readonly>> mainLightCookieTextureFormat : int
    + {static} <<readonly>> additionalLightsCookieAtlasTexture : int
    + {static} <<readonly>> additionalLightsCookieAtlasTextureFormat : int
    + {static} <<readonly>> additionalLightsCookieEnableBits : int
    + {static} <<readonly>> additionalLightsCookieAtlasUVRectBuffer : int
    + {static} <<readonly>> additionalLightsCookieAtlasUVRects : int
    + {static} <<readonly>> additionalLightsWorldToLightBuffer : int
    + {static} <<readonly>> additionalLightsLightTypeBuffer : int
    + {static} <<readonly>> additionalLightsWorldToLights : int
    + {static} <<readonly>> additionalLightsLightTypes : int
}
enum LightCookieShaderFormat {
    None= -1,
    RGB= 0,
    Alpha= 1,
    Red= 2,
}
class Settings <<struct>> {
    + maxAdditionalLights : int
    + cubeOctahedralSizeScale : float
    + useStructuredBuffer : bool
    + {static} GetDefault() : Settings
}
class Sorting <<struct>> {
    + {static} QuickSort(data:T[], compare:Func<T, T, int>) : void
    + {static} QuickSort(data:T[], start:int, end:int, compare:Func<T, T, int>) : void
    {static} + InsertionSort(data:T[], start:int, end:int, compare:Func<T, T, int>) : void
}
class LightCookieMapping <<struct>> {
    + visibleLightIndex : ushort
    + lightBufferIndex : ushort
}
class "WorkSlice`1"<T> <<struct>> {
    + WorkSlice(src:T[], srcLen:int)
    + WorkSlice(src:T[], srcStart:int, srcLen:int)
    + length : int <<get>>
    + capacity : int <<get>>
    + Sort(compare:Func<T, T, int>) : void
}
class WorkMemory {
    + Resize(size:int) : void
}
class ShaderBitArray <<struct>> {
    + elemLength : int <<get>>
    + bitCapacity : int <<get>>
    + Resize(bitCount:int) : void
    + Clear() : void
    + <<override>> ToString() : string
}
class LightCookieShaderData {
    + isUploaded : bool <<get>> <<set>>
    + LightCookieShaderData(size:int, useStructuredBuffer:bool)
    + Dispose() : void
    + Resize(size:int) : void
    + Upload(cmd:CommandBuffer) : void
    + Clear(cmd:CommandBuffer) : void
}
class AtlasSettings <<struct>> {
    + useMips : bool
    + isPow2 : bool <<get>>
    + isSquare : bool <<get>>
}
class "Func`3"<T1,T2,T3> {
}
IDisposable <|- - LightCookieManager
LightCookieManager +- - ShaderProperty
LightCookieManager +- - LightCookieShaderFormat
LightCookieManager +- - Settings
Settings - -> "atlas" AtlasSettings
LightCookieManager +- - Sorting
LightCookieManager +- - LightCookieMapping
LightCookieMapping - -> "light" Light
LightCookieMapping o-> "s_CompareByCookieSize<LightCookieMapping,LightCookieMapping,int>" "Func`3"
LightCookieMapping o-> "s_CompareByBufferIndex<LightCookieMapping,LightCookieMapping,int>" "Func`3"
LightCookieManager +- - "WorkSlice`1"
LightCookieManager +- - WorkMemory
LightCookieManager +- - ShaderBitArray
LightCookieManager +- - LightCookieShaderData
IDisposable <|- - LightCookieShaderData
LightCookieShaderData - -> "cookieEnableBits" ShaderBitArray
Settings +- - AtlasSettings
AtlasSettings - -> "resolution" Vector2Int
AtlasSettings - -> "format" GraphicsFormat
class MotionVectorRendering <<sealed>> {
    + Clear() : void
    + GetMotionDataForCamera(camera:Camera, camData:CameraData) : PreviousFrameData
}
MotionVectorRendering - -> "instance" MotionVectorRendering
class MotionVectorsPersistentData <<sealed>> {
    + Update(cameraData:CameraData) : void
}
class ScriptableRenderer <<partial>> {
}
class Profiling <<static>> <<partial>> {
}
class RenderPassDescriptor <<struct>> {
}
ScriptableRenderer +- - Profiling
Profiling o-> "setMRTAttachmentsList" ProfilingSampler
Profiling o-> "setAttachmentList" ProfilingSampler
Profiling o-> "configure" ProfilingSampler
Profiling o-> "execute" ProfilingSampler
Profiling o-> "setupFrameData" ProfilingSampler
ScriptableRenderer +- - RenderPassDescriptor
class NormalReconstruction <<static>> {
    + {static} SetupProperties(cmd:CommandBuffer, cameraData:CameraData) : void
}
class PostProcessPasses <<struct>> {
    + isCreated : bool <<get>>
    + PostProcessPasses(rendererPostProcessData:PostProcessData, blitMaterial:Material)
    + Recreate(data:PostProcessData) : void
    + Dispose() : void
}
IDisposable <|- - PostProcessPasses
PostProcessPasses - -> "colorGradingLutPass" ColorGradingLutPass
PostProcessPasses - -> "postProcessPass" PostProcessPass
PostProcessPasses - -> "finalPostProcessPass" PostProcessPass
PostProcessPasses - -> "afterPostProcessColor" RenderTargetHandle
PostProcessPasses - -> "colorGradingLut" RenderTargetHandle
class PostProcessUtils <<static>> {
    + {static} ConfigureDithering(data:PostProcessData, index:int, camera:Camera, material:Material) : int
    + {static} ConfigureDithering(data:PostProcessData, index:int, cameraPixelWidth:int, cameraPixelHeight:int, material:Material) : int
    + {static} ConfigureFilmGrain(data:PostProcessData, settings:FilmGrain, camera:Camera, material:Material) : void
    + {static} ConfigureFilmGrain(data:PostProcessData, settings:FilmGrain, cameraPixelWidth:int, cameraPixelHeight:int, material:Material) : void
}
class ShaderConstants <<static>> {
    + {static} <<readonly>> _Grain_Texture : int
    + {static} <<readonly>> _Grain_Params : int
    + {static} <<readonly>> _Grain_TilingParams : int
    + {static} <<readonly>> _BlueNoise_Texture : int
    + {static} <<readonly>> _Dithering_Params : int
    + {static} <<readonly>> _SourceSize : int
}
PostProcessUtils +- - ShaderConstants
class PreviousFrameData <<sealed>> {
}
class RenderingUtils <<static>> {
    + {static} SetViewAndProjectionMatrices(cmd:CommandBuffer, viewMatrix:Matrix4x4, projectionMatrix:Matrix4x4, setInverseMatrices:bool) : void
    + {static} SupportsRenderTextureFormat(format:RenderTextureFormat) : bool
    + {static} SupportsGraphicsFormat(format:GraphicsFormat, usage:FormatUsage) : bool
}
RenderingUtils - -> "fullscreenMesh" Mesh
class RenderTargetBufferSystem <<sealed>> {
    + RenderTargetBufferSystem(name:string)
    + GetBackBuffer() : RenderTargetHandle
    + GetBackBuffer(cmd:CommandBuffer) : RenderTargetHandle
    + GetFrontBuffer(cmd:CommandBuffer) : RenderTargetHandle
    + Swap() : void
    + Clear(cmd:CommandBuffer) : void
    + SetCameraSettings(cmd:CommandBuffer, desc:RenderTextureDescriptor, filterMode:FilterMode) : void
    + SetCameraSettings(desc:RenderTextureDescriptor, filterMode:FilterMode) : void
    + GetBufferA() : RenderTargetHandle
    + EnableMSAA(enable:bool) : void
}
class SwapBuffer <<struct>> {
    + name : int
    + msaa : int
}
RenderTargetBufferSystem +- - SwapBuffer
SwapBuffer - -> "rt" RenderTargetHandle
class RenderTargetHandle <<struct>> {
    + id : int <<set>> <<get>>
    + RenderTargetHandle(renderTargetIdentifier:RenderTargetIdentifier)
    + Init(shaderProperty:string) : void
    + Init(renderTargetIdentifier:RenderTargetIdentifier) : void
    + Identifier() : RenderTargetIdentifier
    + HasInternalRenderTargetId() : bool
    + Equals(other:RenderTargetHandle) : bool
    + <<override>> Equals(obj:object) : bool
    + <<override>> GetHashCode() : int
}
RenderTargetHandle o-> "CameraTarget" RenderTargetHandle
enum SampleCount {
    One= 1,
    Two= 2,
    Four= 4,
}
abstract class ScriptableRenderer <<partial>> {
    + <<virtual>> SupportedCameraStackingTypes() : int
    + SupportsCameraStackingType(cameraRenderType:CameraRenderType) : bool
    + {static} SetCameraMatrices(cmd:CommandBuffer, cameraData:CameraData, setInverseMatrices:bool) : void
    + ScriptableRenderer(data:ScriptableRendererData)
    + Dispose() : void
    + ConfigureCameraTarget(colorTarget:RenderTargetIdentifier, depthTarget:RenderTargetIdentifier) : void
    + {abstract} Setup(context:ScriptableRenderContext, renderingData:RenderingData) : void
    + <<virtual>> SetupLights(context:ScriptableRenderContext, renderingData:RenderingData) : void
    + <<virtual>> SetupCullingParameters(cullingParameters:ScriptableCullingParameters, cameraData:CameraData) : void
    + <<virtual>> FinishRendering(cmd:CommandBuffer) : void
    + Execute(context:ScriptableRenderContext, renderingData:RenderingData) : void
    + EnqueuePass(pass:ScriptableRenderPass) : void
}
class Profiling <<static>> <<partial>> {
}
class RenderingFeatures {
    + cameraStacking : bool <<get>> <<set>> = false
    + msaa : bool <<get>> <<set>> = true
}
class RenderPassBlock <<static>> {
    + {static} <<readonly>> BeforeRendering : int = 0
    + {static} <<readonly>> MainRenderingOpaque : int = 1
    + {static} <<readonly>> MainRenderingTransparent : int = 2
    + {static} <<readonly>> AfterRendering : int = 3
}
class RenderBlocks <<struct>> {
    + RenderBlocks(activeRenderPassQueue:List<ScriptableRenderPass>)
    + Dispose() : void
    + GetLength(index:int) : int
    + GetRange(index:int) : BlockRange
}
class RenderBlock <<static>> {
}
class RenderPass <<static>> {
}
class BlockRange <<struct>> {
    + BlockRange(begin:int, end:int)
    + GetEnumerator() : BlockRange
    + MoveNext() : bool
    + Current : int <<get>>
    + Dispose() : void
}
IDisposable <|- - ScriptableRenderer
ScriptableRenderer - -> "cameraColorTarget" RenderTargetIdentifier
ScriptableRenderer - -> "cameraDepthTarget" RenderTargetIdentifier
ScriptableRenderer o-> "supportedRenderingFeatures" RenderingFeatures
ScriptableRenderer +- - Profiling
Profiling o-> "setPerCameraShaderVariables" ProfilingSampler
Profiling o-> "sortRenderPasses" ProfilingSampler
Profiling o-> "setupLights" ProfilingSampler
Profiling o-> "setupCamera" ProfilingSampler
Profiling o-> "addRenderPasses" ProfilingSampler
Profiling o-> "clearRenderingState" ProfilingSampler
Profiling o-> "internalStartRendering" ProfilingSampler
Profiling o-> "internalFinishRendering" ProfilingSampler
Profiling o-> "drawGizmos" ProfilingSampler
ScriptableRenderer +- - RenderingFeatures
ScriptableRenderer +- - RenderPassBlock
ScriptableRenderer +- - RenderBlocks
IDisposable <|- - RenderBlocks
Profiling +- - RenderBlock
RenderBlock o-> "beforeRendering" ProfilingSampler
RenderBlock o-> "mainRenderingOpaque" ProfilingSampler
RenderBlock o-> "mainRenderingTransparent" ProfilingSampler
RenderBlock o-> "afterRendering" ProfilingSampler
Profiling +- - RenderPass
RenderPass o-> "configure" ProfilingSampler
RenderBlocks +- - BlockRange
IDisposable <|- - BlockRange
abstract class ScriptableRendererData {
    + <<new>> SetDirty() : void
    + useNativeRenderPass : bool <<get>> <<set>>
}
class DebugShaderResources <<sealed>> {
}
class "List`1"<T> {
}
ScriptableObject <|- - ScriptableRendererData
ScriptableRendererData - -> "debugShaders" DebugShaderResources
ScriptableRendererData - -> "rendererFeatures<ScriptableRendererFeature>" "List`1"
ScriptableRendererData +- - DebugShaderResources
DebugShaderResources - -> "debugReplacementPS" Shader
abstract class ScriptableRendererFeature {
    + isActive : bool <<get>>
    + {abstract} Create() : void
    + <<virtual>> OnCameraPreCull(renderer:ScriptableRenderer, cameraData:CameraData) : void
    + {abstract} AddRenderPasses(renderer:ScriptableRenderer, renderingData:RenderingData) : void
    + SetActive(active:bool) : void
    + Dispose() : void
}
ScriptableObject <|- - ScriptableRendererFeature
IDisposable <|- - ScriptableRendererFeature
class ShaderData {
    + Dispose() : void
}
IDisposable <|- - ShaderData
enum ShaderPathID {
    Lit,
    SimpleLit,
    Unlit,
    TerrainLit,
    ParticlesLit,
    ParticlesSimpleLit,
    ParticlesUnlit,
    BakedLit,
    SpeedTree7,
    SpeedTree7Billboard,
    SpeedTree8,
}
class ShaderUtils <<static>> {
    + {static} GetShaderPath(id:ShaderPathID) : string
    + {static} GetEnumFromPath(path:string) : ShaderPathID
    + {static} IsLWShader(shader:Shader) : bool
}
class ShadowSliceData <<struct>> {
    + offsetX : int
    + offsetY : int
    + resolution : int
    + Clear() : void
}
class ShadowUtils <<static>> {
    + {static} ExtractDirectionalLightMatrix(cullResults:CullingResults, shadowData:ShadowData, shadowLightIndex:int, cascadeIndex:int, shadowmapWidth:int, shadowmapHeight:int, shadowResolution:int, shadowNearPlane:float, cascadeSplitDistance:Vector4, shadowSliceData:ShadowSliceData, viewMatrix:Matrix4x4, projMatrix:Matrix4x4) : bool
    + {static} ExtractDirectionalLightMatrix(cullResults:CullingResults, shadowData:ShadowData, shadowLightIndex:int, cascadeIndex:int, shadowmapWidth:int, shadowmapHeight:int, shadowResolution:int, shadowNearPlane:float, cascadeSplitDistance:Vector4, shadowSliceData:ShadowSliceData) : bool
    + {static} ExtractSpotLightMatrix(cullResults:CullingResults, shadowData:ShadowData, shadowLightIndex:int, shadowMatrix:Matrix4x4, viewMatrix:Matrix4x4, projMatrix:Matrix4x4, splitData:ShadowSplitData) : bool
    + {static} ExtractPointLightMatrix(cullResults:CullingResults, shadowData:ShadowData, shadowLightIndex:int, cubemapFace:CubemapFace, fovBias:float, shadowMatrix:Matrix4x4, viewMatrix:Matrix4x4, projMatrix:Matrix4x4, splitData:ShadowSplitData) : bool
    + {static} RenderShadowSlice(cmd:CommandBuffer, context:ScriptableRenderContext, shadowSliceData:ShadowSliceData, settings:ShadowDrawingSettings, proj:Matrix4x4, view:Matrix4x4) : void
    + {static} RenderShadowSlice(cmd:CommandBuffer, context:ScriptableRenderContext, shadowSliceData:ShadowSliceData, settings:ShadowDrawingSettings) : void
    + {static} GetMaxTileResolutionInAtlas(atlasWidth:int, atlasHeight:int, tileCount:int) : int
    + {static} ApplySliceTransform(shadowSliceData:ShadowSliceData, atlasWidth:int, atlasHeight:int) : void
    + {static} GetShadowBias(shadowLight:VisibleLight, shadowLightIndex:int, shadowData:ShadowData, lightProjectionMatrix:Matrix4x4, shadowResolution:float) : Vector4
    + {static} SetupShadowCasterConstantBuffer(cmd:CommandBuffer, shadowLight:VisibleLight, shadowBias:Vector4) : void
    + {static} GetTemporaryShadowTexture(width:int, height:int, bits:int) : RenderTexture
}
ShadowSliceData - -> "viewMatrix" Matrix4x4
ShadowSliceData - -> "projectionMatrix" Matrix4x4
ShadowSliceData - -> "shadowTransform" Matrix4x4
ShadowSliceData - -> "splitData" ShadowSplitData
enum StencilUsage {
    UserMask= 0b_0000_1111,
    StencilLight= 0b_0001_0000,
    MaterialMask= 0b_0110_0000,
    MaterialUnlit= 0b_0000_0000,
    MaterialLit= 0b_0010_0000,
    MaterialSimpleLit= 0b_0100_0000,
}
enum CameraOverrideOption {
    Off,
    On,
    UsePipelineSettings,
}
enum RendererOverrideOption {
    Custom,
    UsePipelineSettings,
}
enum AntialiasingMode {
    None,
    FastApproximateAntialiasing,
    SubpixelMorphologicalAntiAliasing,
}
enum CameraRenderType {
    Base,
    Overlay,
}
enum AntialiasingQuality {
    Low,
    Medium,
    High,
}
class CameraExtensions <<static>> {
    + {static} GetUniversalAdditionalCameraData(camera:Camera) : UniversalAdditionalCameraData
    + {static} GetVolumeFrameworkUpdateMode(camera:Camera) : VolumeFrameworkUpdateMode
    + {static} SetVolumeFrameworkUpdateMode(camera:Camera, mode:VolumeFrameworkUpdateMode) : void
    + {static} UpdateVolumeStack(camera:Camera) : void
    + {static} UpdateVolumeStack(camera:Camera, cameraData:UniversalAdditionalCameraData) : void
    + {static} DestroyVolumeStack(camera:Camera) : void
    + {static} DestroyVolumeStack(camera:Camera, cameraData:UniversalAdditionalCameraData) : void
}
class CameraTypeUtility <<static>> {
    + {static} GetName(type:CameraRenderType) : string
}
class UniversalAdditionalCameraData {
    + version : float <<get>>
    + renderShadows : bool <<get>> <<set>>
    + clearDepth : bool <<get>>
    + requiresDepthTexture : bool <<get>> <<set>>
    + requiresColorTexture : bool <<get>> <<set>>
    + SetRenderer(index:int) : void
    + requiresVolumeFrameworkUpdate : bool <<get>>
    + renderPostProcessing : bool <<get>> <<set>>
    + stopNaN : bool <<get>> <<set>>
    + dithering : bool <<get>> <<set>>
    + allowXRRendering : bool <<get>> <<set>>
    + OnBeforeSerialize() : void
    + OnAfterDeserialize() : void
    + OnDrawGizmos() : void
    + OnDestroy() : void
}
class "List`1"<T> {
}
MonoBehaviour <|- - UniversalAdditionalCameraData
ISerializationCallbackReceiver <|- - UniversalAdditionalCameraData
IAdditionalData <|- - UniversalAdditionalCameraData
UniversalAdditionalCameraData - -> "requiresDepthOption" CameraOverrideOption
UniversalAdditionalCameraData - -> "requiresColorOption" CameraOverrideOption
UniversalAdditionalCameraData - -> "renderType" CameraRenderType
UniversalAdditionalCameraData - -> "cameraStack<Camera>" "List`1"
UniversalAdditionalCameraData - -> "scriptableRenderer" ScriptableRenderer
UniversalAdditionalCameraData - -> "volumeLayerMask" LayerMask
UniversalAdditionalCameraData - -> "volumeTrigger" Transform
UniversalAdditionalCameraData - -> "volumeStack" VolumeStack
UniversalAdditionalCameraData - -> "antialiasing" AntialiasingMode
UniversalAdditionalCameraData - -> "antialiasingQuality" AntialiasingQuality
enum LightLayerEnum {
    Nothing= 0,
    LightLayerDefault= 1 << 0,
    LightLayer1= 1 << 1,
    LightLayer2= 1 << 2,
    LightLayer3= 1 << 3,
    LightLayer4= 1 << 4,
    LightLayer5= 1 << 5,
    LightLayer6= 1 << 6,
    LightLayer7= 1 << 7,
    Everything= 0xFF,
}
class LightExtensions <<static>> {
    + {static} GetUniversalAdditionalLightData(light:Light) : UniversalAdditionalLightData
}
class UniversalAdditionalLightData {
    + usePipelineSettings : bool <<get>> <<set>>
    + {static} <<readonly>> AdditionalLightsShadowResolutionTierCustom : int
    + {static} <<readonly>> AdditionalLightsShadowResolutionTierLow : int = 0
    + {static} <<readonly>> AdditionalLightsShadowResolutionTierMedium : int = 1
    + {static} <<readonly>> AdditionalLightsShadowResolutionTierHigh : int = 2
    + {static} <<readonly>> AdditionalLightsShadowDefaultResolutionTier : int
    + {static} <<readonly>> AdditionalLightsShadowDefaultCustomResolution : int = 128
    + {static} <<readonly>> AdditionalLightsShadowMinimumResolution : int = 128
    + additionalLightsShadowResolutionTier : int <<get>>
    + customShadowLayers : bool <<get>> <<set>>
}
MonoBehaviour <|- - UniversalAdditionalLightData
IAdditionalData <|- - UniversalAdditionalLightData
UniversalAdditionalLightData - -> "lightLayerMask" LightLayerEnum
UniversalAdditionalLightData - -> "shadowLayerMask" LightLayerEnum
UniversalAdditionalLightData - -> "lightCookieSize" Vector2
UniversalAdditionalLightData - -> "lightCookieOffset" Vector2
enum RenderingMode {
    Forward,
    Deferred,
}
enum DepthPrimingMode {
    Disabled,
    Auto,
    Forced,
}
class UniversalRenderer <<sealed>> {
    + <<override>> SupportedCameraStackingTypes() : int
    + UniversalRenderer(data:UniversalRendererData)
    + <<override>> Setup(context:ScriptableRenderContext, renderingData:RenderingData) : void
    + <<override>> SetupLights(context:ScriptableRenderContext, renderingData:RenderingData) : void
    + <<override>> SetupCullingParameters(cullingParameters:ScriptableCullingParameters, cameraData:CameraData) : void
    + <<override>> FinishRendering(cmd:CommandBuffer) : void
}
class Profiling <<static>> {
}
class RenderPassInputSummary <<struct>> {
}
ScriptableRenderer <|- - UniversalRenderer
UniversalRenderer - -> "depthPrimingMode" DepthPrimingMode
UniversalRenderer +- - Profiling
Profiling o-> "createCameraRenderTarget" ProfilingSampler
UniversalRenderer +- - RenderPassInputSummary
enum CopyDepthMode {
    AfterOpaques= 0,
    ForcePrepass= 2,
}
class UniversalRendererData {
    + shadowTransparentReceive : bool <<get>> <<set>>
    + accurateGbufferNormals : bool <<get>> <<set>>
}
class ShaderResources <<sealed>> {
}
ScriptableRendererData <|- - UniversalRendererData
ISerializationCallbackReceiver <|- - UniversalRendererData
UniversalRendererData o-> "postProcessData" PostProcessData
UniversalRendererData o-> "shaders" ShaderResources
UniversalRendererData - -> "opaqueLayerMask" LayerMask
UniversalRendererData - -> "transparentLayerMask" LayerMask
UniversalRendererData - -> "defaultStencilState" StencilStateData
UniversalRendererData - -> "renderingMode" RenderingMode
UniversalRendererData - -> "depthPrimingMode" DepthPrimingMode
UniversalRendererData - -> "copyDepthMode" CopyDepthMode
UniversalRendererData - -> "intermediateTextureMode" IntermediateTextureMode
UniversalRendererData +- - ShaderResources
ShaderResources - -> "blitPS" Shader
ShaderResources - -> "copyDepthPS" Shader
ShaderResources - -> "screenSpaceShadowPS" Shader
ShaderResources - -> "samplingPS" Shader
ShaderResources - -> "stencilDeferredPS" Shader
ShaderResources - -> "fallbackErrorPS" Shader
ShaderResources - -> "materialErrorPS" Shader
ShaderResources - -> "cameraMotionVector" Shader
ShaderResources - -> "objectMotionVector" Shader
class UniversalRenderPipeline <<sealed>> <<partial>> {
    + <<const>> k_ShaderTagName : string = "UniversalPipeline"
    + {static} maxShadowBias : float <<get>>
    + {static} minRenderScale : float <<get>>
    + {static} maxRenderScale : float <<get>>
    + {static} maxPerObjectLights : int <<get>>
    + {static} maxVisibleAdditionalLights : int <<get>>
    + <<override>> ToString() : string
    + UniversalRenderPipeline(asset:UniversalRenderPipelineAsset)
    + {static} RenderSingleCamera(context:ScriptableRenderContext, camera:Camera) : void
}
class Profiling <<static>> {
    + {static} TryGetOrAddCameraSampler(camera:Camera) : ProfilingSampler
}
class Pipeline <<static>> {
}
class Renderer <<static>> {
}
class Context <<static>> {
}
class XR <<static>> {
}
RenderPipeline <|- - UniversalRenderPipeline
UniversalRenderPipeline - -> "defaultSettings" RenderPipelineGlobalSettings
UniversalRenderPipeline +- - Profiling
Profiling o-> "unknownSampler" ProfilingSampler
Profiling +- - Pipeline
Pipeline o-> "beginFrameRendering" ProfilingSampler
Pipeline o-> "endFrameRendering" ProfilingSampler
Pipeline o-> "beginCameraRendering" ProfilingSampler
Pipeline o-> "endCameraRendering" ProfilingSampler
Pipeline o-> "initializeCameraData" ProfilingSampler
Pipeline o-> "initializeStackedCameraData" ProfilingSampler
Pipeline o-> "initializeAdditionalCameraData" ProfilingSampler
Pipeline o-> "initializeRenderingData" ProfilingSampler
Pipeline o-> "initializeShadowData" ProfilingSampler
Pipeline o-> "initializeLightData" ProfilingSampler
Pipeline o-> "getPerObjectLightFlags" ProfilingSampler
Pipeline o-> "getMainLightIndex" ProfilingSampler
Pipeline o-> "setupPerFrameShaderConstants" ProfilingSampler
Pipeline +- - Renderer
Renderer o-> "setupCullingParameters" ProfilingSampler
Renderer o-> "setup" ProfilingSampler
Pipeline +- - Context
Context o-> "submit" ProfilingSampler
Pipeline +- - XR
XR o-> "mirrorView" ProfilingSampler
enum MixedLightingSetup {
    None,
    ShadowMask,
    Subtractive,
}
enum ImageScalingMode {
    None,
    Upscaling,
    Downscaling,
}
enum ImageUpscalingFilter {
    Linear,
    Point,
    FSR,
}
class RenderingData <<struct>> {
    + supportsDynamicBatching : bool
    + postProcessingEnabled : bool
}
class LightData <<struct>> {
    + mainLightIndex : int
    + additionalLightsCount : int
    + maxPerObjectAdditionalLightsCount : int
    + shadeAdditionalLightsPerVertex : bool
    + supportsMixedLighting : bool
    + reflectionProbeBoxProjection : bool
    + reflectionProbeBlending : bool
    + supportsLightLayers : bool
    + supportsAdditionalLights : bool
}
class CameraData <<struct>> {
    + GetViewMatrix(viewIndex:int) : Matrix4x4
    + GetProjectionMatrix(viewIndex:int) : Matrix4x4
    + GetGPUProjectionMatrix(viewIndex:int) : Matrix4x4
    + renderScale : float
    + clearDepth : bool
    + isDefaultViewport : bool
    + isHdrEnabled : bool
    + requiresDepthTexture : bool
    + requiresOpaqueTexture : bool
    + postProcessingRequiresDepthTexture : bool
    + isSceneViewCamera : bool <<get>>
    + isPreviewCamera : bool <<get>>
    + IsCameraProjectionMatrixFlipped() : bool
    + isStereoEnabled : bool
    + maxShadowDistance : float
    + postProcessEnabled : bool
    + isStopNaNEnabled : bool
    + isDitheringEnabled : bool
    + resolveFinalTarget : bool
}
class ShadowData <<struct>> {
    + supportsMainLightShadows : bool
    + requiresScreenSpaceShadowResolve : bool
    + mainLightShadowmapWidth : int
    + mainLightShadowmapHeight : int
    + mainLightShadowCascadesCount : int
    + mainLightShadowCascadeBorder : float
    + supportsAdditionalLightShadows : bool
    + additionalLightsShadowmapWidth : int
    + additionalLightsShadowmapHeight : int
    + supportsSoftShadows : bool
    + shadowmapDepthBufferBits : int
}
class PreTile <<struct>> {
}
class TileData <<struct>> {
    + tileID : uint
    + listBitMask : uint
    + relLightOffset : uint
    + unused : uint
}
class PunctualLightData <<struct>> {
    + radius : float
    + flags : int
    + layerMask : uint
}
class ShaderPropertyId <<static>> {
    + {static} <<readonly>> glossyEnvironmentColor : int
    + {static} <<readonly>> subtractiveShadowColor : int
    + {static} <<readonly>> glossyEnvironmentCubeMap : int
    + {static} <<readonly>> glossyEnvironmentCubeMapHDR : int
    + {static} <<readonly>> ambientSkyColor : int
    + {static} <<readonly>> ambientEquatorColor : int
    + {static} <<readonly>> ambientGroundColor : int
    + {static} <<readonly>> time : int
    + {static} <<readonly>> sinTime : int
    + {static} <<readonly>> cosTime : int
    + {static} <<readonly>> deltaTime : int
    + {static} <<readonly>> timeParameters : int
    + {static} <<readonly>> scaledScreenParams : int
    + {static} <<readonly>> worldSpaceCameraPos : int
    + {static} <<readonly>> screenParams : int
    + {static} <<readonly>> projectionParams : int
    + {static} <<readonly>> zBufferParams : int
    + {static} <<readonly>> orthoParams : int
    + {static} <<readonly>> globalMipBias : int
    + {static} <<readonly>> screenSize : int
    + {static} <<readonly>> viewMatrix : int
    + {static} <<readonly>> projectionMatrix : int
    + {static} <<readonly>> viewAndProjectionMatrix : int
    + {static} <<readonly>> inverseViewMatrix : int
    + {static} <<readonly>> inverseProjectionMatrix : int
    + {static} <<readonly>> inverseViewAndProjectionMatrix : int
    + {static} <<readonly>> cameraProjectionMatrix : int
    + {static} <<readonly>> inverseCameraProjectionMatrix : int
    + {static} <<readonly>> worldToCameraMatrix : int
    + {static} <<readonly>> cameraToWorldMatrix : int
    + {static} <<readonly>> cameraWorldClipPlanes : int
    + {static} <<readonly>> billboardNormal : int
    + {static} <<readonly>> billboardTangent : int
    + {static} <<readonly>> billboardCameraParams : int
    + {static} <<readonly>> sourceTex : int
    + {static} <<readonly>> scaleBias : int
    + {static} <<readonly>> scaleBiasRt : int
    + {static} <<readonly>> rendererColor : int
}
class PostProcessingData <<struct>> {
    + lutSize : int
    + useFastSRGBLinearConversion : bool
}
class ShaderKeywordStrings <<static>> {
    + <<const>> MainLightShadows : string = "_MAIN_LIGHT_SHADOWS"
    + <<const>> MainLightShadowCascades : string = "_MAIN_LIGHT_SHADOWS_CASCADE"
    + <<const>> MainLightShadowScreen : string = "_MAIN_LIGHT_SHADOWS_SCREEN"
    + <<const>> CastingPunctualLightShadow : string = "_CASTING_PUNCTUAL_LIGHT_SHADOW"
    + <<const>> AdditionalLightsVertex : string = "_ADDITIONAL_LIGHTS_VERTEX"
    + <<const>> AdditionalLightsPixel : string = "_ADDITIONAL_LIGHTS"
    + <<const>> AdditionalLightShadows : string = "_ADDITIONAL_LIGHT_SHADOWS"
    + <<const>> ReflectionProbeBoxProjection : string = "_REFLECTION_PROBE_BOX_PROJECTION"
    + <<const>> ReflectionProbeBlending : string = "_REFLECTION_PROBE_BLENDING"
    + <<const>> SoftShadows : string = "_SHADOWS_SOFT"
    + <<const>> MixedLightingSubtractive : string = "_MIXED_LIGHTING_SUBTRACTIVE"
    + <<const>> LightmapShadowMixing : string = "LIGHTMAP_SHADOW_MIXING"
    + <<const>> ShadowsShadowMask : string = "SHADOWS_SHADOWMASK"
    + <<const>> LightLayers : string = "_LIGHT_LAYERS"
    + <<const>> RenderPassEnabled : string = "_RENDER_PASS_ENABLED"
    + <<const>> BillboardFaceCameraPos : string = "BILLBOARD_FACE_CAMERA_POS"
    + <<const>> LightCookies : string = "_LIGHT_COOKIES"
    + <<const>> DepthNoMsaa : string = "_DEPTH_NO_MSAA"
    + <<const>> DepthMsaa2 : string = "_DEPTH_MSAA_2"
    + <<const>> DepthMsaa4 : string = "_DEPTH_MSAA_4"
    + <<const>> DepthMsaa8 : string = "_DEPTH_MSAA_8"
    + <<const>> LinearToSRGBConversion : string = "_LINEAR_TO_SRGB_CONVERSION"
    + <<const>> DBufferMRT1 : string = "_DBUFFER_MRT1"
    + <<const>> DBufferMRT2 : string = "_DBUFFER_MRT2"
    + <<const>> DBufferMRT3 : string = "_DBUFFER_MRT3"
    + <<const>> DecalNormalBlendLow : string = "_DECAL_NORMAL_BLEND_LOW"
    + <<const>> DecalNormalBlendMedium : string = "_DECAL_NORMAL_BLEND_MEDIUM"
    + <<const>> DecalNormalBlendHigh : string = "_DECAL_NORMAL_BLEND_HIGH"
    + <<const>> SmaaLow : string = "_SMAA_PRESET_LOW"
    + <<const>> SmaaMedium : string = "_SMAA_PRESET_MEDIUM"
    + <<const>> SmaaHigh : string = "_SMAA_PRESET_HIGH"
    + <<const>> PaniniGeneric : string = "_GENERIC"
    + <<const>> PaniniUnitDistance : string = "_UNIT_DISTANCE"
    + <<const>> BloomLQ : string = "_BLOOM_LQ"
    + <<const>> BloomHQ : string = "_BLOOM_HQ"
    + <<const>> BloomLQDirt : string = "_BLOOM_LQ_DIRT"
    + <<const>> BloomHQDirt : string = "_BLOOM_HQ_DIRT"
    + <<const>> UseRGBM : string = "_USE_RGBM"
    + <<const>> Distortion : string = "_DISTORTION"
    + <<const>> ChromaticAberration : string = "_CHROMATIC_ABERRATION"
    + <<const>> HDRGrading : string = "_HDR_GRADING"
    + <<const>> TonemapACES : string = "_TONEMAP_ACES"
    + <<const>> TonemapNeutral : string = "_TONEMAP_NEUTRAL"
    + <<const>> FilmGrain : string = "_FILM_GRAIN"
    + <<const>> Fxaa : string = "_FXAA"
    + <<const>> Dithering : string = "_DITHERING"
    + <<const>> ScreenSpaceOcclusion : string = "_SCREEN_SPACE_OCCLUSION"
    + <<const>> PointSampling : string = "_POINT_SAMPLING"
    + <<const>> Rcas : string = "_RCAS"
    + <<const>> Gamma20 : string = "_GAMMA_20"
    + <<const>> HighQualitySampling : string = "_HIGH_QUALITY_SAMPLING"
    + <<const>> DOWNSAMPLING_SIZE_2 : string = "DOWNSAMPLING_SIZE_2"
    + <<const>> DOWNSAMPLING_SIZE_4 : string = "DOWNSAMPLING_SIZE_4"
    + <<const>> DOWNSAMPLING_SIZE_8 : string = "DOWNSAMPLING_SIZE_8"
    + <<const>> DOWNSAMPLING_SIZE_16 : string = "DOWNSAMPLING_SIZE_16"
    + <<const>> _SPOT : string = "_SPOT"
    + <<const>> _DIRECTIONAL : string = "_DIRECTIONAL"
    + <<const>> _POINT : string = "_POINT"
    + <<const>> _DEFERRED_STENCIL : string = "_DEFERRED_STENCIL"
    + <<const>> _DEFERRED_FIRST_LIGHT : string = "_DEFERRED_FIRST_LIGHT"
    + <<const>> _DEFERRED_MAIN_LIGHT : string = "_DEFERRED_MAIN_LIGHT"
    + <<const>> _GBUFFER_NORMALS_OCT : string = "_GBUFFER_NORMALS_OCT"
    + <<const>> _DEFERRED_MIXED_LIGHTING : string = "_DEFERRED_MIXED_LIGHTING"
    + <<const>> LIGHTMAP_ON : string = "LIGHTMAP_ON"
    + <<const>> DYNAMICLIGHTMAP_ON : string = "DYNAMICLIGHTMAP_ON"
    + <<const>> _ALPHATEST_ON : string = "_ALPHATEST_ON"
    + <<const>> DIRLIGHTMAP_COMBINED : string = "DIRLIGHTMAP_COMBINED"
    + <<const>> _DETAIL_MULX2 : string = "_DETAIL_MULX2"
    + <<const>> _DETAIL_SCALED : string = "_DETAIL_SCALED"
    + <<const>> _CLEARCOAT : string = "_CLEARCOAT"
    + <<const>> _CLEARCOATMAP : string = "_CLEARCOATMAP"
    + <<const>> DEBUG_DISPLAY : string = "DEBUG_DISPLAY"
    + <<const>> _EMISSION : string = "_EMISSION"
    + <<const>> _RECEIVE_SHADOWS_OFF : string = "_RECEIVE_SHADOWS_OFF"
    + <<const>> _SURFACE_TYPE_TRANSPARENT : string = "_SURFACE_TYPE_TRANSPARENT"
    + <<const>> _ALPHAPREMULTIPLY_ON : string = "_ALPHAPREMULTIPLY_ON"
    + <<const>> _ALPHAMODULATE_ON : string = "_ALPHAMODULATE_ON"
    + <<const>> _NORMALMAP : string = "_NORMALMAP"
    + <<const>> EDITOR_VISUALIZATION : string = "EDITOR_VISUALIZATION"
    + <<const>> UseDrawProcedural : string = "_USE_DRAW_PROCEDURAL"
}
class UniversalRenderPipeline <<sealed>> <<partial>> {
    + {static} IsGameCamera(camera:Camera) : bool
    + {static} IsStereoEnabled(camera:Camera) : bool
    + {static} GetLightAttenuationAndSpotDirection(lightType:LightType, lightRange:float, lightLocalToWorldMatrix:Matrix4x4, spotAngle:float, innerSpotAngle:float?, lightAttenuation:Vector4, lightSpotDir:Vector4) : void
    + {static} InitializeLightConstants_Common(lights:NativeArray<VisibleLight>, lightIndex:int, lightPos:Vector4, lightColor:Vector4, lightAttenuation:Vector4, lightSpotDir:Vector4, lightOcclusionProbeChannel:Vector4) : void
}
enum URPProfileId {
    UniversalRenderTotal,
    UpdateVolumeFramework,
    RenderCameraStack,
    AdditionalLightsShadow,
    ColorGradingLUT,
    CopyColor,
    CopyDepth,
    DepthNormalPrepass,
    DepthPrepass,
    DrawOpaqueObjects,
    DrawTransparentObjects,
    LightCookies,
    MainLightShadow,
    ResolveShadows,
    SSAO,
    StopNaNs,
    SMAA,
    GaussianDepthOfField,
    BokehDepthOfField,
    MotionBlur,
    PaniniProjection,
    UberPostProcess,
    Bloom,
    LensFlareDataDriven,
    MotionVectors,
    FinalBlit,
}
class "NativeArray`1"<T> {
}
class "IEnumerator`1"<T> {
}
class "List`1"<T> {
}
RenderingData - -> "cullResults" CullingResults
RenderingData - -> "cameraData" CameraData
RenderingData - -> "lightData" LightData
RenderingData - -> "shadowData" ShadowData
RenderingData - -> "postProcessingData" PostProcessingData
RenderingData - -> "perObjectData" PerObjectData
LightData - -> "visibleLights<VisibleLight>" "NativeArray`1"
CameraData - -> "camera" Camera
CameraData - -> "renderType" CameraRenderType
CameraData - -> "targetTexture" RenderTexture
CameraData - -> "cameraTargetDescriptor" RenderTextureDescriptor
CameraData - -> "cameraType" CameraType
CameraData - -> "defaultOpaqueSortFlags" SortingCriteria
CameraData - -> "captureActions<Action<RenderTargetIdentifier, CommandBuffer>>" "IEnumerator`1"
CameraData - -> "volumeLayerMask" LayerMask
CameraData - -> "volumeTrigger" Transform
CameraData - -> "antialiasing" AntialiasingMode
CameraData - -> "antialiasingQuality" AntialiasingQuality
CameraData - -> "renderer" ScriptableRenderer
CameraData - -> "worldSpaceCameraPos" Vector3
ShadowData - -> "mainLightShadowCascadesSplit" Vector3
ShadowData - -> "bias<Vector4>" "List`1"
ShadowData - -> "resolution<int>" "List`1"
PunctualLightData - -> "wsPos" Vector3
PunctualLightData - -> "color" Vector4
PunctualLightData - -> "attenuation" Vector4
PunctualLightData - -> "spotDirection" Vector3
PunctualLightData - -> "occlusionProbeInfo" Vector4
PostProcessingData - -> "gradingMode" ColorGradingMode
UniversalRenderPipeline - -> "asset" UniversalRenderPipelineAsset
class UniversalRenderPipelineGlobalSettings <<partial>> {
    + OnBeforeSerialize() : void
    + OnAfterDeserialize() : void
    + {static} <<readonly>> defaultAssetName : string = "UniversalRenderPipelineGlobalSettings"
    + lightLayerName0 : string
    + lightLayerName1 : string
    + lightLayerName2 : string
    + lightLayerName3 : string
    + lightLayerName4 : string
    + lightLayerName5 : string
    + lightLayerName6 : string
    + lightLayerName7 : string
    + supportRuntimeDebugDisplay : bool = false
    + stripDebugVariants : bool <<get>> <<set>>
    + stripUnusedPostProcessingVariants : bool <<get>> <<set>>
    + stripUnusedVariants : bool <<get>> <<set>>
}
RenderPipelineGlobalSettings <|- - UniversalRenderPipelineGlobalSettings
ISerializationCallbackReceiver <|- - UniversalRenderPipelineGlobalSettings
UniversalRenderPipelineGlobalSettings - -> "instance" UniversalRenderPipelineGlobalSettings
class ShaderInput <<static>> <<partial>> {
}
class ShadowData <<struct>> {
}
ShaderInput +- - ShadowData
ShadowData - -> "worldToShadowMatrix" Matrix4x4
ShadowData - -> "shadowParams" Vector4
class ShaderInput <<static>> <<partial>> {
}
class LightData <<struct>> {
    + layerMask : uint
}
ShaderInput +- - LightData
LightData - -> "position" Vector4
LightData - -> "color" Vector4
LightData - -> "attenuation" Vector4
LightData - -> "spotDirection" Vector4
LightData - -> "occlusionProbeChannels" Vector4
class ShadersDummy {
}
class DefaultShaderIncludes <<static>> {
    + {static} GetAssetsPackagePath() : string
}
class ShaderGraphAnalytics {
    + {static} SendShaderGraphEvent(assetGuid:string, graph:GraphData) : void
}
class AnalyticsData <<struct>> {
    + nodes : string
    + node_count : int
    + asset_guid : string
    + subgraph_count : int
}
ShaderGraphAnalytics +- - AnalyticsData
class ShaderGraphPreferences <<static>> {
}
class Keys <<static>> {
}
ShaderGraphPreferences +- - Keys
class ShaderGraphProjectSettings {
}
class ShaderGraphProjectSettingsProvider {
    + ShaderGraphProjectSettingsProvider(path:string, scopes:SettingsScope, keywords:IEnumerable<string>)
    + <<override>> OnActivate(searchContext:string, rootElement:VisualElement) : void
    + {static} CreateShaderGraphProjectSettingsProvider() : SettingsProvider
}
class "ScriptableSingleton`1"<T> {
}
class Styles {
}
"ScriptableSingleton`1" "<ShaderGraphProjectSettings>" <|- - ShaderGraphProjectSettings
SettingsProvider <|- - ShaderGraphProjectSettingsProvider
ShaderGraphProjectSettingsProvider +- - Styles
Styles o-> "CustomInterpLabel" GUIContent
Styles o-> "CustomInterpWarnThresholdLabel" GUIContent
Styles o-> "CustomInterpErrorThresholdLabel" GUIContent
Styles o-> "ReadMore" GUIContent
class DummyShaderGraphLibrary {
}
class RequireApiProfileAttribute {
    + RequireApiProfileAttribute(apiProfiles:ApiCompatibilityLevel[])
}
NUnitAttribute <|- - RequireApiProfileAttribute
IApplyToTest <|- - RequireApiProfileAttribute
class RequirePlatformSupportAttribute {
    + RequirePlatformSupportAttribute(platforms:BuildTarget[])
}
NUnitAttribute <|- - RequirePlatformSupportAttribute
IApplyToTest <|- - RequirePlatformSupportAttribute
class TestBuildAssemblyFilter {
    + callbackOrder : int <<get>>
    + OnFilterAssemblies(buildOptions:BuildOptions, assemblies:string[]) : string[]
}
IFilterBuildAssemblies <|- - TestBuildAssemblyFilter
class TestResultSerializer {
    + id : string
    + fullName : string
    + uniqueName : string
    + {static} MakeFromTestResult(result:ITestResult) : TestResultSerializer
    + RestoreTestResult(result:TestResult) : void
    + IsPassed() : bool
}
class TestRunnerWindow {
    + {static} ShowWindow() : void
    + AddItemsToMenu(menu:GenericMenu) : void
}
class Styles <<static>> {
}
enum TestRunnerMenuLabels {
    PlayMode= 0,
    EditMode= 1,
}
EditorWindow <|- - TestRunnerWindow
IHasCustomMenu <|- - TestRunnerWindow
TestRunnerWindow +- - Styles
Styles - -> "info" GUIStyle
Styles - -> "testList" GUIStyle
TestRunnerWindow +- - TestRunnerMenuLabels
class TestRunnerWindowSettings {
    + verticalSplit : bool
    + TestRunnerWindowSettings(prefsKey:string)
    + ToggleVerticalSplit() : void
}
class ActionExamples_HideAPI {
}
class SampleClipAction {
    + <<override>> Validate(clip:IEnumerable<TimelineClip>) : ActionValidity
    + <<override>> Execute(items:IEnumerable<TimelineClip>) : bool
    + {static} HandleShortCut(args:ShortcutArguments) : void
}
class SampleMarkerAction {
    + <<override>> Validate(markers:IEnumerable<IMarker>) : ActionValidity
    + <<override>> Execute(items:IEnumerable<IMarker>) : bool
    + {static} HandleShortCut(args:ShortcutArguments) : void
}
class SampleTrackAction {
    + <<override>> Validate(tracks:IEnumerable<TrackAsset>) : ActionValidity
    + <<override>> Execute(tracks:IEnumerable<TrackAsset>) : bool
    + {static} HandleShortCut(args:ShortcutArguments) : void
}
class SampleTimelineAction {
    + <<override>> Validate(context:ActionContext) : ActionValidity
    + <<override>> Execute(context:ActionContext) : bool
    + {static} HandleShortCut(args:ShortcutArguments) : void
}
ActionExamples_HideAPI +- - SampleClipAction
ClipAction <|- - SampleClipAction
ActionExamples_HideAPI +- - SampleMarkerAction
MarkerAction <|- - SampleMarkerAction
ActionExamples_HideAPI +- - SampleTrackAction
TrackAction <|- - SampleTrackAction
ActionExamples_HideAPI +- - SampleTimelineAction
TimelineAction <|- - SampleTimelineAction
class MarkerEditorExamples {
}
class TimelineAttributesExamples_HideAPI {
}
class LightTrack {
}
class SimpleMenuAction {
    + <<override>> Validate(actionContext:ActionContext) : ActionValidity
    + <<override>> Execute(actionContext:ActionContext) : bool
}
class MenuActionWithPriority {
    + <<override>> Validate(actionContext:ActionContext) : ActionValidity
    + <<override>> Execute(actionContext:ActionContext) : bool
}
class MenuActionInsideSubMenu {
    + <<override>> Validate(actionContext:ActionContext) : ActionValidity
    + <<override>> Execute(actionContext:ActionContext) : bool
}
class ShortcutAction {
    + <<override>> Validate(_:ActionContext) : ActionValidity
    + <<override>> Execute(_:ActionContext) : bool
    + {static} HandleShortCut(args:ShortcutArguments) : void
}
class SetNameToTypeAction {
    + <<override>> Validate(items:IEnumerable<TrackAsset>) : ActionValidity
    + <<override>> Execute(items:IEnumerable<TrackAsset>) : bool
}
class MyMarker {
}
class MyCustomClipEditor {
}
class MyCustomClip {
    + <<override>> CreatePlayable(graph:PlayableGraph, owner:GameObject) : Playable
}
TimelineAttributesExamples_HideAPI +- - LightTrack
TrackAsset <|- - LightTrack
TimelineAttributesExamples_HideAPI +- - SimpleMenuAction
TimelineAction <|- - SimpleMenuAction
TimelineAttributesExamples_HideAPI +- - MenuActionWithPriority
TimelineAction <|- - MenuActionWithPriority
TimelineAttributesExamples_HideAPI +- - MenuActionInsideSubMenu
TimelineAction <|- - MenuActionInsideSubMenu
TimelineAttributesExamples_HideAPI +- - ShortcutAction
TimelineAction <|- - ShortcutAction
TimelineAttributesExamples_HideAPI +- - SetNameToTypeAction
TrackAction <|- - SetNameToTypeAction
TimelineAttributesExamples_HideAPI +- - MyMarker
TimelineAttributesExamples_HideAPI +- - MyCustomClipEditor
ClipEditor <|- - MyCustomClipEditor
TimelineAttributesExamples_HideAPI +- - MyCustomClip
PlayableAsset <|- - MyCustomClip
class TimelineEditorExamples_HideAPI {
}
class TrackAssetExamples_HideAPI {
}
class CustomAnimationTrack {
}
TrackAssetExamples_HideAPI +- - CustomAnimationTrack
TrackAsset <|- - CustomAnimationTrack
class CurveEditUtility <<static>> {
    + {static} IsRotationKey(binding:EditorCurveBinding) : bool
    + {static} AddKey(clip:AnimationClip, sourceBinding:EditorCurveBinding, prop:SerializedProperty, time:double) : void
    + {static} RemoveKey(clip:AnimationClip, sourceBinding:EditorCurveBinding, prop:SerializedProperty, time:double) : void
    + {static} RemoveObjectKey(clip:AnimationClip, sourceBinding:EditorCurveBinding, time:double) : void
    + {static} GetObjectKeyCount(clip:AnimationClip, sourceBinding:EditorCurveBinding) : int
    + {static} RemoveCurves(clip:AnimationClip, prop:SerializedProperty) : void
    + {static} AddKeyFrameToCurve(curve:AnimationCurve, time:float, framerate:float, value:float, stepped:bool) : void
    + {static} RemoveKeyFrameFromCurve(curve:AnimationCurve, time:float, framerate:float) : bool
    + {static} GetKeyValue(prop:SerializedProperty) : float
    + {static} SetFromKeyValue(prop:SerializedProperty, keyValue:float) : void
    + {static} GetKeyframeAtTime(curve:AnimationCurve, time:float, frameRate:float) : int
    + {static} GetKeyframeAtTime(curve:ObjectReferenceKeyframe[], time:float, frameRate:float) : int
    + {static} GetKeyTime(time:float, frameRate:float) : float
    + {static} KeyCompare(timeA:float, timeB:float, frameRate:float) : int
    + {static} Evaluate(curve:ObjectReferenceKeyframe[], time:float) : Object
    + {static} EvaluateIndex(curve:ObjectReferenceKeyframe[], time:float) : int
    + {static} ShiftBySeconds(clip:AnimationClip, time:float) : void
    + {static} ScaleTime(clip:AnimationClip, scale:float) : void
    + {static} CreateMatchingCurve(curve:AnimationCurve) : AnimationCurve
    + {static} SanitizeCurveKeys(keys:Keyframe[], easeIn:bool) : Keyframe[]
}
class DirectorNamedColor {
    + SetDefault() : void
    + ToText(path:string) : void
    + FromText(text:string) : void
    + {static} CreateAndLoadFromText(text:string) : DirectorNamedColor
}
ScriptableObject <|- - DirectorNamedColor
DirectorNamedColor - -> "colorPlayhead" Color
DirectorNamedColor - -> "colorSelection" Color
DirectorNamedColor - -> "colorEndmarker" Color
DirectorNamedColor - -> "colorGroup" Color
DirectorNamedColor - -> "colorGroupTrackBackground" Color
DirectorNamedColor - -> "colorAnimation" Color
DirectorNamedColor - -> "colorAnimationRecorded" Color
DirectorNamedColor - -> "colorAudio" Color
DirectorNamedColor - -> "colorAudioWaveform" Color
DirectorNamedColor - -> "colorActivation" Color
DirectorNamedColor - -> "colorDropTarget" Color
DirectorNamedColor - -> "colorClipFont" Color
DirectorNamedColor - -> "colorInvalidClipOverlay" Color
DirectorNamedColor - -> "colorTrackBackground" Color
DirectorNamedColor - -> "colorTrackHeaderBackground" Color
DirectorNamedColor - -> "colorTrackDarken" Color
DirectorNamedColor - -> "colorTrackBackgroundRecording" Color
DirectorNamedColor - -> "colorInfiniteTrackBackgroundRecording" Color
DirectorNamedColor - -> "colorTrackBackgroundSelected" Color
DirectorNamedColor - -> "colorTrackFont" Color
DirectorNamedColor - -> "colorClipUnion" Color
DirectorNamedColor - -> "colorTopOutline3" Color
DirectorNamedColor - -> "colorDurationLine" Color
DirectorNamedColor - -> "colorRange" Color
DirectorNamedColor - -> "colorSequenceBackground" Color
DirectorNamedColor - -> "colorTooltipBackground" Color
DirectorNamedColor - -> "colorInfiniteClipLine" Color
DirectorNamedColor - -> "colorDefaultTrackDrawer" Color
DirectorNamedColor o-> "colorDuration" Color
DirectorNamedColor o-> "colorRecordingClipOutline" Color
DirectorNamedColor o-> "colorAnimEditorBinding" Color
DirectorNamedColor o-> "colorTimelineBackground" Color
DirectorNamedColor o-> "colorLockTextBG" Color
DirectorNamedColor o-> "colorInlineCurveVerticalLines" Color
DirectorNamedColor o-> "colorInlineCurveOutOfRangeOverlay" Color
DirectorNamedColor - -> "colorInlineCurvesBackground" Color
DirectorNamedColor o-> "markerDrawerBackgroundColor" Color
DirectorNamedColor o-> "markerHeaderDrawerBackgroundColor" Color
DirectorNamedColor o-> "colorControl" Color
DirectorNamedColor o-> "colorSubSequenceBackground" Color
DirectorNamedColor o-> "colorTrackSubSequenceBackground" Color
DirectorNamedColor o-> "colorTrackSubSequenceBackgroundSelected" Color
DirectorNamedColor o-> "colorSubSequenceOverlay" Color
DirectorNamedColor o-> "colorSubSequenceDurationLine" Color
DirectorNamedColor o-> "clipBckg" Color
DirectorNamedColor o-> "clipSelectedBckg" Color
DirectorNamedColor o-> "clipBorderColor" Color
DirectorNamedColor o-> "clipEaseBckgColor" Color
DirectorNamedColor - -> "clipBlendIn" Color
DirectorNamedColor - -> "clipBlendInSelected" Color
DirectorNamedColor - -> "clipBlendOut" Color
DirectorNamedColor - -> "clipBlendOutSelected" Color
class DirectorStyles {
    + <<const>> resourcesPath : string = "Packages/com.unity.timeline/Editor/StyleSheets/res/"
    + <<const>> newTimelineDefaultNameSuffix : string = "Timeline"
    + {static} <<readonly>> kBaseIndent : float = 15.0f
    + {static} <<readonly>> kDurationGuiThickness : float = 5.0f
    + <<const>> markerDefaultStyle : string = "MarkerItem"
    + {static} IsInitialized : bool <<get>>
    + {static} ReloadStylesIfNeeded() : void
    + ExportSkinToFile() : void
    + ReloadSkin() : void
    + Initialize() : void
    + {static} GetGUIStyle(s:string) : GUIStyle
    + {static} TrIconContent(iconName:string, tooltip:string) : GUIContent
    + {static} IconContent(iconName:string) : GUIContent
    + {static} TrTextContentWithIcon(text:string, tooltip:string, iconName:string) : GUIContent
    + {static} TrTextContent(text:string, tooltip:string) : GUIContent
    + {static} LoadIcon(iconName:string) : Texture2D
    + {static} Elipsify(label:string, rect:Rect, style:GUIStyle) : string
    + {static} Elipsify(label:string, destinationWidth:float, neededWidth:float) : string
    + {static} GetBackgroundImage(style:GUIStyle, state:StyleState) : Texture2D
}
DirectorStyles o-> "referenceTrackLabel" GUIContent
DirectorStyles o-> "recordingLabel" GUIContent
DirectorStyles o-> "noTimelineAssetSelected" GUIContent
DirectorStyles o-> "createTimelineOnSelection" GUIContent
DirectorStyles o-> "noTimelinesInScene" GUIContent
DirectorStyles o-> "createNewTimelineText" GUIContent
DirectorStyles o-> "previewContent" GUIContent
DirectorStyles o-> "previewDisabledContent" GUIContent
DirectorStyles o-> "mixOff" GUIContent
DirectorStyles o-> "mixOn" GUIContent
DirectorStyles o-> "rippleOff" GUIContent
DirectorStyles o-> "rippleOn" GUIContent
DirectorStyles o-> "replaceOff" GUIContent
DirectorStyles o-> "replaceOn" GUIContent
DirectorStyles o-> "showMarkersOn" GUIContent
DirectorStyles o-> "showMarkersOff" GUIContent
DirectorStyles o-> "showMarkersOnTimeline" GUIContent
DirectorStyles o-> "timelineMarkerTrackHeader" GUIContent
DirectorStyles o-> "signalTrackIcon" GUIContent
DirectorStyles o-> "playContent" GUIContent
DirectorStyles o-> "gotoBeginingContent" GUIContent
DirectorStyles o-> "gotoEndContent" GUIContent
DirectorStyles o-> "nextFrameContent" GUIContent
DirectorStyles o-> "previousFrameContent" GUIContent
DirectorStyles o-> "newContent" GUIContent
DirectorStyles o-> "optionsCogIcon" GUIContent
DirectorStyles o-> "animationTrackIcon" GUIContent
DirectorStyles o-> "audioTrackIcon" GUIContent
DirectorStyles o-> "playableTrackIcon" GUIContent
DirectorStyles o-> "timelineSelectorArrow" GUIContent
DirectorStyles - -> "playrangeContent" GUIContent
DirectorStyles o-> "kClipErrorColor" Color
DirectorStyles o-> "kMixToolColor" Color
DirectorStyles o-> "kRippleToolColor" Color
DirectorStyles o-> "kReplaceToolColor" Color
DirectorStyles - -> "groupBackground" GUIStyle
DirectorStyles - -> "displayBackground" GUIStyle
DirectorStyles - -> "fontClip" GUIStyle
DirectorStyles - -> "fontClipLoop" GUIStyle
DirectorStyles - -> "trackHeaderFont" GUIStyle
DirectorStyles - -> "trackGroupAddButton" GUIStyle
DirectorStyles - -> "groupFont" GUIStyle
DirectorStyles - -> "timeCursor" GUIStyle
DirectorStyles - -> "endmarker" GUIStyle
DirectorStyles - -> "tinyFont" GUIStyle
DirectorStyles - -> "foldout" GUIStyle
DirectorStyles - -> "trackMuteButton" GUIStyle
DirectorStyles - -> "trackLockButton" GUIStyle
DirectorStyles - -> "trackRecordButton" GUIStyle
DirectorStyles - -> "playTimeRangeStart" GUIStyle
DirectorStyles - -> "playTimeRangeEnd" GUIStyle
DirectorStyles - -> "selectedStyle" GUIStyle
DirectorStyles - -> "trackSwatchStyle" GUIStyle
DirectorStyles - -> "connector" GUIStyle
DirectorStyles - -> "keyframe" GUIStyle
DirectorStyles - -> "warning" GUIStyle
DirectorStyles - -> "extrapolationHold" GUIStyle
DirectorStyles - -> "extrapolationLoop" GUIStyle
DirectorStyles - -> "extrapolationPingPong" GUIStyle
DirectorStyles - -> "extrapolationContinue" GUIStyle
DirectorStyles - -> "trackMarkerButton" GUIStyle
DirectorStyles - -> "markerMultiOverlay" GUIStyle
DirectorStyles - -> "bottomShadow" GUIStyle
DirectorStyles - -> "trackOptions" GUIStyle
DirectorStyles - -> "infiniteTrack" GUIStyle
DirectorStyles - -> "clipOut" GUIStyle
DirectorStyles - -> "clipIn" GUIStyle
DirectorStyles - -> "trackCurvesButton" GUIStyle
DirectorStyles - -> "trackLockOverlay" GUIStyle
DirectorStyles - -> "activation" GUIStyle
DirectorStyles - -> "playrange" GUIStyle
DirectorStyles - -> "timelineLockButton" GUIStyle
DirectorStyles - -> "trackAvatarMaskButton" GUIStyle
DirectorStyles - -> "markerWarning" GUIStyle
DirectorStyles - -> "editModeBtn" GUIStyle
DirectorStyles - -> "showMarkersBtn" GUIStyle
DirectorStyles - -> "sequenceSwitcher" GUIStyle
DirectorStyles - -> "inlineCurveHandle" GUIStyle
DirectorStyles - -> "timeReferenceButton" GUIStyle
DirectorStyles - -> "trackButtonSuite" GUIStyle
DirectorStyles - -> "previewButtonDisabled" GUIStyle
DirectorStyles - -> "Instance" DirectorStyles
DirectorStyles - -> "customSkin" DirectorNamedColor
class MenuPriority <<static>> {
    + <<const>> defaultPriority : int = 9000
    + <<const>> separatorAt : int = 1000
}
class TimelineActionSection <<static>> {
    + <<const>> start : int = 1000
    + <<const>> copy : int
    + <<const>> paste : int
    + <<const>> duplicate : int
    + <<const>> delete : int
    + <<const>> keyAllAnimated : int
    + <<const>> matchContent : int
}
class TrackActionSection <<static>> {
    + <<const>> start : int
    + <<const>> lockTrack : int
    + <<const>> lockSelected : int
    + <<const>> mute : int
    + <<const>> muteSelected : int
    + <<const>> showHideMarkers : int
    + <<const>> removeInvalidMarkers : int
    + <<const>> editInAnimationWindow : int
}
class AddTrackMenu <<static>> {
    + <<const>> start : int
    + <<const>> addLayerTrack : int
}
class ClipEditActionSection <<static>> {
    + <<const>> start : int
    + <<const>> editInAnimationWindow : int
    + <<const>> editSubTimeline : int
}
class ClipActionSection <<static>> {
    + <<const>> start : int
    + <<const>> trimStart : int
    + <<const>> trimEnd : int
    + <<const>> split : int
    + <<const>> completeLastLoop : int
    + <<const>> trimLastLoop : int
    + <<const>> matchDuration : int
    + <<const>> doubleSpeed : int
    + <<const>> halfSpeed : int
    + <<const>> resetDuration : int
    + <<const>> resetSpeed : int
    + <<const>> resetAll : int
    + <<const>> tile : int
    + <<const>> findSourceAsset : int
}
class MarkerActionSection <<static>> {
    + <<const>> start : int
}
class CustomTimelineActionSection <<static>> {
    + <<const>> start : int
}
class CustomTrackActionSection <<static>> {
    + <<const>> start : int
    + <<const>> convertToClipMode : int
    + <<const>> convertFromClipMode : int
    + <<const>> applyTrackOffset : int
    + <<const>> applySceneOffset : int
    + <<const>> applyAutoOffset : int
    + <<const>> addOverrideTrack : int
    + <<const>> customTrackAction : int
}
class CustomClipActionSection <<static>> {
    + <<const>> start : int
    + <<const>> matchPrevious : int
    + <<const>> matchNext : int
    + <<const>> resetOffset : int
    + <<const>> customClipAction : int
}
class AddItem <<static>> {
    + <<const>> addGroup : int
    + <<const>> addTrack : int
    + <<const>> addCustomTrack : int
    + <<const>> addClip : int
    + <<const>> addCustomClip : int
    + <<const>> addMarker : int
    + <<const>> addCustomMarker : int
}
MenuPriority +- - TimelineActionSection
MenuPriority +- - TrackActionSection
MenuPriority +- - AddTrackMenu
MenuPriority +- - ClipEditActionSection
MenuPriority +- - ClipActionSection
MenuPriority +- - MarkerActionSection
MenuPriority +- - CustomTimelineActionSection
MenuPriority +- - CustomTrackActionSection
MenuPriority +- - CustomClipActionSection
MenuPriority +- - AddItem
class Shortcuts <<static>> {
}
class Clip <<static>> {
    + <<const>> split : string = "Timeline/Editing/Split"
    + <<const>> trimStart : string = "Timeline/Editing/TrimStart"
    + <<const>> trimEnd : string = "Timeline/Editing/TrimEnd"
}
class Timeline <<static>> {
    + <<const>> play : string = "Timeline/Play"
    + <<const>> previousFrame : string = "Timeline/PrevFrame"
    + <<const>> nextFrame : string = "Timeline/NextFrame"
    + <<const>> frameAll : string = "Timeline/FrameAll"
    + <<const>> previousKey : string = "Timeline/PrevKey"
    + <<const>> nextKey : string = "Timeline/NextKey"
    + <<const>> goToStart : string = "Timeline/GotoStart"
    + <<const>> goToEnd : string = "Timeline/GotoEnd"
    + <<const>> zoomIn : string = "Timeline/ZoomIn"
    + <<const>> zoomOut : string = "Timeline/ZoomOut"
    + <<const>> navigateLeft : string = "Timeline/NavigateLeft"
    + <<const>> navigateRight : string = "Timeline/NavigateRight"
    + <<const>> toggleCollapseTrack : string = "Timeline/Toggle Collapse Track"
    + <<const>> selectLeftItem : string = "Timeline/SelectLeftItem"
    + <<const>> selectRightItem : string = "Timeline/SelectRightItem"
    + <<const>> selectUpItem : string = "Timeline/SelectUpItem"
    + <<const>> selectUpTrack : string = "Timeline/SelectUpTrack"
    + <<const>> selectDownItem : string = "Timeline/SelectDownItem"
    + <<const>> selectDownTrack : string = "Timeline/SelectDownTrack"
    + <<const>> multiSelectLeft : string = "Timeline/SelectLeft"
    + <<const>> multiSelectRight : string = "Timeline/SelectRight"
    + <<const>> multiSelectUp : string = "Timeline/SelectUp"
    + <<const>> multiSelectDown : string = "Timeline/SelectDown"
    + <<const>> toggleClipTrackArea : string = "Timeline/ToggleClipTrackArea"
    + <<const>> matchContent : string = "Timeline/MatchContent"
    + <<const>> toggleLock : string = "Timeline/ToggleLock"
    + <<const>> toggleMute : string = "Timeline/ToggleMute"
    + <<const>> collapseTrack : string = "Timeline/Collapse Track"
    + <<const>> expandTrack : string = "Timeline/Expand Track"
    + <<const>> moveLeft : string = "Timeline/MoveLeft"
    + <<const>> moveRight : string = "Timeline/MoveRight"
    + <<const>> moveUp : string = "Timeline/MoveUp"
    + <<const>> moveDown : string = "Timeline/MoveDown"
    + <<const>> keyAllAnimated : string = "Timeline/KeyAllAnimated"
}
Shortcuts +- - Clip
Shortcuts +- - Timeline
class TimelineEditor <<static>> {
    + {static} GetWindow() : TimelineEditorWindow
    + {static} GetOrCreateWindow() : TimelineEditorWindow
    + {static} Refresh(reason:RefreshReason) : void
    + {static} GetInspectedTimeFromMasterTime(masterTime:double) : double
    + {static} GetMasterTimeFromInspectedTime(inspectedTime:double) : double
}
enum RefreshReason {
    WindowNeedsRedraw= 1 << 0,
    SceneNeedsUpdate= 1 << 1,
    ContentsModified= 1 << 2,
    ContentsAddedOrRemoved= 1 << 3,
}
TimelineEditor - -> "inspectedDirector" PlayableDirector
TimelineEditor - -> "masterDirector" PlayableDirector
TimelineEditor - -> "inspectedAsset" TimelineAsset
TimelineEditor - -> "masterAsset" TimelineAsset
TimelineEditor - -> "playableDirector" PlayableDirector
TimelineEditor - -> "timelineAsset" TimelineAsset
TimelineEditor - -> "selectedClip" TimelineClip
class TimelineHelpers <<static>> {
    + {static} CloneExposedReferences(clone:ScriptableObject, sourceTable:IExposedPropertyTable, destTable:IExposedPropertyTable) : void
    + {static} CloneReferencedPlayableAsset(original:ScriptableObject, sourceTable:IExposedPropertyTable, destTable:IExposedPropertyTable, newOwner:Object) : ScriptableObject
    + {static} Clone(clip:TimelineClip, sourceTable:IExposedPropertyTable, destTable:IExposedPropertyTable, time:double, newOwner:PlayableAsset) : TimelineClip
    + {static} Clone(parent:PlayableAsset, trackAsset:TrackAsset, sourceTable:IExposedPropertyTable, destTable:IExposedPropertyTable, assetOwner:PlayableAsset) : TrackAsset
    + {static} DuplicateItemsUsingCurrentEditMode(sourceTable:IExposedPropertyTable, destTable:IExposedPropertyTable, items:ItemsPerTrack, targetParent:TrackAsset, candidateTime:double, undoOperation:string) : IEnumerable<ITimelineItem>
    + {static} DuplicateItemsUsingCurrentEditMode(sourceTable:IExposedPropertyTable, destTable:IExposedPropertyTable, items:IEnumerable<ItemsPerTrack>, candidateTime:double, undoOperation:string) : IEnumerable<ITimelineItem>
    + {static} GetCustomDrawer(trackType:Type) : Type
    + {static} HaveSameContainerAsset(assetA:Object, assetB:Object) : bool
    + {static} SaveAnimClipIntoObject(clip:AnimationClip, asset:Object) : void
    + {static} AddRequiredComponent(go:GameObject, asset:TrackAsset) : Component
    + {static} GetTrackCategoryName(trackType:System.Type) : string
    + {static} GetItemCategoryName(itemType:System.Type) : string
    + {static} GetTrackMenuName(trackType:System.Type) : string
    + {static} GetLoopDuration(clip:TimelineClip) : double
    + {static} GetClipAssetEndTime(clip:TimelineClip) : double
    + {static} HasUsableAssetDuration(clip:TimelineClip) : bool
    + {static} GetLoopTimes(clip:TimelineClip) : double[]
    + {static} GetCandidateTime(mousePosition:Vector2?, trackAssets:TrackAsset[]) : double
    + {static} CreateClipOnTrack(asset:Object, parentTrack:TrackAsset, state:WindowState) : TimelineClip
    + {static} CreateClipOnTrack(asset:Object, parentTrack:TrackAsset, candidateTime:double) : TimelineClip
    + {static} CreateClipOnTrack(playableAssetType:Type, parentTrack:TrackAsset, state:WindowState) : TimelineClip
    + {static} CreateClipOnTrack(playableAssetType:Type, parentTrack:TrackAsset, candidateTime:double) : TimelineClip
    + {static} CreateClipOnTrack(asset:Object, parentTrack:TrackAsset, candidateTime:double, state:WindowState) : TimelineClip
    + {static} CreateClipOnTrack(playableAssetType:Type, assignableObject:Object, parentTrack:TrackAsset, candidateTime:double) : TimelineClip
    + {static} CreateClipOnTrack(playableAssetType:Type, assignableObject:Object, parentTrack:TrackAsset, candidateTime:double, state:WindowState) : TimelineClip
    + {static} CreateClipOnTrackFromPlayableAsset(asset:IPlayableAsset, parentTrack:TrackAsset, candidateTime:double) : TimelineClip
    + {static} CreateClipsFromObjects(assetType:Type, targetTrack:TrackAsset, candidateTime:double, objects:IEnumerable<Object>) : void
    + {static} CreateMarkersFromObjects(assetType:Type, targetTrack:TrackAsset, candidateTime:double, objects:IEnumerable<Object>) : void
    + {static} CreateMarkerOnTrack(markerType:Type, assignableObject:Object, parentTrack:TrackAsset, candidateTime:double) : IMarker
    + {static} CreateClipsFromTypes(assetTypes:IEnumerable<Type>, targetTrack:TrackAsset, candidateTime:double) : void
    + {static} FrameItems(items:IEnumerable<ITimelineItem>) : void
    + {static} Frame(state:WindowState, start:double, end:double) : void
    + {static} RangeSelect(totalCollection:IList<T>, currentSelection:IList<T>, clickedItem:T, selector:Action<T>, remover:Action<T>) : void
    + {static} CreateTrack(asset:TimelineAsset, type:Type, parent:TrackAsset, name:string) : TrackAsset
    + {static} CreateTrack(type:Type, parent:TrackAsset, name:string) : TrackAsset
    + {static} CreateTrack(asset:TimelineAsset, parent:TrackAsset, name:string) : T
    + {static} CreateTrack(parent:TrackAsset, name:string) : T
}
class SelectionManager <<static>> {
    + {static} AddObject(obj:Object) : void
    + {static} Add(obj:TrackAsset) : void
    + {static} Add(item:TimelineClip) : void
    + {static} Add(marker:IMarker) : void
    + {static} Add(item:ITimelineItem) : void
    + {static} SelectOnly(track:TrackAsset) : void
    + {static} SelectOnly(clip:TimelineClip) : void
    + {static} SelectOnly(item:IMarker) : void
    + {static} SelectOnly(item:ITimelineItem) : void
    + {static} SelectInlineCurveEditor(selection:IClipCurveEditorOwner) : void
    + {static} GetCurrentInlineEditorCurve() : IClipCurveEditorOwner
    + {static} IsCurveEditorFocused(selection:IClipCurveEditorOwner) : bool
    + {static} Contains(item:TrackAsset) : bool
    + {static} Contains(item:TimelineClip) : bool
    + {static} Contains(obj:Object) : bool
    + {static} Contains(marker:IMarker) : bool
    + {static} Contains(item:ITimelineItem) : bool
    + {static} Clear() : void
    + {static} UnSelectTracks() : void
    + {static} Remove(item:TimelineClip) : void
    + {static} Remove(marker:IMarker) : void
    + {static} Remove(item:TrackAsset) : void
    + {static} Remove(item:ITimelineItem) : void
    + {static} RemoveTimelineSelection() : void
    + {static} RemoveAllClips() : void
    + {static} Count() : int
    + {static} SelectedClipGUI() : IEnumerable<TimelineClipGUI>
    + {static} SelectedClips() : IEnumerable<TimelineClip>
    + {static} SelectedMarkers() : IEnumerable<IMarker>
    + {static} SelectedTracks() : IEnumerable<TrackAsset>
    + {static} SelectedItemOfType() : IEnumerable<T>
    + {static} SelectedTrackGUI() : IEnumerable<TimelineTrackBaseGUI>
    + {static} SelectedItems() : IEnumerable<ITimelineItem>
}
class TimelineUtility <<static>> {
    + {static} ReorderTracks(allTracks:List<ScriptableObject>, tracks:List<TrackAsset>, insertAfterAsset:ScriptableObject, up:bool) : void
    + {static} GetSceneReferenceTrack(asset:TrackAsset) : TrackAsset
    + {static} TrackHasAnimationCurves(track:TrackAsset) : bool
    + {static} GetSceneGameObject(director:PlayableDirector, asset:TrackAsset) : GameObject
    + {static} GetDirectorsInSceneUsingAsset(asset:PlayableAsset) : PlayableDirector[]
    + {static} GetDirectorComponentForGameObject(gameObject:GameObject) : PlayableDirector
    + {static} GetTimelineAssetForDirectorComponent(director:PlayableDirector) : TimelineAsset
    + {static} IsPrefabOrAsset(obj:Object) : bool
    + {static} HasCustomEditor(clip:TimelineClip) : bool
    + {static} GetSubTimelines(clip:TimelineClip, director:IExposedPropertyTable) : IList<PlayableDirector>
    + {static} IsAllSubTrackMuted(asset:TrackAsset) : bool
    + {static} IsParentMuted(asset:TrackAsset) : bool
    + {static} GetAllDirectorsInHierarchy(mainDirector:PlayableDirector) : IEnumerable<PlayableDirector>
    + {static} GetBindingsFromDirectors(directors:IEnumerable<PlayableDirector>) : IEnumerable<T>
    + {static} IsLockedFromGroup(asset:TrackAsset) : bool
    + {static} CreateAndSaveTimelineAsset(path:string) : TimelineAsset
}
class Tooltip {
    + text : string <<get>> <<set>>
    + pad : float <<get>> <<set>>
    + Tooltip(theStyle:GUIStyle, font:GUIStyle)
    + Tooltip()
    + Draw() : void
}
Tooltip - -> "style" GUIStyle
Tooltip - -> "font" GUIStyle
Tooltip - -> "foreColor" Color
Tooltip - -> "bounds" Rect
class Gaps <<static>> {
    + {static} Insert(asset:TimelineAsset, at:double, amount:double, tolerance:double) : void
}
class PlayheadContextMenu {
    + PlayheadContextMenu(timeAreaItem:TimeAreaItem)
}
class TimeAreaContextMenu {
}
class Scrub {
    + Scrub(onMouseDown:Func<Event, WindowState, bool>, onMouseDrag:Action<double>, onMouseUp:System.Action)
}
class TimeAreaItem {
    + drawLine : bool <<get>> <<set>>
    + drawHead : bool <<get>> <<set>>
    + canMoveHead : bool <<get>> <<set>>
    + tooltip : string <<get>> <<set>>
    + showTooltip : bool <<get>> <<set>>
    + firstDrag : bool <<get>>
    + TimeAreaItem(style:GUIStyle, onDrag:Action<double>)
    + Draw(rect:Rect, state:WindowState, time:double) : void
}
Manipulator <|- - PlayheadContextMenu
Manipulator <|- - TimeAreaContextMenu
Manipulator <|- - Scrub
Control <|- - TimeAreaItem
TimeAreaItem - -> "headColor" Color
TimeAreaItem - -> "lineColor" Color
TimeAreaItem - -> "boundOffset" Vector2
TimeAreaItem - -> "bounds" Rect
TimeAreaItem - -> "style" GUIStyle
class UnityEditorInternals <<static>> {
    + {static} DoObjectField(position:Rect, obj:Object, type:Type, controlId:int, allowScene:bool, allowAllObjects:bool) : Object
}
enum ClipCaps {
    None= 0,
    Looping= 1 << 0,
    Extrapolation= 1 << 1,
    ClipIn= 1 << 2,
    SpeedMultiplier= 1 << 3,
    Blending= 1 << 4,
    AutoScale= 1 << 5 | SpeedMultiplier,
    All= ~None,
}
class TimelineClipCapsExtensions <<static>> {
    + {static} SupportsLooping(clip:TimelineClip) : bool
    + {static} SupportsExtrapolation(clip:TimelineClip) : bool
    + {static} SupportsClipIn(clip:TimelineClip) : bool
    + {static} SupportsSpeedMultiplier(clip:TimelineClip) : bool
    + {static} SupportsBlending(clip:TimelineClip) : bool
    + {static} HasAll(caps:ClipCaps, flags:ClipCaps) : bool
    + {static} HasAny(caps:ClipCaps, flags:ClipCaps) : bool
}
class DiscreteTime <<struct>> {
    + {static} tickValue : double <<get>>
    + DiscreteTime(time:DiscreteTime)
    + DiscreteTime(time:double)
    + DiscreteTime(time:float)
    + DiscreteTime(time:int)
    + DiscreteTime(frame:int, fps:double)
    + OneTickBefore() : DiscreteTime
    + OneTickAfter() : DiscreteTime
    + GetTick() : Int64
    + {static} FromTicks(ticks:Int64) : DiscreteTime
    + CompareTo(obj:object) : int
    + Equals(other:DiscreteTime) : bool
    + <<override>> Equals(obj:object) : bool
    + <<override>> ToString() : string
    + <<override>> GetHashCode() : int
    + {static} Min(lhs:DiscreteTime, rhs:DiscreteTime) : DiscreteTime
    + {static} Max(lhs:DiscreteTime, rhs:DiscreteTime) : DiscreteTime
    + {static} SnapToNearestTick(time:double) : double
    + {static} SnapToNearestTick(time:float) : float
    + {static} GetNearestTick(time:double) : Int64
}
IComparable <|- - DiscreteTime
DiscreteTime o-> "kMaxTime" DiscreteTime
class GroupTrack {
}
class "IEnumerable`1"<T> {
}
TrackAsset <|- - GroupTrack
GroupTrack - -> "outputs<PlayableBinding>" "IEnumerable`1"
interface ILayerable {
}
class TimelineAsset <<partial>> {
}
class TrackMediaType {
    + TrackMediaType(mt:TimelineAsset.MediaType)
}
enum MediaType {
    Animation,
    Audio,
    Texture= 2,
    Video= 2,
    Script,
    Hybrid,
    Group,
}
Attribute <|- - TrackMediaType
TimelineAsset +- - MediaType
class TimelineAsset <<partial>> {
    + <<override>> duration : double <<get>>
    + fixedDuration : double <<get>> <<set>>
    + outputTrackCount : int <<get>>
    + rootTrackCount : int <<get>>
    + GetRootTrack(index:int) : TrackAsset
    + GetRootTracks() : IEnumerable<TrackAsset>
    + GetOutputTrack(index:int) : TrackAsset
    + GetOutputTracks() : IEnumerable<TrackAsset>
    + <<override>> CreatePlayable(graph:PlayableGraph, go:GameObject) : Playable
    + GatherProperties(director:PlayableDirector, driver:IPropertyCollector) : void
    + CreateMarkerTrack() : void
}
enum DurationMode {
    BasedOnClips,
    FixedLength,
}
class EditorSettings {
    + fps : float <<get>> <<set>>
    + frameRate : double <<get>> <<set>>
    + SetStandardFrameRate(enumValue:StandardFrameRates) : void
    + scenePreview : bool <<get>> <<set>>
}
class "IEnumerable`1"<T> {
}
PlayableAsset <|- - TimelineAsset
ISerializationCallbackReceiver <|- - TimelineAsset
ITimelineClipAsset <|- - TimelineAsset
IPropertyPreview <|- - TimelineAsset
TimelineAsset - -> "editorSettings" EditorSettings
TimelineAsset - -> "durationMode" DurationMode
TimelineAsset - -> "outputs<PlayableBinding>" "IEnumerable`1"
TimelineAsset - -> "clipCaps" ClipCaps
TimelineAsset - -> "markerTrack" MarkerTrack
TimelineAsset +- - DurationMode
TimelineAsset +- - EditorSettings
class TimelineAsset <<partial>> {
    + CreateTrack(type:Type, parent:TrackAsset, name:string) : TrackAsset
    + CreateTrack(parent:TrackAsset, trackName:string) : T
    + CreateTrack(trackName:string) : T
    + CreateTrack() : T
    + DeleteClip(clip:TimelineClip) : bool
    + DeleteTrack(track:TrackAsset) : bool
}
class TrackClipTypeAttribute {
    + <<readonly>> allowAutoCreate : bool
    + TrackClipTypeAttribute(clipClass:Type)
    + TrackClipTypeAttribute(clipClass:Type, allowAutoCreate:bool)
}
class NotKeyableAttribute {
}
enum TrackBindingFlags {
    None= 0,
    AllowCreateComponent= 1,
    All= AllowCreateComponent,
}
class TrackBindingTypeAttribute {
    + TrackBindingTypeAttribute(type:Type)
    + TrackBindingTypeAttribute(type:Type, flags:TrackBindingFlags)
}
class SupportsChildTracksAttribute {
    + <<readonly>> levels : int
    + SupportsChildTracksAttribute(childType:Type, levels:int)
}
class IgnoreOnPlayableTrackAttribute {
}
class TimeFieldAttribute {
    + TimeFieldAttribute(useEditMode:UseEditMode)
}
class FrameRateFieldAttribute {
}
class HideInMenuAttribute {
}
class CustomStyleAttribute {
    + <<readonly>> ussStyle : string
    + CustomStyleAttribute(ussStyle:string)
}
class MenuCategoryAttribute {
    + <<readonly>> category : string
    + MenuCategoryAttribute(category:string)
}
enum UseEditMode {
    None,
    ApplyEditMode,
}
Attribute <|- - TrackClipTypeAttribute
TrackClipTypeAttribute - -> "inspectedType" Type
Attribute <|- - NotKeyableAttribute
Attribute <|- - TrackBindingTypeAttribute
TrackBindingTypeAttribute - -> "type" Type
TrackBindingTypeAttribute - -> "flags" TrackBindingFlags
Attribute <|- - SupportsChildTracksAttribute
SupportsChildTracksAttribute - -> "childType" Type
PropertyAttribute <|- - TimeFieldAttribute
TimeFieldAttribute - -> "useEditMode" UseEditMode
PropertyAttribute <|- - FrameRateFieldAttribute
Attribute <|- - HideInMenuAttribute
Attribute <|- - CustomStyleAttribute
Attribute <|- - MenuCategoryAttribute
TimeFieldAttribute +- - UseEditMode
interface ITimelineClipAsset {
}
class TimelineClip <<partial>> {
    + {static} <<readonly>> kDefaultClipDurationInSeconds : float = 5
    + {static} <<readonly>> kTimeScaleMin : double
    + {static} <<readonly>> kTimeScaleMax : double = 1000
    + hasPreExtrapolation : bool <<get>>
    + hasPostExtrapolation : bool <<get>>
    + timeScale : double <<get>> <<set>>
    + start : double <<get>> <<set>>
    + duration : double <<get>> <<set>>
    + end : double <<get>>
    + clipIn : double <<get>> <<set>>
    + displayName : string <<get>> <<set>>
    + clipAssetDuration : double <<get>>
    + hasCurves : bool <<get>>
    + GetParentTrack() : TrackAsset
    + easeInDuration : double <<get>> <<set>>
    + easeOutDuration : double <<get>> <<set>>
    + eastOutTime : double <<get>>
    + easeOutTime : double <<get>>
    + blendInDuration : double <<get>> <<set>>
    + blendOutDuration : double <<get>> <<set>>
    + hasBlendIn : bool <<get>>
    + hasBlendOut : bool <<get>>
    + mixInPercentage : float <<get>>
    + mixInDuration : double <<get>>
    + mixOutTime : double <<get>>
    + mixOutDuration : double <<get>>
    + mixOutPercentage : float <<get>>
    + recordable : bool <<get>> <<internal set>>
    + EvaluateMixOut(time:double) : float
    + EvaluateMixIn(time:double) : float
    + ToLocalTime(time:double) : double
    + ToLocalTimeUnbound(time:double) : double
    + IsExtrapolatedTime(sequenceTime:double) : bool
    + IsPreExtrapolatedTime(sequenceTime:double) : bool
    + IsPostExtrapolatedTime(sequenceTime:double) : bool
    + extrapolatedStart : double <<get>>
    + extrapolatedDuration : double <<get>>
    + CreateCurves(curvesClipName:string) : void
    + <<override>> ToString() : string
    + ConformEaseValues() : void
}
enum ClipExtrapolation {
    None,
    Hold,
    Loop,
    PingPong,
    Continue,
}
enum BlendCurveMode {
    Auto,
    Manual,
}
class "List`1"<T> {
}
ICurvesOwner <|- - TimelineClip
ISerializationCallbackReceiver <|- - TimelineClip
TimelineClip o-> "kDefaultClipCaps" ClipCaps
TimelineClip - -> "curves" AnimationClip
TimelineClip - -> "asset" Object
TimelineClip - -> "underlyingAsset" Object
TimelineClip - -> "parentTrack" TrackAsset
TimelineClip - -> "blendInCurveMode" BlendCurveMode
TimelineClip - -> "blendOutCurveMode" BlendCurveMode
TimelineClip - -> "mixInCurve" AnimationCurve
TimelineClip - -> "mixOutCurve" AnimationCurve
TimelineClip - -> "exposedParameters<string>" "List`1"
TimelineClip - -> "clipCaps" ClipCaps
TimelineClip - -> "animationClip" AnimationClip
TimelineClip - -> "postExtrapolationMode" ClipExtrapolation
TimelineClip - -> "preExtrapolationMode" ClipExtrapolation
TimelineClip +- - ClipExtrapolation
TimelineClip +- - BlendCurveMode
interface ITimelineEvaluateCallback {
}
class TimelinePlayable {
    + {static} Create(graph:PlayableGraph, tracks:IEnumerable<TrackAsset>, go:GameObject, autoRebalance:bool, createOutputs:bool) : ScriptPlayable<TimelinePlayable>
    + Compile(graph:PlayableGraph, timelinePlayable:Playable, tracks:IEnumerable<TrackAsset>, go:GameObject, autoRebalance:bool, createOutputs:bool) : void
    + <<override>> PrepareFrame(playable:Playable, info:FrameData) : void
}
PlayableBehaviour <|- - TimelinePlayable
abstract class TrackAsset <<partial>> {
    + start : double <<get>>
    + end : double <<get>>
    + <<sealed>> <<override>> duration : double <<get>>
    + muted : bool <<get>> <<set>>
    + mutedInHierarchy : bool <<get>>
    + GetClips() : IEnumerable<TimelineClip>
    + <<virtual>> isEmpty : bool <<get>>
    + hasClips : bool <<get>>
    + hasCurves : bool <<get>>
    + isSubTrack : bool <<get>>
    + GetChildTracks() : IEnumerable<TrackAsset>
    + locked : bool <<get>> <<set>>
    + lockedInHierarchy : bool <<get>>
    + supportsNotifications : bool <<get>>
    + CreateCurves(curvesClipName:string) : void
    + <<virtual>> CreateTrackMixer(graph:PlayableGraph, go:GameObject, inputCount:int) : Playable
    + <<sealed>> <<override>> CreatePlayable(graph:PlayableGraph, go:GameObject) : Playable
    + CreateDefaultClip() : TimelineClip
    + CreateClip() : TimelineClip
    + DeleteClip(clip:TimelineClip) : bool
    + CreateMarker(type:Type, time:double) : IMarker
    + CreateMarker(time:double) : T
    + DeleteMarker(marker:IMarker) : bool
    + GetMarkers() : IEnumerable<IMarker>
    + GetMarkerCount() : int
    + GetMarker(idx:int) : IMarker
    + <<virtual>> GatherProperties(director:PlayableDirector, driver:IPropertyCollector) : void
    + <<virtual>> CanCreateTrackMixer() : bool
}
class TransientBuildData <<struct>> {
    + {static} Create() : TransientBuildData
    + Clear() : void
}
class "IEnumerable`1"<T> {
}
class "List`1"<T> {
}
PlayableAsset <|- - TrackAsset
IPropertyPreview <|- - TrackAsset
ICurvesOwner <|- - TrackAsset
TrackAsset - -> "timelineAsset" TimelineAsset
TrackAsset - -> "parent" PlayableAsset
TrackAsset - -> "outputs<PlayableBinding>" "IEnumerable`1"
TrackAsset - -> "curves" AnimationClip
TrackAsset +- - TransientBuildData
TransientBuildData - -> "trackList<TrackAsset>" "List`1"
TransientBuildData - -> "clipList<TimelineClip>" "List`1"
TransientBuildData - -> "markerList<IMarker>" "List`1"
class DOTweenModuleAudio <<static>> {
    + {static} DOFade(target:AudioSource, endValue:float, duration:float) : TweenerCore<float, float, FloatOptions>
    + {static} DOPitch(target:AudioSource, endValue:float, duration:float) : TweenerCore<float, float, FloatOptions>
}
class DOTweenModulePhysics <<static>> {
    + {static} DOMove(target:Rigidbody, endValue:Vector3, duration:float, snapping:bool) : TweenerCore<Vector3, Vector3, VectorOptions>
    + {static} DOMoveX(target:Rigidbody, endValue:float, duration:float, snapping:bool) : TweenerCore<Vector3, Vector3, VectorOptions>
    + {static} DOMoveY(target:Rigidbody, endValue:float, duration:float, snapping:bool) : TweenerCore<Vector3, Vector3, VectorOptions>
    + {static} DOMoveZ(target:Rigidbody, endValue:float, duration:float, snapping:bool) : TweenerCore<Vector3, Vector3, VectorOptions>
    + {static} DORotate(target:Rigidbody, endValue:Vector3, duration:float, mode:RotateMode) : TweenerCore<Quaternion, Vector3, QuaternionOptions>
    + {static} DOLookAt(target:Rigidbody, towards:Vector3, duration:float, axisConstraint:AxisConstraint, up:Vector3?) : TweenerCore<Quaternion, Vector3, QuaternionOptions>
    + {static} DOJump(target:Rigidbody, endValue:Vector3, jumpPower:float, numJumps:int, duration:float, snapping:bool) : Sequence
    + {static} DOPath(target:Rigidbody, path:Vector3[], duration:float, pathType:PathType, pathMode:PathMode, resolution:int, gizmoColor:Color?) : TweenerCore<Vector3, Path, PathOptions>
    + {static} DOLocalPath(target:Rigidbody, path:Vector3[], duration:float, pathType:PathType, pathMode:PathMode, resolution:int, gizmoColor:Color?) : TweenerCore<Vector3, Path, PathOptions>
}
class DOTweenModuleUnityVersion <<static>> {
}
class DOTweenModuleUtils <<static>> {
    + {static} Init() : void
}
class Physics <<static>> {
    + {static} SetOrientationOnPath(options:PathOptions, t:Tween, newRot:Quaternion, trans:Transform) : void
    + {static} HasRigidbody2D(target:Component) : bool
    + {static} HasRigidbody(target:Component) : bool
    + {static} CreateDOTweenPathTween(target:MonoBehaviour, tweenRigidbody:bool, isLocal:bool, path:Path, duration:float, pathMode:PathMode) : TweenerCore<Vector3, Path, PathOptions>
}
DOTweenModuleUtils +- - Physics
class AsyncMethodBuilderAttribute <<sealed>> {
    + AsyncMethodBuilderAttribute(builderType:Type)
}
Attribute <|- - AsyncMethodBuilderAttribute
AsyncMethodBuilderAttribute - -> "BuilderType" Type
class AsyncUniTaskMethodBuilder <<struct>> {
    + {static} Create() : AsyncUniTaskMethodBuilder
    + SetException(exception:Exception) : void
    + SetResult() : void
    + AwaitOnCompleted(awaiter:TAwaiter, stateMachine:TStateMachine) : void
    + AwaitUnsafeOnCompleted(awaiter:TAwaiter, stateMachine:TStateMachine) : void
    + Start(stateMachine:TStateMachine) : void
    + SetStateMachine(stateMachine:IAsyncStateMachine) : void
}
class "AsyncUniTaskMethodBuilder`1"<T> <<struct>> {
    + {static} Create() : AsyncUniTaskMethodBuilder<T>
    + SetException(exception:Exception) : void
    + SetResult(result:T) : void
    + AwaitOnCompleted(awaiter:TAwaiter, stateMachine:TStateMachine) : void
    + AwaitUnsafeOnCompleted(awaiter:TAwaiter, stateMachine:TStateMachine) : void
    + Start(stateMachine:TStateMachine) : void
    + SetStateMachine(stateMachine:IAsyncStateMachine) : void
}
class "UniTask`1"<T> {
}
AsyncUniTaskMethodBuilder - -> "Task" UniTask
"AsyncUniTaskMethodBuilder`1" - -> "Task<T>" "UniTask`1"
class AsyncUniTaskVoidMethodBuilder <<struct>> {
    + {static} Create() : AsyncUniTaskVoidMethodBuilder
    + SetException(exception:Exception) : void
    + SetResult() : void
    + AwaitOnCompleted(awaiter:TAwaiter, stateMachine:TStateMachine) : void
    + AwaitUnsafeOnCompleted(awaiter:TAwaiter, stateMachine:TStateMachine) : void
    + Start(stateMachine:TStateMachine) : void
    + SetStateMachine(stateMachine:IAsyncStateMachine) : void
}
AsyncUniTaskVoidMethodBuilder - -> "Task" UniTaskVoid
interface IStateMachineRunner {
}
interface IStateMachineRunnerPromise {
}
interface "IStateMachineRunnerPromise`1"<T> {
}
class StateMachineUtility <<static>> {
    + {static} GetState(stateMachine:IAsyncStateMachine) : int
}
class "AsyncUniTaskVoid`1"<TStateMachine> <<sealed>> {
    + AsyncUniTaskVoid()
    + {static} SetStateMachine(stateMachine:TStateMachine, runnerFieldRef:IStateMachineRunner) : void
    + Return() : void
}
class "AsyncUniTask`1"<TStateMachine> <<sealed>> {
    + {static} SetStateMachine(stateMachine:TStateMachine, runnerPromiseFieldRef:IStateMachineRunnerPromise) : void
    + SetResult() : void
    + SetException(exception:Exception) : void
    + GetResult(token:short) : void
    + GetStatus(token:short) : UniTaskStatus
    + UnsafeGetStatus() : UniTaskStatus
    + OnCompleted(continuation:Action<object>, state:object, token:short) : void
}
class "AsyncUniTask`2"<TStateMachine,T> <<sealed>> {
    + {static} SetStateMachine(stateMachine:TStateMachine, runnerPromiseFieldRef:IStateMachineRunnerPromise<T>) : void
    + SetResult(result:T) : void
    + SetException(exception:Exception) : void
    + GetResult(token:short) : T
    + GetStatus(token:short) : UniTaskStatus
    + UnsafeGetStatus() : UniTaskStatus
    + OnCompleted(continuation:Action<object>, state:object, token:short) : void
}
class "IUniTaskSource`1"<T> {
}
class "ITaskPoolNode`1"<T> {
}
class "UniTask`1"<T> {
}
IUniTaskSource <|- - IStateMachineRunnerPromise
"IUniTaskSource`1" "<T>" <|- - "IStateMachineRunnerPromise`1"
IStateMachineRunner <|- - "AsyncUniTaskVoid`1"
"ITaskPoolNode`1" "<AsyncUniTaskVoid<TStateMachine>>" <|- - "AsyncUniTaskVoid`1"
IUniTaskSource <|- - "AsyncUniTaskVoid`1"
"AsyncUniTaskVoid`1" - -> "MoveNext" Action
IStateMachineRunnerPromise <|- - "AsyncUniTask`1"
IUniTaskSource <|- - "AsyncUniTask`1"
"ITaskPoolNode`1" "<AsyncUniTask<TStateMachine>>" <|- - "AsyncUniTask`1"
"AsyncUniTask`1" - -> "MoveNext" Action
"AsyncUniTask`1" - -> "Task" UniTask
"IStateMachineRunnerPromise`1" "<T>" <|- - "AsyncUniTask`2"
"IUniTaskSource`1" "<T>" <|- - "AsyncUniTask`2"
"ITaskPoolNode`1" "<AsyncUniTask<TStateMachine, T>>" <|- - "AsyncUniTask`2"
"AsyncUniTask`2" - -> "MoveNext" Action
"AsyncUniTask`2" - -> "Task<T>" "UniTask`1"
class "ArrayPool`1"<T> <<sealed>> {
    + Rent(minimumLength:int) : T[]
    + Return(array:T[], clearArray:bool) : void
}
"ArrayPool`1" o-> "Shared<T>" "ArrayPool`1"
class ArrayPoolUtil <<static>> {
    + {static} Materialize(source:IEnumerable<T>) : RentArray<T>
}
class "RentArray`1"<T> <<struct>> {
    + <<readonly>> Length : int
    + RentArray(array:T[], length:int, pool:ArrayPool<T>)
    + Dispose() : void
    + DisposeManually(clearArray:bool) : void
}
ArrayPoolUtil +- - "RentArray`1"
IDisposable <|- - "RentArray`1"
class ArrayUtil <<static>> {
    + {static} EnsureCapacity(array:T[], index:int) : void
    + {static} Materialize(source:IEnumerable<T>) : (T[] array, int length)
}
class ContinuationQueue <<sealed>> {
    + ContinuationQueue(timing:PlayerLoopTiming)
    + Enqueue(continuation:Action) : void
    + Clear() : int
    + Run() : void
}
class DiagnosticsExtensions <<static>> {
    + {static} CleanupAsyncStackTrace(stackTrace:StackTrace) : string
}
class Error <<static>> {
    + {static} ThrowArgumentNullException(value:T, paramName:string) : void
    + {static} ArgumentOutOfRange(paramName:string) : Exception
    + {static} NoElements() : Exception
    + {static} MoreThanOneElement() : Exception
    + {static} ThrowArgumentException(message:string) : void
    + {static} ThrowNotYetCompleted() : void
    + {static} ThrowNotYetCompleted() : T
    + {static} ThrowWhenContinuationIsAlreadyRegistered(continuationField:T) : void
    + {static} ThrowOperationCanceledException() : void
}
class "MinimumQueue`1"<T> {
    + MinimumQueue(capacity:int)
    + Count : int <<get>>
    + Peek() : T
    + Enqueue(item:T) : void
    + Dequeue() : T
}
class PlayerLoopRunner <<sealed>> {
    + PlayerLoopRunner(timing:PlayerLoopTiming)
    + AddAction(item:IPlayerLoopItem) : void
    + Clear() : int
    + Run() : void
}
class "PooledDelegate`1"<T> <<sealed>> {
    + {static} Create(continuation:Action) : Action<T>
}
class "ITaskPoolNode`1"<T> {
}
"ITaskPoolNode`1" "<PooledDelegate<T>>" <|- - "PooledDelegate`1"
class RuntimeHelpersAbstraction <<static>> {
    + {static} IsWellKnownNoReferenceContainsType() : bool
}
class "WellKnownNoReferenceContainsType`1"<T> <<static>> {
    + {static} <<readonly>> IsWellKnownType : bool
}
RuntimeHelpersAbstraction +- - "WellKnownNoReferenceContainsType`1"
class StateTuple <<static>> {
    + {static} Create(item1:T1) : StateTuple<T1>
    + {static} Create(item1:T1, item2:T2) : StateTuple<T1, T2>
    + {static} Create(item1:T1, item2:T2, item3:T3) : StateTuple<T1, T2, T3>
}
class "StateTuple`1"<T1> {
    + Item1 : T1
    + Deconstruct(item1:T1) : void
    + Dispose() : void
}
class "StatePool`1"<T1> <<static>> {
    + {static} Create(item1:T1) : StateTuple<T1>
    + {static} Return(tuple:StateTuple<T1>) : void
}
class "StateTuple`2"<T1,T2> {
    + Item1 : T1
    + Item2 : T2
    + Deconstruct(item1:T1, item2:T2) : void
    + Dispose() : void
}
class "StatePool`2"<T1,T2> <<static>> {
    + {static} Create(item1:T1, item2:T2) : StateTuple<T1, T2>
    + {static} Return(tuple:StateTuple<T1, T2>) : void
}
class "StateTuple`3"<T1,T2,T3> {
    + Item1 : T1
    + Item2 : T2
    + Item3 : T3
    + Deconstruct(item1:T1, item2:T2, item3:T3) : void
    + Dispose() : void
}
class "StatePool`3"<T1,T2,T3> <<static>> {
    + {static} Create(item1:T1, item2:T2, item3:T3) : StateTuple<T1, T2, T3>
    + {static} Return(tuple:StateTuple<T1, T2, T3>) : void
}
IDisposable <|- - "StateTuple`1"
IDisposable <|- - "StateTuple`2"
IDisposable <|- - "StateTuple`3"
class TaskTracker <<static>> {
    + {static} TrackActiveTask(task:IUniTaskSource, skipFrame:int) : void
    + {static} RemoveTracking(task:IUniTaskSource) : void
    + {static} CheckAndResetDirty() : bool
    + {static} ForEachActiveTask(action:Action<int, string, UniTaskStatus, DateTime, string>) : void
}
class UnityEqualityComparer <<static>> {
    + {static} GetDefault() : IEqualityComparer<T>
}
class "IEqualityComparer`1"<T> {
}
class "Cache`1"<T> <<static>> {
}
class Vector2EqualityComparer <<sealed>> {
    + Equals(self:Vector2, vector:Vector2) : bool
    + GetHashCode(obj:Vector2) : int
}
class Vector3EqualityComparer <<sealed>> {
    + Equals(self:Vector3, vector:Vector3) : bool
    + GetHashCode(obj:Vector3) : int
}
class Vector4EqualityComparer <<sealed>> {
    + Equals(self:Vector4, vector:Vector4) : bool
    + GetHashCode(obj:Vector4) : int
}
class ColorEqualityComparer <<sealed>> {
    + Equals(self:Color, other:Color) : bool
    + GetHashCode(obj:Color) : int
}
class RectEqualityComparer <<sealed>> {
    + Equals(self:Rect, other:Rect) : bool
    + GetHashCode(obj:Rect) : int
}
class BoundsEqualityComparer <<sealed>> {
    + Equals(self:Bounds, vector:Bounds) : bool
    + GetHashCode(obj:Bounds) : int
}
class QuaternionEqualityComparer <<sealed>> {
    + Equals(self:Quaternion, vector:Quaternion) : bool
    + GetHashCode(obj:Quaternion) : int
}
class Color32EqualityComparer <<sealed>> {
    + Equals(self:Color32, vector:Color32) : bool
    + GetHashCode(obj:Color32) : int
}
UnityEqualityComparer o-> "Vector2<Vector2>" "IEqualityComparer`1"
UnityEqualityComparer o-> "Vector3<Vector3>" "IEqualityComparer`1"
UnityEqualityComparer o-> "Vector4<Vector4>" "IEqualityComparer`1"
UnityEqualityComparer o-> "Color<Color>" "IEqualityComparer`1"
UnityEqualityComparer o-> "Color32<Color32>" "IEqualityComparer`1"
UnityEqualityComparer o-> "Rect<Rect>" "IEqualityComparer`1"
UnityEqualityComparer o-> "Bounds<Bounds>" "IEqualityComparer`1"
UnityEqualityComparer o-> "Quaternion<Quaternion>" "IEqualityComparer`1"
UnityEqualityComparer +- - "Cache`1"
"Cache`1" - -> "Comparer<T>" "IEqualityComparer`1"
UnityEqualityComparer +- - Vector2EqualityComparer
"IEqualityComparer`1" "<Vector2>" <|- - Vector2EqualityComparer
UnityEqualityComparer +- - Vector3EqualityComparer
"IEqualityComparer`1" "<Vector3>" <|- - Vector3EqualityComparer
UnityEqualityComparer +- - Vector4EqualityComparer
"IEqualityComparer`1" "<Vector4>" <|- - Vector4EqualityComparer
UnityEqualityComparer +- - ColorEqualityComparer
"IEqualityComparer`1" "<Color>" <|- - ColorEqualityComparer
UnityEqualityComparer +- - RectEqualityComparer
"IEqualityComparer`1" "<Rect>" <|- - RectEqualityComparer
UnityEqualityComparer +- - BoundsEqualityComparer
"IEqualityComparer`1" "<Bounds>" <|- - BoundsEqualityComparer
UnityEqualityComparer +- - QuaternionEqualityComparer
"IEqualityComparer`1" "<Quaternion>" <|- - QuaternionEqualityComparer
UnityEqualityComparer +- - Color32EqualityComparer
"IEqualityComparer`1" "<Color32>" <|- - Color32EqualityComparer
class ValueStopwatch <<struct>> {
    + {static} StartNew() : ValueStopwatch
    + IsInvalid : bool <<get>>
    + ElapsedTicks : long <<get>>
}
ValueStopwatch - -> "Elapsed" TimeSpan
class "WeakDictionary`2"<TKey,TValue> {
    + WeakDictionary(capacity:int, loadFactor:float, keyComparer:IEqualityComparer<TKey>)
    + TryAdd(key:TKey, value:TValue) : bool
    + TryGetValue(key:TKey, value:TValue) : bool
    + TryRemove(key:TKey) : bool
    + ToList() : List<KeyValuePair<TKey, TValue>>
    + ToList(list:List<KeyValuePair<TKey, TValue>>, clear:bool) : int
}
class Entry {
    + Hash : int
    + <<override>> ToString() : string
}
class "WeakReference`1"<T> {
}
"WeakDictionary`2" +- - Entry
Entry - -> "Key<TKey>" "WeakReference`1"
Entry - -> "Value" TValue
Entry - -> "Prev" Entry
Entry - -> "Next" Entry
class UniTaskAsyncEnumerable <<static>> <<partial>> {
    + {static} AggregateAsync(source:IUniTaskAsyncEnumerable<TSource>, accumulator:Func<TSource, TSource, TSource>, cancellationToken:CancellationToken) : UniTask<TSource>
    + {static} AggregateAsync(source:IUniTaskAsyncEnumerable<TSource>, seed:TAccumulate, accumulator:Func<TAccumulate, TSource, TAccumulate>, cancellationToken:CancellationToken) : UniTask<TAccumulate>
    + {static} AggregateAsync(source:IUniTaskAsyncEnumerable<TSource>, seed:TAccumulate, accumulator:Func<TAccumulate, TSource, TAccumulate>, resultSelector:Func<TAccumulate, TResult>, cancellationToken:CancellationToken) : UniTask<TResult>
    + {static} AggregateAwaitAsync(source:IUniTaskAsyncEnumerable<TSource>, accumulator:Func<TSource, TSource, UniTask<TSource>>, cancellationToken:CancellationToken) : UniTask<TSource>
    + {static} AggregateAwaitAsync(source:IUniTaskAsyncEnumerable<TSource>, seed:TAccumulate, accumulator:Func<TAccumulate, TSource, UniTask<TAccumulate>>, cancellationToken:CancellationToken) : UniTask<TAccumulate>
    + {static} AggregateAwaitAsync(source:IUniTaskAsyncEnumerable<TSource>, seed:TAccumulate, accumulator:Func<TAccumulate, TSource, UniTask<TAccumulate>>, resultSelector:Func<TAccumulate, UniTask<TResult>>, cancellationToken:CancellationToken) : UniTask<TResult>
    + {static} AggregateAwaitWithCancellationAsync(source:IUniTaskAsyncEnumerable<TSource>, accumulator:Func<TSource, TSource, CancellationToken, UniTask<TSource>>, cancellationToken:CancellationToken) : UniTask<TSource>
    + {static} AggregateAwaitWithCancellationAsync(source:IUniTaskAsyncEnumerable<TSource>, seed:TAccumulate, accumulator:Func<TAccumulate, TSource, CancellationToken, UniTask<TAccumulate>>, cancellationToken:CancellationToken) : UniTask<TAccumulate>
    + {static} AggregateAwaitWithCancellationAsync(source:IUniTaskAsyncEnumerable<TSource>, seed:TAccumulate, accumulator:Func<TAccumulate, TSource, CancellationToken, UniTask<TAccumulate>>, resultSelector:Func<TAccumulate, CancellationToken, UniTask<TResult>>, cancellationToken:CancellationToken) : UniTask<TResult>
}
class Aggregate <<static>> {
}
class UniTaskAsyncEnumerable <<static>> <<partial>> {
    + {static} AllAsync(source:IUniTaskAsyncEnumerable<TSource>, predicate:Func<TSource, Boolean>, cancellationToken:CancellationToken) : UniTask<Boolean>
    + {static} AllAwaitAsync(source:IUniTaskAsyncEnumerable<TSource>, predicate:Func<TSource, UniTask<Boolean>>, cancellationToken:CancellationToken) : UniTask<Boolean>
    + {static} AllAwaitWithCancellationAsync(source:IUniTaskAsyncEnumerable<TSource>, predicate:Func<TSource, CancellationToken, UniTask<Boolean>>, cancellationToken:CancellationToken) : UniTask<Boolean>
}
class All <<static>> {
}
class UniTaskAsyncEnumerable <<static>> <<partial>> {
    + {static} AnyAsync(source:IUniTaskAsyncEnumerable<TSource>, cancellationToken:CancellationToken) : UniTask<Boolean>
    + {static} AnyAsync(source:IUniTaskAsyncEnumerable<TSource>, predicate:Func<TSource, Boolean>, cancellationToken:CancellationToken) : UniTask<Boolean>
    + {static} AnyAwaitAsync(source:IUniTaskAsyncEnumerable<TSource>, predicate:Func<TSource, UniTask<Boolean>>, cancellationToken:CancellationToken) : UniTask<Boolean>
    + {static} AnyAwaitWithCancellationAsync(source:IUniTaskAsyncEnumerable<TSource>, predicate:Func<TSource, CancellationToken, UniTask<Boolean>>, cancellationToken:CancellationToken) : UniTask<Boolean>
}
class Any <<static>> {
}
class UniTaskAsyncEnumerable <<static>> <<partial>> {
    + {static} Append(source:IUniTaskAsyncEnumerable<TSource>, element:TSource) : IUniTaskAsyncEnumerable<TSource>
    + {static} Prepend(source:IUniTaskAsyncEnumerable<TSource>, element:TSource) : IUniTaskAsyncEnumerable<TSource>
}
class "AppendPrepend`1"<TSource> <<sealed>> {
    + AppendPrepend(source:IUniTaskAsyncEnumerable<TSource>, element:TSource, append:bool)
    + GetAsyncEnumerator(cancellationToken:CancellationToken) : IUniTaskAsyncEnumerator<TSource>
}
class "IUniTaskAsyncEnumerable`1"<T> {
}
class _AppendPrepend <<sealed>> {
    + _AppendPrepend(source:IUniTaskAsyncEnumerable<TSource>, element:TSource, append:bool, cancellationToken:CancellationToken)
    + MoveNextAsync() : UniTask<bool>
    + DisposeAsync() : UniTask
}
class "IUniTaskAsyncEnumerator`1"<T> {
}
enum State {
    None,
    RequirePrepend,
    RequireAppend,
    Completed,
}
"IUniTaskAsyncEnumerable`1" "<TSource>" <|- - "AppendPrepend`1"
"AppendPrepend`1" +- - _AppendPrepend
MoveNextSource <|- - _AppendPrepend
"IUniTaskAsyncEnumerator`1" "<TSource>" <|- - _AppendPrepend
_AppendPrepend - -> "Current" TSource
_AppendPrepend +- - State
class UniTaskAsyncEnumerable <<static>> <<partial>> {
    + {static} AsUniTaskAsyncEnumerable(source:IUniTaskAsyncEnumerable<TSource>) : IUniTaskAsyncEnumerable<TSource>
}
abstract class "AsyncEnumeratorBase`2"<TSource,TResult> {
    + AsyncEnumeratorBase(source:IUniTaskAsyncEnumerable<TSource>, cancellationToken:CancellationToken)
    + Current : TResult <<get>> <<protected set>>
    + MoveNextAsync() : UniTask<bool>
    + <<virtual>> DisposeAsync() : UniTask
}
abstract class "AsyncEnumeratorAwaitSelectorBase`3"<TSource,TResult,TAwait> {
    + AsyncEnumeratorAwaitSelectorBase(source:IUniTaskAsyncEnumerable<TSource>, cancellationToken:CancellationToken)
    + Current : TResult <<get>> <<protected set>>
    + MoveNextAsync() : UniTask<bool>
    + <<virtual>> DisposeAsync() : UniTask
}
class "IUniTaskAsyncEnumerator`1"<T> {
}
MoveNextSource <|- - "AsyncEnumeratorBase`2"
"IUniTaskAsyncEnumerator`1" "<TResult>" <|- - "AsyncEnumeratorBase`2"
MoveNextSource <|- - "AsyncEnumeratorAwaitSelectorBase`3"
"IUniTaskAsyncEnumerator`1" "<TResult>" <|- - "AsyncEnumeratorAwaitSelectorBase`3"
class UniTaskAsyncEnumerable <<static>> <<partial>> {
    + {static} AverageAsync(source:IUniTaskAsyncEnumerable<Int32>, cancellationToken:CancellationToken) : UniTask<double>
    + {static} AverageAsync(source:IUniTaskAsyncEnumerable<TSource>, selector:Func<TSource, Int32>, cancellationToken:CancellationToken) : UniTask<double>
    + {static} AverageAwaitAsync(source:IUniTaskAsyncEnumerable<TSource>, selector:Func<TSource, UniTask<Int32>>, cancellationToken:CancellationToken) : UniTask<double>
    + {static} AverageAwaitWithCancellationAsync(source:IUniTaskAsyncEnumerable<TSource>, selector:Func<TSource, CancellationToken, UniTask<Int32>>, cancellationToken:CancellationToken) : UniTask<double>
    + {static} AverageAsync(source:IUniTaskAsyncEnumerable<Int64>, cancellationToken:CancellationToken) : UniTask<double>
    + {static} AverageAsync(source:IUniTaskAsyncEnumerable<TSource>, selector:Func<TSource, Int64>, cancellationToken:CancellationToken) : UniTask<double>
    + {static} AverageAwaitAsync(source:IUniTaskAsyncEnumerable<TSource>, selector:Func<TSource, UniTask<Int64>>, cancellationToken:CancellationToken) : UniTask<double>
    + {static} AverageAwaitWithCancellationAsync(source:IUniTaskAsyncEnumerable<TSource>, selector:Func<TSource, CancellationToken, UniTask<Int64>>, cancellationToken:CancellationToken) : UniTask<double>
    + {static} AverageAsync(source:IUniTaskAsyncEnumerable<Single>, cancellationToken:CancellationToken) : UniTask<float>
    + {static} AverageAsync(source:IUniTaskAsyncEnumerable<TSource>, selector:Func<TSource, Single>, cancellationToken:CancellationToken) : UniTask<float>
    + {static} AverageAwaitAsync(source:IUniTaskAsyncEnumerable<TSource>, selector:Func<TSource, UniTask<Single>>, cancellationToken:CancellationToken) : UniTask<float>
    + {static} AverageAwaitWithCancellationAsync(source:IUniTaskAsyncEnumerable<TSource>, selector:Func<TSource, CancellationToken, UniTask<Single>>, cancellationToken:CancellationToken) : UniTask<float>
    + {static} AverageAsync(source:IUniTaskAsyncEnumerable<Double>, cancellationToken:CancellationToken) : UniTask<double>
    + {static} AverageAsync(source:IUniTaskAsyncEnumerable<TSource>, selector:Func<TSource, Double>, cancellationToken:CancellationToken) : UniTask<double>
    + {static} AverageAwaitAsync(source:IUniTaskAsyncEnumerable<TSource>, selector:Func<TSource, UniTask<Double>>, cancellationToken:CancellationToken) : UniTask<double>
    + {static} AverageAwaitWithCancellationAsync(source:IUniTaskAsyncEnumerable<TSource>, selector:Func<TSource, CancellationToken, UniTask<Double>>, cancellationToken:CancellationToken) : UniTask<double>
    + {static} AverageAsync(source:IUniTaskAsyncEnumerable<Decimal>, cancellationToken:CancellationToken) : UniTask<decimal>
    + {static} AverageAsync(source:IUniTaskAsyncEnumerable<TSource>, selector:Func<TSource, Decimal>, cancellationToken:CancellationToken) : UniTask<decimal>
    + {static} AverageAwaitAsync(source:IUniTaskAsyncEnumerable<TSource>, selector:Func<TSource, UniTask<Decimal>>, cancellationToken:CancellationToken) : UniTask<decimal>
    + {static} AverageAwaitWithCancellationAsync(source:IUniTaskAsyncEnumerable<TSource>, selector:Func<TSource, CancellationToken, UniTask<Decimal>>, cancellationToken:CancellationToken) : UniTask<decimal>
    + {static} AverageAsync(source:IUniTaskAsyncEnumerable<Int32?>, cancellationToken:CancellationToken) : UniTask<double?>
    + {static} AverageAsync(source:IUniTaskAsyncEnumerable<TSource>, selector:Func<TSource, Int32?>, cancellationToken:CancellationToken) : UniTask<double?>
    + {static} AverageAwaitAsync(source:IUniTaskAsyncEnumerable<TSource>, selector:Func<TSource, UniTask<Int32?>>, cancellationToken:CancellationToken) : UniTask<double?>
    + {static} AverageAwaitWithCancellationAsync(source:IUniTaskAsyncEnumerable<TSource>, selector:Func<TSource, CancellationToken, UniTask<Int32?>>, cancellationToken:CancellationToken) : UniTask<double?>
    + {static} AverageAsync(source:IUniTaskAsyncEnumerable<Int64?>, cancellationToken:CancellationToken) : UniTask<double?>
    + {static} AverageAsync(source:IUniTaskAsyncEnumerable<TSource>, selector:Func<TSource, Int64?>, cancellationToken:CancellationToken) : UniTask<double?>
    + {static} AverageAwaitAsync(source:IUniTaskAsyncEnumerable<TSource>, selector:Func<TSource, UniTask<Int64?>>, cancellationToken:CancellationToken) : UniTask<double?>
    + {static} AverageAwaitWithCancellationAsync(source:IUniTaskAsyncEnumerable<TSource>, selector:Func<TSource, CancellationToken, UniTask<Int64?>>, cancellationToken:CancellationToken) : UniTask<double?>
    + {static} AverageAsync(source:IUniTaskAsyncEnumerable<Single?>, cancellationToken:CancellationToken) : UniTask<float?>
    + {static} AverageAsync(source:IUniTaskAsyncEnumerable<TSource>, selector:Func<TSource, Single?>, cancellationToken:CancellationToken) : UniTask<float?>
    + {static} AverageAwaitAsync(source:IUniTaskAsyncEnumerable<TSource>, selector:Func<TSource, UniTask<Single?>>, cancellationToken:CancellationToken) : UniTask<float?>
    + {static} AverageAwaitWithCancellationAsync(source:IUniTaskAsyncEnumerable<TSource>, selector:Func<TSource, CancellationToken, UniTask<Single?>>, cancellationToken:CancellationToken) : UniTask<float?>
    + {static} AverageAsync(source:IUniTaskAsyncEnumerable<Double?>, cancellationToken:CancellationToken) : UniTask<double?>
    + {static} AverageAsync(source:IUniTaskAsyncEnumerable<TSource>, selector:Func<TSource, Double?>, cancellationToken:CancellationToken) : UniTask<double?>
    + {static} AverageAwaitAsync(source:IUniTaskAsyncEnumerable<TSource>, selector:Func<TSource, UniTask<Double?>>, cancellationToken:CancellationToken) : UniTask<double?>
    + {static} AverageAwaitWithCancellationAsync(source:IUniTaskAsyncEnumerable<TSource>, selector:Func<TSource, CancellationToken, UniTask<Double?>>, cancellationToken:CancellationToken) : UniTask<double?>
    + {static} AverageAsync(source:IUniTaskAsyncEnumerable<Decimal?>, cancellationToken:CancellationToken) : UniTask<decimal?>
    + {static} AverageAsync(source:IUniTaskAsyncEnumerable<TSource>, selector:Func<TSource, Decimal?>, cancellationToken:CancellationToken) : UniTask<decimal?>
    + {static} AverageAwaitAsync(source:IUniTaskAsyncEnumerable<TSource>, selector:Func<TSource, UniTask<Decimal?>>, cancellationToken:CancellationToken) : UniTask<decimal?>
    + {static} AverageAwaitWithCancellationAsync(source:IUniTaskAsyncEnumerable<TSource>, selector:Func<TSource, CancellationToken, UniTask<Decimal?>>, cancellationToken:CancellationToken) : UniTask<decimal?>
}
class Average <<static>> {
    + {static} <<async>> AverageAsync(source:IUniTaskAsyncEnumerable<Int32>, cancellationToken:CancellationToken) : UniTask<double>
    + {static} <<async>> AverageAsync(source:IUniTaskAsyncEnumerable<TSource>, selector:Func<TSource, Int32>, cancellationToken:CancellationToken) : UniTask<double>
    + {static} <<async>> AverageAwaitAsync(source:IUniTaskAsyncEnumerable<TSource>, selector:Func<TSource, UniTask<Int32>>, cancellationToken:CancellationToken) : UniTask<double>
    + {static} <<async>> AverageAwaitWithCancellationAsync(source:IUniTaskAsyncEnumerable<TSource>, selector:Func<TSource, CancellationToken, UniTask<Int32>>, cancellationToken:CancellationToken) : UniTask<double>
    + {static} <<async>> AverageAsync(source:IUniTaskAsyncEnumerable<Int64>, cancellationToken:CancellationToken) : UniTask<double>
    + {static} <<async>> AverageAsync(source:IUniTaskAsyncEnumerable<TSource>, selector:Func<TSource, Int64>, cancellationToken:CancellationToken) : UniTask<double>
    + {static} <<async>> AverageAwaitAsync(source:IUniTaskAsyncEnumerable<TSource>, selector:Func<TSource, UniTask<Int64>>, cancellationToken:CancellationToken) : UniTask<double>
    + {static} <<async>> AverageAwaitWithCancellationAsync(source:IUniTaskAsyncEnumerable<TSource>, selector:Func<TSource, CancellationToken, UniTask<Int64>>, cancellationToken:CancellationToken) : UniTask<double>
    + {static} <<async>> AverageAsync(source:IUniTaskAsyncEnumerable<Single>, cancellationToken:CancellationToken) : UniTask<float>
    + {static} <<async>> AverageAsync(source:IUniTaskAsyncEnumerable<TSource>, selector:Func<TSource, Single>, cancellationToken:CancellationToken) : UniTask<float>
    + {static} <<async>> AverageAwaitAsync(source:IUniTaskAsyncEnumerable<TSource>, selector:Func<TSource, UniTask<Single>>, cancellationToken:CancellationToken) : UniTask<float>
    + {static} <<async>> AverageAwaitWithCancellationAsync(source:IUniTaskAsyncEnumerable<TSource>, selector:Func<TSource, CancellationToken, UniTask<Single>>, cancellationToken:CancellationToken) : UniTask<float>
    + {static} <<async>> AverageAsync(source:IUniTaskAsyncEnumerable<Double>, cancellationToken:CancellationToken) : UniTask<double>
    + {static} <<async>> AverageAsync(source:IUniTaskAsyncEnumerable<TSource>, selector:Func<TSource, Double>, cancellationToken:CancellationToken) : UniTask<double>
    + {static} <<async>> AverageAwaitAsync(source:IUniTaskAsyncEnumerable<TSource>, selector:Func<TSource, UniTask<Double>>, cancellationToken:CancellationToken) : UniTask<double>
    + {static} <<async>> AverageAwaitWithCancellationAsync(source:IUniTaskAsyncEnumerable<TSource>, selector:Func<TSource, CancellationToken, UniTask<Double>>, cancellationToken:CancellationToken) : UniTask<double>
    + {static} <<async>> AverageAsync(source:IUniTaskAsyncEnumerable<Decimal>, cancellationToken:CancellationToken) : UniTask<decimal>
    + {static} <<async>> AverageAsync(source:IUniTaskAsyncEnumerable<TSource>, selector:Func<TSource, Decimal>, cancellationToken:CancellationToken) : UniTask<decimal>
    + {static} <<async>> AverageAwaitAsync(source:IUniTaskAsyncEnumerable<TSource>, selector:Func<TSource, UniTask<Decimal>>, cancellationToken:CancellationToken) : UniTask<decimal>
    + {static} <<async>> AverageAwaitWithCancellationAsync(source:IUniTaskAsyncEnumerable<TSource>, selector:Func<TSource, CancellationToken, UniTask<Decimal>>, cancellationToken:CancellationToken) : UniTask<decimal>
    + {static} <<async>> AverageAsync(source:IUniTaskAsyncEnumerable<Int32?>, cancellationToken:CancellationToken) : UniTask<double?>
    + {static} <<async>> AverageAsync(source:IUniTaskAsyncEnumerable<TSource>, selector:Func<TSource, Int32?>, cancellationToken:CancellationToken) : UniTask<double?>
    + {static} <<async>> AverageAwaitAsync(source:IUniTaskAsyncEnumerable<TSource>, selector:Func<TSource, UniTask<Int32?>>, cancellationToken:CancellationToken) : UniTask<double?>
    + {static} <<async>> AverageAwaitWithCancellationAsync(source:IUniTaskAsyncEnumerable<TSource>, selector:Func<TSource, CancellationToken, UniTask<Int32?>>, cancellationToken:CancellationToken) : UniTask<double?>
    + {static} <<async>> AverageAsync(source:IUniTaskAsyncEnumerable<Int64?>, cancellationToken:CancellationToken) : UniTask<double?>
    + {static} <<async>> AverageAsync(source:IUniTaskAsyncEnumerable<TSource>, selector:Func<TSource, Int64?>, cancellationToken:CancellationToken) : UniTask<double?>
    + {static} <<async>> AverageAwaitAsync(source:IUniTaskAsyncEnumerable<TSource>, selector:Func<TSource, UniTask<Int64?>>, cancellationToken:CancellationToken) : UniTask<double?>
    + {static} <<async>> AverageAwaitWithCancellationAsync(source:IUniTaskAsyncEnumerable<TSource>, selector:Func<TSource, CancellationToken, UniTask<Int64?>>, cancellationToken:CancellationToken) : UniTask<double?>
    + {static} <<async>> AverageAsync(source:IUniTaskAsyncEnumerable<Single?>, cancellationToken:CancellationToken) : UniTask<float?>
    + {static} <<async>> AverageAsync(source:IUniTaskAsyncEnumerable<TSource>, selector:Func<TSource, Single?>, cancellationToken:CancellationToken) : UniTask<float?>
    + {static} <<async>> AverageAwaitAsync(source:IUniTaskAsyncEnumerable<TSource>, selector:Func<TSource, UniTask<Single?>>, cancellationToken:CancellationToken) : UniTask<float?>
    + {static} <<async>> AverageAwaitWithCancellationAsync(source:IUniTaskAsyncEnumerable<TSource>, selector:Func<TSource, CancellationToken, UniTask<Single?>>, cancellationToken:CancellationToken) : UniTask<float?>
    + {static} <<async>> AverageAsync(source:IUniTaskAsyncEnumerable<Double?>, cancellationToken:CancellationToken) : UniTask<double?>
    + {static} <<async>> AverageAsync(source:IUniTaskAsyncEnumerable<TSource>, selector:Func<TSource, Double?>, cancellationToken:CancellationToken) : UniTask<double?>
    + {static} <<async>> AverageAwaitAsync(source:IUniTaskAsyncEnumerable<TSource>, selector:Func<TSource, UniTask<Double?>>, cancellationToken:CancellationToken) : UniTask<double?>
    + {static} <<async>> AverageAwaitWithCancellationAsync(source:IUniTaskAsyncEnumerable<TSource>, selector:Func<TSource, CancellationToken, UniTask<Double?>>, cancellationToken:CancellationToken) : UniTask<double?>
    + {static} <<async>> AverageAsync(source:IUniTaskAsyncEnumerable<Decimal?>, cancellationToken:CancellationToken) : UniTask<decimal?>
    + {static} <<async>> AverageAsync(source:IUniTaskAsyncEnumerable<TSource>, selector:Func<TSource, Decimal?>, cancellationToken:CancellationToken) : UniTask<decimal?>
    + {static} <<async>> AverageAwaitAsync(source:IUniTaskAsyncEnumerable<TSource>, selector:Func<TSource, UniTask<Decimal?>>, cancellationToken:CancellationToken) : UniTask<decimal?>
    + {static} <<async>> AverageAwaitWithCancellationAsync(source:IUniTaskAsyncEnumerable<TSource>, selector:Func<TSource, CancellationToken, UniTask<Decimal?>>, cancellationToken:CancellationToken) : UniTask<decimal?>
}
class UniTaskAsyncEnumerable <<static>> <<partial>> {
    + {static} Buffer(source:IUniTaskAsyncEnumerable<TSource>, count:Int32) : IUniTaskAsyncEnumerable<IList<TSource>>
    + {static} Buffer(source:IUniTaskAsyncEnumerable<TSource>, count:Int32, skip:Int32) : IUniTaskAsyncEnumerable<IList<TSource>>
}
class "Buffer`1"<TSource> <<sealed>> {
    + Buffer(source:IUniTaskAsyncEnumerable<TSource>, count:int)
    + GetAsyncEnumerator(cancellationToken:CancellationToken) : IUniTaskAsyncEnumerator<IList<TSource>>
}
class "BufferSkip`1"<TSource> <<sealed>> {
    + BufferSkip(source:IUniTaskAsyncEnumerable<TSource>, count:int, skip:int)
    + GetAsyncEnumerator(cancellationToken:CancellationToken) : IUniTaskAsyncEnumerator<IList<TSource>>
}
class "IUniTaskAsyncEnumerable`1"<T> {
}
class _Buffer <<sealed>> {
    + _Buffer(source:IUniTaskAsyncEnumerable<TSource>, count:int, cancellationToken:CancellationToken)
    + MoveNextAsync() : UniTask<bool>
    + DisposeAsync() : UniTask
}
class _BufferSkip <<sealed>> {
    + _BufferSkip(source:IUniTaskAsyncEnumerable<TSource>, count:int, skip:int, cancellationToken:CancellationToken)
    + MoveNextAsync() : UniTask<bool>
    + DisposeAsync() : UniTask
}
class "IUniTaskAsyncEnumerator`1"<T> {
}
class "IList`1"<T> {
}
"IUniTaskAsyncEnumerable`1" "<IList<TSource>>" <|- - "Buffer`1"
"IUniTaskAsyncEnumerable`1" "<IList<TSource>>" <|- - "BufferSkip`1"
"Buffer`1" +- - _Buffer
MoveNextSource <|- - _Buffer
"IUniTaskAsyncEnumerator`1" "<IList<TSource>>" <|- - _Buffer
_Buffer - -> "Current<TSource>" "IList`1"
"BufferSkip`1" +- - _BufferSkip
MoveNextSource <|- - _BufferSkip
"IUniTaskAsyncEnumerator`1" "<IList<TSource>>" <|- - _BufferSkip
_BufferSkip - -> "Current<TSource>" "IList`1"
class UniTaskAsyncEnumerable <<static>> <<partial>> {
    + {static} Cast(source:IUniTaskAsyncEnumerable<Object>) : IUniTaskAsyncEnumerable<TResult>
}
class "Cast`1"<TResult> <<sealed>> {
    + Cast(source:IUniTaskAsyncEnumerable<object>)
    + GetAsyncEnumerator(cancellationToken:CancellationToken) : IUniTaskAsyncEnumerator<TResult>
}
class "IUniTaskAsyncEnumerable`1"<T> {
}
class _Cast {
    + _Cast(source:IUniTaskAsyncEnumerable<object>, cancellationToken:CancellationToken)
}
class "AsyncEnumeratorBase`2"<T1,T2> {
}
"IUniTaskAsyncEnumerable`1" "<TResult>" <|- - "Cast`1"
"Cast`1" +- - _Cast
"AsyncEnumeratorBase`2" "<object,TResult>" <|- - _Cast
class UniTaskAsyncEnumerable <<static>> <<partial>> {
    + {static} CombineLatest(source1:IUniTaskAsyncEnumerable<T1>, source2:IUniTaskAsyncEnumerable<T2>, resultSelector:Func<T1, T2, TResult>) : IUniTaskAsyncEnumerable<TResult>
    + {static} CombineLatest(source1:IUniTaskAsyncEnumerable<T1>, source2:IUniTaskAsyncEnumerable<T2>, source3:IUniTaskAsyncEnumerable<T3>, resultSelector:Func<T1, T2, T3, TResult>) : IUniTaskAsyncEnumerable<TResult>
    + {static} CombineLatest(source1:IUniTaskAsyncEnumerable<T1>, source2:IUniTaskAsyncEnumerable<T2>, source3:IUniTaskAsyncEnumerable<T3>, source4:IUniTaskAsyncEnumerable<T4>, resultSelector:Func<T1, T2, T3, T4, TResult>) : IUniTaskAsyncEnumerable<TResult>
    + {static} CombineLatest(source1:IUniTaskAsyncEnumerable<T1>, source2:IUniTaskAsyncEnumerable<T2>, source3:IUniTaskAsyncEnumerable<T3>, source4:IUniTaskAsyncEnumerable<T4>, source5:IUniTaskAsyncEnumerable<T5>, resultSelector:Func<T1, T2, T3, T4, T5, TResult>) : IUniTaskAsyncEnumerable<TResult>
    + {static} CombineLatest(source1:IUniTaskAsyncEnumerable<T1>, source2:IUniTaskAsyncEnumerable<T2>, source3:IUniTaskAsyncEnumerable<T3>, source4:IUniTaskAsyncEnumerable<T4>, source5:IUniTaskAsyncEnumerable<T5>, source6:IUniTaskAsyncEnumerable<T6>, resultSelector:Func<T1, T2, T3, T4, T5, T6, TResult>) : IUniTaskAsyncEnumerable<TResult>
    + {static} CombineLatest(source1:IUniTaskAsyncEnumerable<T1>, source2:IUniTaskAsyncEnumerable<T2>, source3:IUniTaskAsyncEnumerable<T3>, source4:IUniTaskAsyncEnumerable<T4>, source5:IUniTaskAsyncEnumerable<T5>, source6:IUniTaskAsyncEnumerable<T6>, source7:IUniTaskAsyncEnumerable<T7>, resultSelector:Func<T1, T2, T3, T4, T5, T6, T7, TResult>) : IUniTaskAsyncEnumerable<TResult>
    + {static} CombineLatest(source1:IUniTaskAsyncEnumerable<T1>, source2:IUniTaskAsyncEnumerable<T2>, source3:IUniTaskAsyncEnumerable<T3>, source4:IUniTaskAsyncEnumerable<T4>, source5:IUniTaskAsyncEnumerable<T5>, source6:IUniTaskAsyncEnumerable<T6>, source7:IUniTaskAsyncEnumerable<T7>, source8:IUniTaskAsyncEnumerable<T8>, resultSelector:Func<T1, T2, T3, T4, T5, T6, T7, T8, TResult>) : IUniTaskAsyncEnumerable<TResult>
    + {static} CombineLatest(source1:IUniTaskAsyncEnumerable<T1>, source2:IUniTaskAsyncEnumerable<T2>, source3:IUniTaskAsyncEnumerable<T3>, source4:IUniTaskAsyncEnumerable<T4>, source5:IUniTaskAsyncEnumerable<T5>, source6:IUniTaskAsyncEnumerable<T6>, source7:IUniTaskAsyncEnumerable<T7>, source8:IUniTaskAsyncEnumerable<T8>, source9:IUniTaskAsyncEnumerable<T9>, resultSelector:Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>) : IUniTaskAsyncEnumerable<TResult>
    + {static} CombineLatest(source1:IUniTaskAsyncEnumerable<T1>, source2:IUniTaskAsyncEnumerable<T2>, source3:IUniTaskAsyncEnumerable<T3>, source4:IUniTaskAsyncEnumerable<T4>, source5:IUniTaskAsyncEnumerable<T5>, source6:IUniTaskAsyncEnumerable<T6>, source7:IUniTaskAsyncEnumerable<T7>, source8:IUniTaskAsyncEnumerable<T8>, source9:IUniTaskAsyncEnumerable<T9>, source10:IUniTaskAsyncEnumerable<T10>, resultSelector:Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult>) : IUniTaskAsyncEnumerable<TResult>
    + {static} CombineLatest(source1:IUniTaskAsyncEnumerable<T1>, source2:IUniTaskAsyncEnumerable<T2>, source3:IUniTaskAsyncEnumerable<T3>, source4:IUniTaskAsyncEnumerable<T4>, source5:IUniTaskAsyncEnumerable<T5>, source6:IUniTaskAsyncEnumerable<T6>, source7:IUniTaskAsyncEnumerable<T7>, source8:IUniTaskAsyncEnumerable<T8>, source9:IUniTaskAsyncEnumerable<T9>, source10:IUniTaskAsyncEnumerable<T10>, source11:IUniTaskAsyncEnumerable<T11>, resultSelector:Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult>) : IUniTaskAsyncEnumerable<TResult>
    + {static} CombineLatest(source1:IUniTaskAsyncEnumerable<T1>, source2:IUniTaskAsyncEnumerable<T2>, source3:IUniTaskAsyncEnumerable<T3>, source4:IUniTaskAsyncEnumerable<T4>, source5:IUniTaskAsyncEnumerable<T5>, source6:IUniTaskAsyncEnumerable<T6>, source7:IUniTaskAsyncEnumerable<T7>, source8:IUniTaskAsyncEnumerable<T8>, source9:IUniTaskAsyncEnumerable<T9>, source10:IUniTaskAsyncEnumerable<T10>, source11:IUniTaskAsyncEnumerable<T11>, source12:IUniTaskAsyncEnumerable<T12>, resultSelector:Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult>) : IUniTaskAsyncEnumerable<TResult>
    + {static} CombineLatest(source1:IUniTaskAsyncEnumerable<T1>, source2:IUniTaskAsyncEnumerable<T2>, source3:IUniTaskAsyncEnumerable<T3>, source4:IUniTaskAsyncEnumerable<T4>, source5:IUniTaskAsyncEnumerable<T5>, source6:IUniTaskAsyncEnumerable<T6>, source7:IUniTaskAsyncEnumerable<T7>, source8:IUniTaskAsyncEnumerable<T8>, source9:IUniTaskAsyncEnumerable<T9>, source10:IUniTaskAsyncEnumerable<T10>, source11:IUniTaskAsyncEnumerable<T11>, source12:IUniTaskAsyncEnumerable<T12>, source13:IUniTaskAsyncEnumerable<T13>, resultSelector:Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult>) : IUniTaskAsyncEnumerable<TResult>
    + {static} CombineLatest(source1:IUniTaskAsyncEnumerable<T1>, source2:IUniTaskAsyncEnumerable<T2>, source3:IUniTaskAsyncEnumerable<T3>, source4:IUniTaskAsyncEnumerable<T4>, source5:IUniTaskAsyncEnumerable<T5>, source6:IUniTaskAsyncEnumerable<T6>, source7:IUniTaskAsyncEnumerable<T7>, source8:IUniTaskAsyncEnumerable<T8>, source9:IUniTaskAsyncEnumerable<T9>, source10:IUniTaskAsyncEnumerable<T10>, source11:IUniTaskAsyncEnumerable<T11>, source12:IUniTaskAsyncEnumerable<T12>, source13:IUniTaskAsyncEnumerable<T13>, source14:IUniTaskAsyncEnumerable<T14>, resultSelector:Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>) : IUniTaskAsyncEnumerable<TResult>
    + {static} CombineLatest(source1:IUniTaskAsyncEnumerable<T1>, source2:IUniTaskAsyncEnumerable<T2>, source3:IUniTaskAsyncEnumerable<T3>, source4:IUniTaskAsyncEnumerable<T4>, source5:IUniTaskAsyncEnumerable<T5>, source6:IUniTaskAsyncEnumerable<T6>, source7:IUniTaskAsyncEnumerable<T7>, source8:IUniTaskAsyncEnumerable<T8>, source9:IUniTaskAsyncEnumerable<T9>, source10:IUniTaskAsyncEnumerable<T10>, source11:IUniTaskAsyncEnumerable<T11>, source12:IUniTaskAsyncEnumerable<T12>, source13:IUniTaskAsyncEnumerable<T13>, source14:IUniTaskAsyncEnumerable<T14>, source15:IUniTaskAsyncEnumerable<T15>, resultSelector:Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TResult>) : IUniTaskAsyncEnumerable<TResult>
}
class "CombineLatest`3"<T1,T2,TResult> {
    + CombineLatest(source1:IUniTaskAsyncEnumerable<T1>, source2:IUniTaskAsyncEnumerable<T2>, resultSelector:Func<T1, T2, TResult>)
    + GetAsyncEnumerator(cancellationToken:CancellationToken) : IUniTaskAsyncEnumerator<TResult>
}
class "CombineLatest`4"<T1,T2,T3,TResult> {
    + CombineLatest(source1:IUniTaskAsyncEnumerable<T1>, source2:IUniTaskAsyncEnumerable<T2>, source3:IUniTaskAsyncEnumerable<T3>, resultSelector:Func<T1, T2, T3, TResult>)
    + GetAsyncEnumerator(cancellationToken:CancellationToken) : IUniTaskAsyncEnumerator<TResult>
}
class "CombineLatest`5"<T1,T2,T3,T4,TResult> {
    + CombineLatest(source1:IUniTaskAsyncEnumerable<T1>, source2:IUniTaskAsyncEnumerable<T2>, source3:IUniTaskAsyncEnumerable<T3>, source4:IUniTaskAsyncEnumerable<T4>, resultSelector:Func<T1, T2, T3, T4, TResult>)
    + GetAsyncEnumerator(cancellationToken:CancellationToken) : IUniTaskAsyncEnumerator<TResult>
}
class "CombineLatest`6"<T1,T2,T3,T4,T5,TResult> {
    + CombineLatest(source1:IUniTaskAsyncEnumerable<T1>, source2:IUniTaskAsyncEnumerable<T2>, source3:IUniTaskAsyncEnumerable<T3>, source4:IUniTaskAsyncEnumerable<T4>, source5:IUniTaskAsyncEnumerable<T5>, resultSelector:Func<T1, T2, T3, T4, T5, TResult>)
    + GetAsyncEnumerator(cancellationToken:CancellationToken) : IUniTaskAsyncEnumerator<TResult>
}
class "CombineLatest`7"<T1,T2,T3,T4,T5,T6,TResult> {
    + CombineLatest(source1:IUniTaskAsyncEnumerable<T1>, source2:IUniTaskAsyncEnumerable<T2>, source3:IUniTaskAsyncEnumerable<T3>, source4:IUniTaskAsyncEnumerable<T4>, source5:IUniTaskAsyncEnumerable<T5>, source6:IUniTaskAsyncEnumerable<T6>, resultSelector:Func<T1, T2, T3, T4, T5, T6, TResult>)
    + GetAsyncEnumerator(cancellationToken:CancellationToken) : IUniTaskAsyncEnumerator<TResult>
}
class "CombineLatest`8"<T1,T2,T3,T4,T5,T6,T7,TResult> {
    + CombineLatest(source1:IUniTaskAsyncEnumerable<T1>, source2:IUniTaskAsyncEnumerable<T2>, source3:IUniTaskAsyncEnumerable<T3>, source4:IUniTaskAsyncEnumerable<T4>, source5:IUniTaskAsyncEnumerable<T5>, source6:IUniTaskAsyncEnumerable<T6>, source7:IUniTaskAsyncEnumerable<T7>, resultSelector:Func<T1, T2, T3, T4, T5, T6, T7, TResult>)
    + GetAsyncEnumerator(cancellationToken:CancellationToken) : IUniTaskAsyncEnumerator<TResult>
}
class "CombineLatest`9"<T1,T2,T3,T4,T5,T6,T7,T8,TResult> {
    + CombineLatest(source1:IUniTaskAsyncEnumerable<T1>, source2:IUniTaskAsyncEnumerable<T2>, source3:IUniTaskAsyncEnumerable<T3>, source4:IUniTaskAsyncEnumerable<T4>, source5:IUniTaskAsyncEnumerable<T5>, source6:IUniTaskAsyncEnumerable<T6>, source7:IUniTaskAsyncEnumerable<T7>, source8:IUniTaskAsyncEnumerable<T8>, resultSelector:Func<T1, T2, T3, T4, T5, T6, T7, T8, TResult>)
    + GetAsyncEnumerator(cancellationToken:CancellationToken) : IUniTaskAsyncEnumerator<TResult>
}
class "CombineLatest`10"<T1,T2,T3,T4,T5,T6,T7,T8,T9,TResult> {
    + CombineLatest(source1:IUniTaskAsyncEnumerable<T1>, source2:IUniTaskAsyncEnumerable<T2>, source3:IUniTaskAsyncEnumerable<T3>, source4:IUniTaskAsyncEnumerable<T4>, source5:IUniTaskAsyncEnumerable<T5>, source6:IUniTaskAsyncEnumerable<T6>, source7:IUniTaskAsyncEnumerable<T7>, source8:IUniTaskAsyncEnumerable<T8>, source9:IUniTaskAsyncEnumerable<T9>, resultSelector:Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>)
    + GetAsyncEnumerator(cancellationToken:CancellationToken) : IUniTaskAsyncEnumerator<TResult>
}
class "CombineLatest`11"<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,TResult> {
    + CombineLatest(source1:IUniTaskAsyncEnumerable<T1>, source2:IUniTaskAsyncEnumerable<T2>, source3:IUniTaskAsyncEnumerable<T3>, source4:IUniTaskAsyncEnumerable<T4>, source5:IUniTaskAsyncEnumerable<T5>, source6:IUniTaskAsyncEnumerable<T6>, source7:IUniTaskAsyncEnumerable<T7>, source8:IUniTaskAsyncEnumerable<T8>, source9:IUniTaskAsyncEnumerable<T9>, source10:IUniTaskAsyncEnumerable<T10>, resultSelector:Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult>)
    + GetAsyncEnumerator(cancellationToken:CancellationToken) : IUniTaskAsyncEnumerator<TResult>
}
class "CombineLatest`12"<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,TResult> {
    + CombineLatest(source1:IUniTaskAsyncEnumerable<T1>, source2:IUniTaskAsyncEnumerable<T2>, source3:IUniTaskAsyncEnumerable<T3>, source4:IUniTaskAsyncEnumerable<T4>, source5:IUniTaskAsyncEnumerable<T5>, source6:IUniTaskAsyncEnumerable<T6>, source7:IUniTaskAsyncEnumerable<T7>, source8:IUniTaskAsyncEnumerable<T8>, source9:IUniTaskAsyncEnumerable<T9>, source10:IUniTaskAsyncEnumerable<T10>, source11:IUniTaskAsyncEnumerable<T11>, resultSelector:Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult>)
    + GetAsyncEnumerator(cancellationToken:CancellationToken) : IUniTaskAsyncEnumerator<TResult>
}
class "CombineLatest`13"<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,TResult> {
    + CombineLatest(source1:IUniTaskAsyncEnumerable<T1>, source2:IUniTaskAsyncEnumerable<T2>, source3:IUniTaskAsyncEnumerable<T3>, source4:IUniTaskAsyncEnumerable<T4>, source5:IUniTaskAsyncEnumerable<T5>, source6:IUniTaskAsyncEnumerable<T6>, source7:IUniTaskAsyncEnumerable<T7>, source8:IUniTaskAsyncEnumerable<T8>, source9:IUniTaskAsyncEnumerable<T9>, source10:IUniTaskAsyncEnumerable<T10>, source11:IUniTaskAsyncEnumerable<T11>, source12:IUniTaskAsyncEnumerable<T12>, resultSelector:Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult>)
    + GetAsyncEnumerator(cancellationToken:CancellationToken) : IUniTaskAsyncEnumerator<TResult>
}
class "CombineLatest`14"<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,TResult> {
    + CombineLatest(source1:IUniTaskAsyncEnumerable<T1>, source2:IUniTaskAsyncEnumerable<T2>, source3:IUniTaskAsyncEnumerable<T3>, source4:IUniTaskAsyncEnumerable<T4>, source5:IUniTaskAsyncEnumerable<T5>, source6:IUniTaskAsyncEnumerable<T6>, source7:IUniTaskAsyncEnumerable<T7>, source8:IUniTaskAsyncEnumerable<T8>, source9:IUniTaskAsyncEnumerable<T9>, source10:IUniTaskAsyncEnumerable<T10>, source11:IUniTaskAsyncEnumerable<T11>, source12:IUniTaskAsyncEnumerable<T12>, source13:IUniTaskAsyncEnumerable<T13>, resultSelector:Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult>)
    + GetAsyncEnumerator(cancellationToken:CancellationToken) : IUniTaskAsyncEnumerator<TResult>
}
class "CombineLatest`15"<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,TResult> {
    + CombineLatest(source1:IUniTaskAsyncEnumerable<T1>, source2:IUniTaskAsyncEnumerable<T2>, source3:IUniTaskAsyncEnumerable<T3>, source4:IUniTaskAsyncEnumerable<T4>, source5:IUniTaskAsyncEnumerable<T5>, source6:IUniTaskAsyncEnumerable<T6>, source7:IUniTaskAsyncEnumerable<T7>, source8:IUniTaskAsyncEnumerable<T8>, source9:IUniTaskAsyncEnumerable<T9>, source10:IUniTaskAsyncEnumerable<T10>, source11:IUniTaskAsyncEnumerable<T11>, source12:IUniTaskAsyncEnumerable<T12>, source13:IUniTaskAsyncEnumerable<T13>, source14:IUniTaskAsyncEnumerable<T14>, resultSelector:Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>)
    + GetAsyncEnumerator(cancellationToken:CancellationToken) : IUniTaskAsyncEnumerator<TResult>
}
class "CombineLatest`16"<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,TResult> {
    + CombineLatest(source1:IUniTaskAsyncEnumerable<T1>, source2:IUniTaskAsyncEnumerable<T2>, source3:IUniTaskAsyncEnumerable<T3>, source4:IUniTaskAsyncEnumerable<T4>, source5:IUniTaskAsyncEnumerable<T5>, source6:IUniTaskAsyncEnumerable<T6>, source7:IUniTaskAsyncEnumerable<T7>, source8:IUniTaskAsyncEnumerable<T8>, source9:IUniTaskAsyncEnumerable<T9>, source10:IUniTaskAsyncEnumerable<T10>, source11:IUniTaskAsyncEnumerable<T11>, source12:IUniTaskAsyncEnumerable<T12>, source13:IUniTaskAsyncEnumerable<T13>, source14:IUniTaskAsyncEnumerable<T14>, source15:IUniTaskAsyncEnumerable<T15>, resultSelector:Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TResult>)
    + GetAsyncEnumerator(cancellationToken:CancellationToken) : IUniTaskAsyncEnumerator<TResult>
}
class "IUniTaskAsyncEnumerable`1"<T> {
}
class _CombineLatest {
    + _CombineLatest(source1:IUniTaskAsyncEnumerable<T1>, source2:IUniTaskAsyncEnumerable<T2>, resultSelector:Func<T1, T2, TResult>, cancellationToken:CancellationToken)
    + MoveNextAsync() : UniTask<bool>
    + <<async>> DisposeAsync() : UniTask
}
class _CombineLatest {
    + _CombineLatest(source1:IUniTaskAsyncEnumerable<T1>, source2:IUniTaskAsyncEnumerable<T2>, source3:IUniTaskAsyncEnumerable<T3>, resultSelector:Func<T1, T2, T3, TResult>, cancellationToken:CancellationToken)
    + MoveNextAsync() : UniTask<bool>
    + <<async>> DisposeAsync() : UniTask
}
class _CombineLatest {
    + _CombineLatest(source1:IUniTaskAsyncEnumerable<T1>, source2:IUniTaskAsyncEnumerable<T2>, source3:IUniTaskAsyncEnumerable<T3>, source4:IUniTaskAsyncEnumerable<T4>, resultSelector:Func<T1, T2, T3, T4, TResult>, cancellationToken:CancellationToken)
    + MoveNextAsync() : UniTask<bool>
    + <<async>> DisposeAsync() : UniTask
}
class _CombineLatest {
    + _CombineLatest(source1:IUniTaskAsyncEnumerable<T1>, source2:IUniTaskAsyncEnumerable<T2>, source3:IUniTaskAsyncEnumerable<T3>, source4:IUniTaskAsyncEnumerable<T4>, source5:IUniTaskAsyncEnumerable<T5>, resultSelector:Func<T1, T2, T3, T4, T5, TResult>, cancellationToken:CancellationToken)
    + MoveNextAsync() : UniTask<bool>
    + <<async>> DisposeAsync() : UniTask
}
class _CombineLatest {
    + _CombineLatest(source1:IUniTaskAsyncEnumerable<T1>, source2:IUniTaskAsyncEnumerable<T2>, source3:IUniTaskAsyncEnumerable<T3>, source4:IUniTaskAsyncEnumerable<T4>, source5:IUniTaskAsyncEnumerable<T5>, source6:IUniTaskAsyncEnumerable<T6>, resultSelector:Func<T1, T2, T3, T4, T5, T6, TResult>, cancellationToken:CancellationToken)
    + MoveNextAsync() : UniTask<bool>
    + <<async>> DisposeAsync() : UniTask
}
class _CombineLatest {
    + _CombineLatest(source1:IUniTaskAsyncEnumerable<T1>, source2:IUniTaskAsyncEnumerable<T2>, source3:IUniTaskAsyncEnumerable<T3>, source4:IUniTaskAsyncEnumerable<T4>, source5:IUniTaskAsyncEnumerable<T5>, source6:IUniTaskAsyncEnumerable<T6>, source7:IUniTaskAsyncEnumerable<T7>, resultSelector:Func<T1, T2, T3, T4, T5, T6, T7, TResult>, cancellationToken:CancellationToken)
    + MoveNextAsync() : UniTask<bool>
    + <<async>> DisposeAsync() : UniTask
}
class _CombineLatest {
    + _CombineLatest(source1:IUniTaskAsyncEnumerable<T1>, source2:IUniTaskAsyncEnumerable<T2>, source3:IUniTaskAsyncEnumerable<T3>, source4:IUniTaskAsyncEnumerable<T4>, source5:IUniTaskAsyncEnumerable<T5>, source6:IUniTaskAsyncEnumerable<T6>, source7:IUniTaskAsyncEnumerable<T7>, source8:IUniTaskAsyncEnumerable<T8>, resultSelector:Func<T1, T2, T3, T4, T5, T6, T7, T8, TResult>, cancellationToken:CancellationToken)
    + MoveNextAsync() : UniTask<bool>
    + <<async>> DisposeAsync() : UniTask
}
class _CombineLatest {
    + _CombineLatest(source1:IUniTaskAsyncEnumerable<T1>, source2:IUniTaskAsyncEnumerable<T2>, source3:IUniTaskAsyncEnumerable<T3>, source4:IUniTaskAsyncEnumerable<T4>, source5:IUniTaskAsyncEnumerable<T5>, source6:IUniTaskAsyncEnumerable<T6>, source7:IUniTaskAsyncEnumerable<T7>, source8:IUniTaskAsyncEnumerable<T8>, source9:IUniTaskAsyncEnumerable<T9>, resultSelector:Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>, cancellationToken:CancellationToken)
    + MoveNextAsync() : UniTask<bool>
    + <<async>> DisposeAsync() : UniTask
}
class _CombineLatest {
    + _CombineLatest(source1:IUniTaskAsyncEnumerable<T1>, source2:IUniTaskAsyncEnumerable<T2>, source3:IUniTaskAsyncEnumerable<T3>, source4:IUniTaskAsyncEnumerable<T4>, source5:IUniTaskAsyncEnumerable<T5>, source6:IUniTaskAsyncEnumerable<T6>, source7:IUniTaskAsyncEnumerable<T7>, source8:IUniTaskAsyncEnumerable<T8>, source9:IUniTaskAsyncEnumerable<T9>, source10:IUniTaskAsyncEnumerable<T10>, resultSelector:Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult>, cancellationToken:CancellationToken)
    + MoveNextAsync() : UniTask<bool>
    + <<async>> DisposeAsync() : UniTask
}
class _CombineLatest {
    + _CombineLatest(source1:IUniTaskAsyncEnumerable<T1>, source2:IUniTaskAsyncEnumerable<T2>, source3:IUniTaskAsyncEnumerable<T3>, source4:IUniTaskAsyncEnumerable<T4>, source5:IUniTaskAsyncEnumerable<T5>, source6:IUniTaskAsyncEnumerable<T6>, source7:IUniTaskAsyncEnumerable<T7>, source8:IUniTaskAsyncEnumerable<T8>, source9:IUniTaskAsyncEnumerable<T9>, source10:IUniTaskAsyncEnumerable<T10>, source11:IUniTaskAsyncEnumerable<T11>, resultSelector:Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult>, cancellationToken:CancellationToken)
    + MoveNextAsync() : UniTask<bool>
    + <<async>> DisposeAsync() : UniTask
}
class _CombineLatest {
    + _CombineLatest(source1:IUniTaskAsyncEnumerable<T1>, source2:IUniTaskAsyncEnumerable<T2>, source3:IUniTaskAsyncEnumerable<T3>, source4:IUniTaskAsyncEnumerable<T4>, source5:IUniTaskAsyncEnumerable<T5>, source6:IUniTaskAsyncEnumerable<T6>, source7:IUniTaskAsyncEnumerable<T7>, source8:IUniTaskAsyncEnumerable<T8>, source9:IUniTaskAsyncEnumerable<T9>, source10:IUniTaskAsyncEnumerable<T10>, source11:IUniTaskAsyncEnumerable<T11>, source12:IUniTaskAsyncEnumerable<T12>, resultSelector:Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult>, cancellationToken:CancellationToken)
    + MoveNextAsync() : UniTask<bool>
    + <<async>> DisposeAsync() : UniTask
}
class _CombineLatest {
    + _CombineLatest(source1:IUniTaskAsyncEnumerable<T1>, source2:IUniTaskAsyncEnumerable<T2>, source3:IUniTaskAsyncEnumerable<T3>, source4:IUniTaskAsyncEnumerable<T4>, source5:IUniTaskAsyncEnumerable<T5>, source6:IUniTaskAsyncEnumerable<T6>, source7:IUniTaskAsyncEnumerable<T7>, source8:IUniTaskAsyncEnumerable<T8>, source9:IUniTaskAsyncEnumerable<T9>, source10:IUniTaskAsyncEnumerable<T10>, source11:IUniTaskAsyncEnumerable<T11>, source12:IUniTaskAsyncEnumerable<T12>, source13:IUniTaskAsyncEnumerable<T13>, resultSelector:Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult>, cancellationToken:CancellationToken)
    + MoveNextAsync() : UniTask<bool>
    + <<async>> DisposeAsync() : UniTask
}
class _CombineLatest {
    + _CombineLatest(source1:IUniTaskAsyncEnumerable<T1>, source2:IUniTaskAsyncEnumerable<T2>, source3:IUniTaskAsyncEnumerable<T3>, source4:IUniTaskAsyncEnumerable<T4>, source5:IUniTaskAsyncEnumerable<T5>, source6:IUniTaskAsyncEnumerable<T6>, source7:IUniTaskAsyncEnumerable<T7>, source8:IUniTaskAsyncEnumerable<T8>, source9:IUniTaskAsyncEnumerable<T9>, source10:IUniTaskAsyncEnumerable<T10>, source11:IUniTaskAsyncEnumerable<T11>, source12:IUniTaskAsyncEnumerable<T12>, source13:IUniTaskAsyncEnumerable<T13>, source14:IUniTaskAsyncEnumerable<T14>, resultSelector:Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>, cancellationToken:CancellationToken)
    + MoveNextAsync() : UniTask<bool>
    + <<async>> DisposeAsync() : UniTask
}
class _CombineLatest {
    + _CombineLatest(source1:IUniTaskAsyncEnumerable<T1>, source2:IUniTaskAsyncEnumerable<T2>, source3:IUniTaskAsyncEnumerable<T3>, source4:IUniTaskAsyncEnumerable<T4>, source5:IUniTaskAsyncEnumerable<T5>, source6:IUniTaskAsyncEnumerable<T6>, source7:IUniTaskAsyncEnumerable<T7>, source8:IUniTaskAsyncEnumerable<T8>, source9:IUniTaskAsyncEnumerable<T9>, source10:IUniTaskAsyncEnumerable<T10>, source11:IUniTaskAsyncEnumerable<T11>, source12:IUniTaskAsyncEnumerable<T12>, source13:IUniTaskAsyncEnumerable<T13>, source14:IUniTaskAsyncEnumerable<T14>, source15:IUniTaskAsyncEnumerable<T15>, resultSelector:Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TResult>, cancellationToken:CancellationToken)
    + MoveNextAsync() : UniTask<bool>
    + <<async>> DisposeAsync() : UniTask
}
class "IUniTaskAsyncEnumerator`1"<T> {
}
"IUniTaskAsyncEnumerable`1" "<TResult>" <|- - "CombineLatest`3"
"IUniTaskAsyncEnumerable`1" "<TResult>" <|- - "CombineLatest`4"
"IUniTaskAsyncEnumerable`1" "<TResult>" <|- - "CombineLatest`5"
"IUniTaskAsyncEnumerable`1" "<TResult>" <|- - "CombineLatest`6"
"IUniTaskAsyncEnumerable`1" "<TResult>" <|- - "CombineLatest`7"
"IUniTaskAsyncEnumerable`1" "<TResult>" <|- - "CombineLatest`8"
"IUniTaskAsyncEnumerable`1" "<TResult>" <|- - "CombineLatest`9"
"IUniTaskAsyncEnumerable`1" "<TResult>" <|- - "CombineLatest`10"
"IUniTaskAsyncEnumerable`1" "<TResult>" <|- - "CombineLatest`11"
"IUniTaskAsyncEnumerable`1" "<TResult>" <|- - "CombineLatest`12"
"IUniTaskAsyncEnumerable`1" "<TResult>" <|- - "CombineLatest`13"
"IUniTaskAsyncEnumerable`1" "<TResult>" <|- - "CombineLatest`14"
"IUniTaskAsyncEnumerable`1" "<TResult>" <|- - "CombineLatest`15"
"IUniTaskAsyncEnumerable`1" "<TResult>" <|- - "CombineLatest`16"
"CombineLatest`3" +- - _CombineLatest
MoveNextSource <|- - _CombineLatest
"IUniTaskAsyncEnumerator`1" "<TResult>" <|- - _CombineLatest
_CombineLatest - -> "Current" TResult
"CombineLatest`4" +- - _CombineLatest
MoveNextSource <|- - _CombineLatest
"IUniTaskAsyncEnumerator`1" "<TResult>" <|- - _CombineLatest
_CombineLatest - -> "Current" TResult
"CombineLatest`5" +- - _CombineLatest
MoveNextSource <|- - _CombineLatest
"IUniTaskAsyncEnumerator`1" "<TResult>" <|- - _CombineLatest
_CombineLatest - -> "Current" TResult
"CombineLatest`6" +- - _CombineLatest
MoveNextSource <|- - _CombineLatest
"IUniTaskAsyncEnumerator`1" "<TResult>" <|- - _CombineLatest
_CombineLatest - -> "Current" TResult
"CombineLatest`7" +- - _CombineLatest
MoveNextSource <|- - _CombineLatest
"IUniTaskAsyncEnumerator`1" "<TResult>" <|- - _CombineLatest
_CombineLatest - -> "Current" TResult
"CombineLatest`8" +- - _CombineLatest
MoveNextSource <|- - _CombineLatest
"IUniTaskAsyncEnumerator`1" "<TResult>" <|- - _CombineLatest
_CombineLatest - -> "Current" TResult
"CombineLatest`9" +- - _CombineLatest
MoveNextSource <|- - _CombineLatest
"IUniTaskAsyncEnumerator`1" "<TResult>" <|- - _CombineLatest
_CombineLatest - -> "Current" TResult
"CombineLatest`10" +- - _CombineLatest
MoveNextSource <|- - _CombineLatest
"IUniTaskAsyncEnumerator`1" "<TResult>" <|- - _CombineLatest
_CombineLatest - -> "Current" TResult
"CombineLatest`11" +- - _CombineLatest
MoveNextSource <|- - _CombineLatest
"IUniTaskAsyncEnumerator`1" "<TResult>" <|- - _CombineLatest
_CombineLatest - -> "Current" TResult
"CombineLatest`12" +- - _CombineLatest
MoveNextSource <|- - _CombineLatest
"IUniTaskAsyncEnumerator`1" "<TResult>" <|- - _CombineLatest
_CombineLatest - -> "Current" TResult
"CombineLatest`13" +- - _CombineLatest
MoveNextSource <|- - _CombineLatest
"IUniTaskAsyncEnumerator`1" "<TResult>" <|- - _CombineLatest
_CombineLatest - -> "Current" TResult
"CombineLatest`14" +- - _CombineLatest
MoveNextSource <|- - _CombineLatest
"IUniTaskAsyncEnumerator`1" "<TResult>" <|- - _CombineLatest
_CombineLatest - -> "Current" TResult
"CombineLatest`15" +- - _CombineLatest
MoveNextSource <|- - _CombineLatest
"IUniTaskAsyncEnumerator`1" "<TResult>" <|- - _CombineLatest
_CombineLatest - -> "Current" TResult
"CombineLatest`16" +- - _CombineLatest
MoveNextSource <|- - _CombineLatest
"IUniTaskAsyncEnumerator`1" "<TResult>" <|- - _CombineLatest
_CombineLatest - -> "Current" TResult
class UniTaskAsyncEnumerable <<static>> <<partial>> {
    + {static} Concat(first:IUniTaskAsyncEnumerable<TSource>, second:IUniTaskAsyncEnumerable<TSource>) : IUniTaskAsyncEnumerable<TSource>
}
class "Concat`1"<TSource> <<sealed>> {
    + Concat(first:IUniTaskAsyncEnumerable<TSource>, second:IUniTaskAsyncEnumerable<TSource>)
    + GetAsyncEnumerator(cancellationToken:CancellationToken) : IUniTaskAsyncEnumerator<TSource>
}
class "IUniTaskAsyncEnumerable`1"<T> {
}
class _Concat <<sealed>> {
    + _Concat(first:IUniTaskAsyncEnumerable<TSource>, second:IUniTaskAsyncEnumerable<TSource>, cancellationToken:CancellationToken)
    + MoveNextAsync() : UniTask<bool>
    + DisposeAsync() : UniTask
}
class "IUniTaskAsyncEnumerator`1"<T> {
}
enum IteratingState {
    IteratingFirst,
    IteratingSecond,
    Complete,
}
"IUniTaskAsyncEnumerable`1" "<TSource>" <|- - "Concat`1"
"Concat`1" +- - _Concat
MoveNextSource <|- - _Concat
"IUniTaskAsyncEnumerator`1" "<TSource>" <|- - _Concat
_Concat - -> "Current" TSource
_Concat +- - IteratingState
class UniTaskAsyncEnumerable <<static>> <<partial>> {
    + {static} ContainsAsync(source:IUniTaskAsyncEnumerable<TSource>, value:TSource, cancellationToken:CancellationToken) : UniTask<Boolean>
    + {static} ContainsAsync(source:IUniTaskAsyncEnumerable<TSource>, value:TSource, comparer:IEqualityComparer<TSource>, cancellationToken:CancellationToken) : UniTask<Boolean>
}
class Contains <<static>> {
}
class UniTaskAsyncEnumerable <<static>> <<partial>> {
    + {static} CountAsync(source:IUniTaskAsyncEnumerable<TSource>, cancellationToken:CancellationToken) : UniTask<Int32>
    + {static} CountAsync(source:IUniTaskAsyncEnumerable<TSource>, predicate:Func<TSource, Boolean>, cancellationToken:CancellationToken) : UniTask<Int32>
    + {static} CountAwaitAsync(source:IUniTaskAsyncEnumerable<TSource>, predicate:Func<TSource, UniTask<Boolean>>, cancellationToken:CancellationToken) : UniTask<Int32>
    + {static} CountAwaitWithCancellationAsync(source:IUniTaskAsyncEnumerable<TSource>, predicate:Func<TSource, CancellationToken, UniTask<Boolean>>, cancellationToken:CancellationToken) : UniTask<Int32>
}
class Count <<static>> {
}
class UniTaskAsyncEnumerable <<static>> <<partial>> {
    + {static} Create(create:Func<IAsyncWriter<T>, CancellationToken, UniTask>) : IUniTaskAsyncEnumerable<T>
}
interface "IAsyncWriter`1"<T> {
}
class "Create`1"<T> <<sealed>> {
    + Create(create:Func<IAsyncWriter<T>, CancellationToken, UniTask>)
    + GetAsyncEnumerator(cancellationToken:CancellationToken) : IUniTaskAsyncEnumerator<T>
}
class "IUniTaskAsyncEnumerable`1"<T> {
}
class _Create <<sealed>> {
    + _Create(create:Func<IAsyncWriter<T>, CancellationToken, UniTask>, cancellationToken:CancellationToken)
    + DisposeAsync() : UniTask
    + MoveNextAsync() : UniTask<bool>
    + SetResult(value:T) : void
}
class AsyncWriter <<sealed>> {
    + AsyncWriter(enumerator:_Create)
    + GetResult(token:short) : void
    + GetStatus(token:short) : UniTaskStatus
    + UnsafeGetStatus() : UniTaskStatus
    + OnCompleted(continuation:Action<object>, state:object, token:short) : void
    + YieldAsync(value:T) : UniTask
    + SignalWriter() : void
}
class "IUniTaskAsyncEnumerator`1"<T> {
}
"IUniTaskAsyncEnumerable`1" "<T>" <|- - "Create`1"
"Create`1" +- - _Create
MoveNextSource <|- - _Create
"IUniTaskAsyncEnumerator`1" "<T>" <|- - _Create
_Create - -> "Current" T
"Create`1" +- - AsyncWriter
IUniTaskSource <|- - AsyncWriter
"IAsyncWriter`1" "<T>" <|- - AsyncWriter
class UniTaskAsyncEnumerable <<static>> <<partial>> {
    + {static} DefaultIfEmpty(source:IUniTaskAsyncEnumerable<TSource>) : IUniTaskAsyncEnumerable<TSource>
    + {static} DefaultIfEmpty(source:IUniTaskAsyncEnumerable<TSource>, defaultValue:TSource) : IUniTaskAsyncEnumerable<TSource>
}
class "DefaultIfEmpty`1"<TSource> <<sealed>> {
    + DefaultIfEmpty(source:IUniTaskAsyncEnumerable<TSource>, defaultValue:TSource)
    + GetAsyncEnumerator(cancellationToken:CancellationToken) : IUniTaskAsyncEnumerator<TSource>
}
class "IUniTaskAsyncEnumerable`1"<T> {
}
class _DefaultIfEmpty <<sealed>> {
    + _DefaultIfEmpty(source:IUniTaskAsyncEnumerable<TSource>, defaultValue:TSource, cancellationToken:CancellationToken)
    + MoveNextAsync() : UniTask<bool>
    + DisposeAsync() : UniTask
}
class "IUniTaskAsyncEnumerator`1"<T> {
}
enum IteratingState {
    Empty,
    Iterating,
    Completed,
}
"IUniTaskAsyncEnumerable`1" "<TSource>" <|- - "DefaultIfEmpty`1"
"DefaultIfEmpty`1" +- - _DefaultIfEmpty
MoveNextSource <|- - _DefaultIfEmpty
"IUniTaskAsyncEnumerator`1" "<TSource>" <|- - _DefaultIfEmpty
_DefaultIfEmpty - -> "Current" TSource
_DefaultIfEmpty +- - IteratingState
class UniTaskAsyncEnumerable <<static>> <<partial>> {
    + {static} Distinct(source:IUniTaskAsyncEnumerable<TSource>) : IUniTaskAsyncEnumerable<TSource>
    + {static} Distinct(source:IUniTaskAsyncEnumerable<TSource>, comparer:IEqualityComparer<TSource>) : IUniTaskAsyncEnumerable<TSource>
    + {static} Distinct(source:IUniTaskAsyncEnumerable<TSource>, keySelector:Func<TSource, TKey>) : IUniTaskAsyncEnumerable<TSource>
    + {static} Distinct(source:IUniTaskAsyncEnumerable<TSource>, keySelector:Func<TSource, TKey>, comparer:IEqualityComparer<TKey>) : IUniTaskAsyncEnumerable<TSource>
    + {static} DistinctAwait(source:IUniTaskAsyncEnumerable<TSource>, keySelector:Func<TSource, UniTask<TKey>>) : IUniTaskAsyncEnumerable<TSource>
    + {static} DistinctAwait(source:IUniTaskAsyncEnumerable<TSource>, keySelector:Func<TSource, UniTask<TKey>>, comparer:IEqualityComparer<TKey>) : IUniTaskAsyncEnumerable<TSource>
    + {static} DistinctAwaitWithCancellation(source:IUniTaskAsyncEnumerable<TSource>, keySelector:Func<TSource, CancellationToken, UniTask<TKey>>) : IUniTaskAsyncEnumerable<TSource>
    + {static} DistinctAwaitWithCancellation(source:IUniTaskAsyncEnumerable<TSource>, keySelector:Func<TSource, CancellationToken, UniTask<TKey>>, comparer:IEqualityComparer<TKey>) : IUniTaskAsyncEnumerable<TSource>
}
class "Distinct`1"<TSource> <<sealed>> {
    + Distinct(source:IUniTaskAsyncEnumerable<TSource>, comparer:IEqualityComparer<TSource>)
    + GetAsyncEnumerator(cancellationToken:CancellationToken) : IUniTaskAsyncEnumerator<TSource>
}
class "Distinct`2"<TSource,TKey> <<sealed>> {
    + Distinct(source:IUniTaskAsyncEnumerable<TSource>, keySelector:Func<TSource, TKey>, comparer:IEqualityComparer<TKey>)
    + GetAsyncEnumerator(cancellationToken:CancellationToken) : IUniTaskAsyncEnumerator<TSource>
}
class "DistinctAwait`2"<TSource,TKey> <<sealed>> {
    + DistinctAwait(source:IUniTaskAsyncEnumerable<TSource>, keySelector:Func<TSource, UniTask<TKey>>, comparer:IEqualityComparer<TKey>)
    + GetAsyncEnumerator(cancellationToken:CancellationToken) : IUniTaskAsyncEnumerator<TSource>
}
class "DistinctAwaitWithCancellation`2"<TSource,TKey> <<sealed>> {
    + DistinctAwaitWithCancellation(source:IUniTaskAsyncEnumerable<TSource>, keySelector:Func<TSource, CancellationToken, UniTask<TKey>>, comparer:IEqualityComparer<TKey>)
    + GetAsyncEnumerator(cancellationToken:CancellationToken) : IUniTaskAsyncEnumerator<TSource>
}
class "IUniTaskAsyncEnumerable`1"<T> {
}
class _Distinct {
    + _Distinct(source:IUniTaskAsyncEnumerable<TSource>, comparer:IEqualityComparer<TSource>, cancellationToken:CancellationToken)
}
class _Distinct {
    + _Distinct(source:IUniTaskAsyncEnumerable<TSource>, keySelector:Func<TSource, TKey>, comparer:IEqualityComparer<TKey>, cancellationToken:CancellationToken)
}
class _DistinctAwait {
    + _DistinctAwait(source:IUniTaskAsyncEnumerable<TSource>, keySelector:Func<TSource, UniTask<TKey>>, comparer:IEqualityComparer<TKey>, cancellationToken:CancellationToken)
}
class _DistinctAwaitWithCancellation {
    + _DistinctAwaitWithCancellation(source:IUniTaskAsyncEnumerable<TSource>, keySelector:Func<TSource, CancellationToken, UniTask<TKey>>, comparer:IEqualityComparer<TKey>, cancellationToken:CancellationToken)
}
class "AsyncEnumeratorBase`2"<T1,T2> {
}
class "AsyncEnumeratorAwaitSelectorBase`3"<T1,T2,T3> {
}
"IUniTaskAsyncEnumerable`1" "<TSource>" <|- - "Distinct`1"
"IUniTaskAsyncEnumerable`1" "<TSource>" <|- - "Distinct`2"
"IUniTaskAsyncEnumerable`1" "<TSource>" <|- - "DistinctAwait`2"
"IUniTaskAsyncEnumerable`1" "<TSource>" <|- - "DistinctAwaitWithCancellation`2"
"Distinct`1" +- - _Distinct
"AsyncEnumeratorBase`2" "<TSource,TSource>" <|- - _Distinct
"Distinct`2" +- - _Distinct
"AsyncEnumeratorBase`2" "<TSource,TSource>" <|- - _Distinct
"DistinctAwait`2" +- - _DistinctAwait
"AsyncEnumeratorAwaitSelectorBase`3" "<TSource,TSource,TKey>" <|- - _DistinctAwait
"DistinctAwaitWithCancellation`2" +- - _DistinctAwaitWithCancellation
"AsyncEnumeratorAwaitSelectorBase`3" "<TSource,TSource,TKey>" <|- - _DistinctAwaitWithCancellation
class UniTaskAsyncEnumerable <<static>> <<partial>> {
    + {static} DistinctUntilChanged(source:IUniTaskAsyncEnumerable<TSource>) : IUniTaskAsyncEnumerable<TSource>
    + {static} DistinctUntilChanged(source:IUniTaskAsyncEnumerable<TSource>, comparer:IEqualityComparer<TSource>) : IUniTaskAsyncEnumerable<TSource>
    + {static} DistinctUntilChanged(source:IUniTaskAsyncEnumerable<TSource>, keySelector:Func<TSource, TKey>) : IUniTaskAsyncEnumerable<TSource>
    + {static} DistinctUntilChanged(source:IUniTaskAsyncEnumerable<TSource>, keySelector:Func<TSource, TKey>, comparer:IEqualityComparer<TKey>) : IUniTaskAsyncEnumerable<TSource>
    + {static} DistinctUntilChangedAwait(source:IUniTaskAsyncEnumerable<TSource>, keySelector:Func<TSource, UniTask<TKey>>) : IUniTaskAsyncEnumerable<TSource>
    + {static} DistinctUntilChangedAwait(source:IUniTaskAsyncEnumerable<TSource>, keySelector:Func<TSource, UniTask<TKey>>, comparer:IEqualityComparer<TKey>) : IUniTaskAsyncEnumerable<TSource>
    + {static} DistinctUntilChangedAwaitWithCancellation(source:IUniTaskAsyncEnumerable<TSource>, keySelector:Func<TSource, CancellationToken, UniTask<TKey>>) : IUniTaskAsyncEnumerable<TSource>
    + {static} DistinctUntilChangedAwaitWithCancellation(source:IUniTaskAsyncEnumerable<TSource>, keySelector:Func<TSource, CancellationToken, UniTask<TKey>>, comparer:IEqualityComparer<TKey>) : IUniTaskAsyncEnumerable<TSource>
}
class "DistinctUntilChanged`1"<TSource> <<sealed>> {
    + DistinctUntilChanged(source:IUniTaskAsyncEnumerable<TSource>, comparer:IEqualityComparer<TSource>)
    + GetAsyncEnumerator(cancellationToken:CancellationToken) : IUniTaskAsyncEnumerator<TSource>
}
class "DistinctUntilChanged`2"<TSource,TKey> <<sealed>> {
    + DistinctUntilChanged(source:IUniTaskAsyncEnumerable<TSource>, keySelector:Func<TSource, TKey>, comparer:IEqualityComparer<TKey>)
    + GetAsyncEnumerator(cancellationToken:CancellationToken) : IUniTaskAsyncEnumerator<TSource>
}
class "DistinctUntilChangedAwait`2"<TSource,TKey> <<sealed>> {
    + DistinctUntilChangedAwait(source:IUniTaskAsyncEnumerable<TSource>, keySelector:Func<TSource, UniTask<TKey>>, comparer:IEqualityComparer<TKey>)
    + GetAsyncEnumerator(cancellationToken:CancellationToken) : IUniTaskAsyncEnumerator<TSource>
}
class "DistinctUntilChangedAwaitWithCancellation`2"<TSource,TKey> <<sealed>> {
    + DistinctUntilChangedAwaitWithCancellation(source:IUniTaskAsyncEnumerable<TSource>, keySelector:Func<TSource, CancellationToken, UniTask<TKey>>, comparer:IEqualityComparer<TKey>)
    + GetAsyncEnumerator(cancellationToken:CancellationToken) : IUniTaskAsyncEnumerator<TSource>
}
class "IUniTaskAsyncEnumerable`1"<T> {
}
class _DistinctUntilChanged <<sealed>> {
    + _DistinctUntilChanged(source:IUniTaskAsyncEnumerable<TSource>, comparer:IEqualityComparer<TSource>, cancellationToken:CancellationToken)
    + MoveNextAsync() : UniTask<bool>
    + DisposeAsync() : UniTask
}
class _DistinctUntilChanged <<sealed>> {
    + _DistinctUntilChanged(source:IUniTaskAsyncEnumerable<TSource>, keySelector:Func<TSource, TKey>, comparer:IEqualityComparer<TKey>, cancellationToken:CancellationToken)
    + MoveNextAsync() : UniTask<bool>
    + DisposeAsync() : UniTask
}
class _DistinctUntilChangedAwait <<sealed>> {
    + _DistinctUntilChangedAwait(source:IUniTaskAsyncEnumerable<TSource>, keySelector:Func<TSource, UniTask<TKey>>, comparer:IEqualityComparer<TKey>, cancellationToken:CancellationToken)
    + MoveNextAsync() : UniTask<bool>
    + DisposeAsync() : UniTask
}
class _DistinctUntilChangedAwaitWithCancellation <<sealed>> {
    + _DistinctUntilChangedAwaitWithCancellation(source:IUniTaskAsyncEnumerable<TSource>, keySelector:Func<TSource, CancellationToken, UniTask<TKey>>, comparer:IEqualityComparer<TKey>, cancellationToken:CancellationToken)
    + MoveNextAsync() : UniTask<bool>
    + DisposeAsync() : UniTask
}
class "IUniTaskAsyncEnumerator`1"<T> {
}
"IUniTaskAsyncEnumerable`1" "<TSource>" <|- - "DistinctUntilChanged`1"
"IUniTaskAsyncEnumerable`1" "<TSource>" <|- - "DistinctUntilChanged`2"
"IUniTaskAsyncEnumerable`1" "<TSource>" <|- - "DistinctUntilChangedAwait`2"
"IUniTaskAsyncEnumerable`1" "<TSource>" <|- - "DistinctUntilChangedAwaitWithCancellation`2"
"DistinctUntilChanged`1" +- - _DistinctUntilChanged
MoveNextSource <|- - _DistinctUntilChanged
"IUniTaskAsyncEnumerator`1" "<TSource>" <|- - _DistinctUntilChanged
_DistinctUntilChanged - -> "Current" TSource
"DistinctUntilChanged`2" +- - _DistinctUntilChanged
MoveNextSource <|- - _DistinctUntilChanged
"IUniTaskAsyncEnumerator`1" "<TSource>" <|- - _DistinctUntilChanged
_DistinctUntilChanged - -> "Current" TSource
"DistinctUntilChangedAwait`2" +- - _DistinctUntilChangedAwait
MoveNextSource <|- - _DistinctUntilChangedAwait
"IUniTaskAsyncEnumerator`1" "<TSource>" <|- - _DistinctUntilChangedAwait
_DistinctUntilChangedAwait - -> "Current" TSource
"DistinctUntilChangedAwaitWithCancellation`2" +- - _DistinctUntilChangedAwaitWithCancellation
MoveNextSource <|- - _DistinctUntilChangedAwaitWithCancellation
"IUniTaskAsyncEnumerator`1" "<TSource>" <|- - _DistinctUntilChangedAwaitWithCancellation
_DistinctUntilChangedAwaitWithCancellation - -> "Current" TSource
class UniTaskAsyncEnumerable <<static>> <<partial>> {
    + {static} Do(source:IUniTaskAsyncEnumerable<TSource>, onNext:Action<TSource>) : IUniTaskAsyncEnumerable<TSource>
    + {static} Do(source:IUniTaskAsyncEnumerable<TSource>, onNext:Action<TSource>, onError:Action<Exception>) : IUniTaskAsyncEnumerable<TSource>
    + {static} Do(source:IUniTaskAsyncEnumerable<TSource>, onNext:Action<TSource>, onCompleted:Action) : IUniTaskAsyncEnumerable<TSource>
    + {static} Do(source:IUniTaskAsyncEnumerable<TSource>, onNext:Action<TSource>, onError:Action<Exception>, onCompleted:Action) : IUniTaskAsyncEnumerable<TSource>
    + {static} Do(source:IUniTaskAsyncEnumerable<TSource>, observer:IObserver<TSource>) : IUniTaskAsyncEnumerable<TSource>
}
class "Do`1"<TSource> <<sealed>> {
    + Do(source:IUniTaskAsyncEnumerable<TSource>, onNext:Action<TSource>, onError:Action<Exception>, onCompleted:Action)
    + GetAsyncEnumerator(cancellationToken:CancellationToken) : IUniTaskAsyncEnumerator<TSource>
}
class "IUniTaskAsyncEnumerable`1"<T> {
}
class _Do <<sealed>> {
    + _Do(source:IUniTaskAsyncEnumerable<TSource>, onNext:Action<TSource>, onError:Action<Exception>, onCompleted:Action, cancellationToken:CancellationToken)
    + MoveNextAsync() : UniTask<bool>
    + DisposeAsync() : UniTask
}
class "IUniTaskAsyncEnumerator`1"<T> {
}
"IUniTaskAsyncEnumerable`1" "<TSource>" <|- - "Do`1"
"Do`1" +- - _Do
MoveNextSource <|- - _Do
"IUniTaskAsyncEnumerator`1" "<TSource>" <|- - _Do
_Do - -> "Current" TSource
class UniTaskAsyncEnumerable <<static>> <<partial>> {
    + {static} ElementAtAsync(source:IUniTaskAsyncEnumerable<TSource>, index:int, cancellationToken:CancellationToken) : UniTask<TSource>
    + {static} ElementAtOrDefaultAsync(source:IUniTaskAsyncEnumerable<TSource>, index:int, cancellationToken:CancellationToken) : UniTask<TSource>
}
class ElementAt <<static>> {
    + {static} <<async>> ElementAtAsync(source:IUniTaskAsyncEnumerable<TSource>, index:int, cancellationToken:CancellationToken, defaultIfEmpty:bool) : UniTask<TSource>
}
class UniTaskAsyncEnumerable <<static>> <<partial>> {
    + {static} Empty() : IUniTaskAsyncEnumerable<T>
}
class "Empty`1"<T> {
    + GetAsyncEnumerator(cancellationToken:CancellationToken) : IUniTaskAsyncEnumerator<T>
}
class "IUniTaskAsyncEnumerable`1"<T> {
}
class _Empty {
    + MoveNextAsync() : UniTask<bool>
    + DisposeAsync() : UniTask
}
class "IUniTaskAsyncEnumerator`1"<T> {
}
"IUniTaskAsyncEnumerable`1" "<T>" <|- - "Empty`1"
"Empty`1" o-> "Instance<T>" "IUniTaskAsyncEnumerable`1"
"Empty`1" +- - _Empty
"IUniTaskAsyncEnumerator`1" "<T>" <|- - _Empty
_Empty o-> "Instance<T>" "IUniTaskAsyncEnumerator`1"
_Empty - -> "Current" T
class UniTaskAsyncEnumerable <<static>> <<partial>> {
    + {static} Except(first:IUniTaskAsyncEnumerable<TSource>, second:IUniTaskAsyncEnumerable<TSource>) : IUniTaskAsyncEnumerable<TSource>
    + {static} Except(first:IUniTaskAsyncEnumerable<TSource>, second:IUniTaskAsyncEnumerable<TSource>, comparer:IEqualityComparer<TSource>) : IUniTaskAsyncEnumerable<TSource>
}
class "Except`1"<TSource> <<sealed>> {
    + Except(first:IUniTaskAsyncEnumerable<TSource>, second:IUniTaskAsyncEnumerable<TSource>, comparer:IEqualityComparer<TSource>)
    + GetAsyncEnumerator(cancellationToken:CancellationToken) : IUniTaskAsyncEnumerator<TSource>
}
class "IUniTaskAsyncEnumerable`1"<T> {
}
class _Except {
    + _Except(first:IUniTaskAsyncEnumerable<TSource>, second:IUniTaskAsyncEnumerable<TSource>, comparer:IEqualityComparer<TSource>, cancellationToken:CancellationToken)
}
class "AsyncEnumeratorBase`2"<T1,T2> {
}
"IUniTaskAsyncEnumerable`1" "<TSource>" <|- - "Except`1"
"Except`1" +- - _Except
"AsyncEnumeratorBase`2" "<TSource,TSource>" <|- - _Except
class UniTaskAsyncEnumerable <<static>> <<partial>> {
    + {static} FirstAsync(source:IUniTaskAsyncEnumerable<TSource>, cancellationToken:CancellationToken) : UniTask<TSource>
    + {static} FirstAsync(source:IUniTaskAsyncEnumerable<TSource>, predicate:Func<TSource, Boolean>, cancellationToken:CancellationToken) : UniTask<TSource>
    + {static} FirstAwaitAsync(source:IUniTaskAsyncEnumerable<TSource>, predicate:Func<TSource, UniTask<Boolean>>, cancellationToken:CancellationToken) : UniTask<TSource>
    + {static} FirstAwaitWithCancellationAsync(source:IUniTaskAsyncEnumerable<TSource>, predicate:Func<TSource, CancellationToken, UniTask<Boolean>>, cancellationToken:CancellationToken) : UniTask<TSource>
    + {static} FirstOrDefaultAsync(source:IUniTaskAsyncEnumerable<TSource>, cancellationToken:CancellationToken) : UniTask<TSource>
    + {static} FirstOrDefaultAsync(source:IUniTaskAsyncEnumerable<TSource>, predicate:Func<TSource, Boolean>, cancellationToken:CancellationToken) : UniTask<TSource>
    + {static} FirstOrDefaultAwaitAsync(source:IUniTaskAsyncEnumerable<TSource>, predicate:Func<TSource, UniTask<Boolean>>, cancellationToken:CancellationToken) : UniTask<TSource>
    + {static} FirstOrDefaultAwaitWithCancellationAsync(source:IUniTaskAsyncEnumerable<TSource>, predicate:Func<TSource, CancellationToken, UniTask<Boolean>>, cancellationToken:CancellationToken) : UniTask<TSource>
}
class First <<static>> {
    + {static} <<async>> FirstAsync(source:IUniTaskAsyncEnumerable<TSource>, cancellationToken:CancellationToken, defaultIfEmpty:bool) : UniTask<TSource>
    + {static} <<async>> FirstAsync(source:IUniTaskAsyncEnumerable<TSource>, predicate:Func<TSource, Boolean>, cancellationToken:CancellationToken, defaultIfEmpty:bool) : UniTask<TSource>
    + {static} <<async>> FirstAwaitAsync(source:IUniTaskAsyncEnumerable<TSource>, predicate:Func<TSource, UniTask<Boolean>>, cancellationToken:CancellationToken, defaultIfEmpty:bool) : UniTask<TSource>
    + {static} <<async>> FirstAwaitWithCancellationAsync(source:IUniTaskAsyncEnumerable<TSource>, predicate:Func<TSource, CancellationToken, UniTask<Boolean>>, cancellationToken:CancellationToken, defaultIfEmpty:bool) : UniTask<TSource>
}
class UniTaskAsyncEnumerable <<static>> <<partial>> {
    + {static} ForEachAsync(source:IUniTaskAsyncEnumerable<TSource>, action:Action<TSource>, cancellationToken:CancellationToken) : UniTask
    + {static} ForEachAsync(source:IUniTaskAsyncEnumerable<TSource>, action:Action<TSource, Int32>, cancellationToken:CancellationToken) : UniTask
    + {static} ForEachAsync(source:IUniTaskAsyncEnumerable<T>, action:Func<T, UniTask>, cancellationToken:CancellationToken) : UniTask
    + {static} ForEachAsync(source:IUniTaskAsyncEnumerable<T>, action:Func<T, int, UniTask>, cancellationToken:CancellationToken) : UniTask
    + {static} ForEachAwaitAsync(source:IUniTaskAsyncEnumerable<TSource>, action:Func<TSource, UniTask>, cancellationToken:CancellationToken) : UniTask
    + {static} ForEachAwaitAsync(source:IUniTaskAsyncEnumerable<TSource>, action:Func<TSource, Int32, UniTask>, cancellationToken:CancellationToken) : UniTask
    + {static} ForEachAwaitWithCancellationAsync(source:IUniTaskAsyncEnumerable<TSource>, action:Func<TSource, CancellationToken, UniTask>, cancellationToken:CancellationToken) : UniTask
    + {static} ForEachAwaitWithCancellationAsync(source:IUniTaskAsyncEnumerable<TSource>, action:Func<TSource, Int32, CancellationToken, UniTask>, cancellationToken:CancellationToken) : UniTask
}
class ForEach <<static>> {
    + {static} <<async>> ForEachAsync(source:IUniTaskAsyncEnumerable<TSource>, action:Action<TSource>, cancellationToken:CancellationToken) : UniTask
    + {static} <<async>> ForEachAsync(source:IUniTaskAsyncEnumerable<TSource>, action:Action<TSource, Int32>, cancellationToken:CancellationToken) : UniTask
    + {static} <<async>> ForEachAwaitAsync(source:IUniTaskAsyncEnumerable<TSource>, action:Func<TSource, UniTask>, cancellationToken:CancellationToken) : UniTask
    + {static} <<async>> ForEachAwaitAsync(source:IUniTaskAsyncEnumerable<TSource>, action:Func<TSource, Int32, UniTask>, cancellationToken:CancellationToken) : UniTask
    + {static} <<async>> ForEachAwaitWithCancellationAsync(source:IUniTaskAsyncEnumerable<TSource>, action:Func<TSource, CancellationToken, UniTask>, cancellationToken:CancellationToken) : UniTask
    + {static} <<async>> ForEachAwaitWithCancellationAsync(source:IUniTaskAsyncEnumerable<TSource>, action:Func<TSource, Int32, CancellationToken, UniTask>, cancellationToken:CancellationToken) : UniTask
}
class UniTaskAsyncEnumerable <<static>> <<partial>> {
    + {static} GroupBy(source:IUniTaskAsyncEnumerable<TSource>, keySelector:Func<TSource, TKey>) : IUniTaskAsyncEnumerable<IGrouping<TKey, TSource>>
    + {static} GroupBy(source:IUniTaskAsyncEnumerable<TSource>, keySelector:Func<TSource, TKey>, comparer:IEqualityComparer<TKey>) : IUniTaskAsyncEnumerable<IGrouping<TKey, TSource>>
    + {static} GroupBy(source:IUniTaskAsyncEnumerable<TSource>, keySelector:Func<TSource, TKey>, elementSelector:Func<TSource, TElement>) : IUniTaskAsyncEnumerable<IGrouping<TKey, TElement>>
    + {static} GroupBy(source:IUniTaskAsyncEnumerable<TSource>, keySelector:Func<TSource, TKey>, elementSelector:Func<TSource, TElement>, comparer:IEqualityComparer<TKey>) : IUniTaskAsyncEnumerable<IGrouping<TKey, TElement>>
    + {static} GroupBy(source:IUniTaskAsyncEnumerable<TSource>, keySelector:Func<TSource, TKey>, resultSelector:Func<TKey, IEnumerable<TSource>, TResult>) : IUniTaskAsyncEnumerable<TResult>
    + {static} GroupBy(source:IUniTaskAsyncEnumerable<TSource>, keySelector:Func<TSource, TKey>, resultSelector:Func<TKey, IEnumerable<TSource>, TResult>, comparer:IEqualityComparer<TKey>) : IUniTaskAsyncEnumerable<TResult>
    + {static} GroupBy(source:IUniTaskAsyncEnumerable<TSource>, keySelector:Func<TSource, TKey>, elementSelector:Func<TSource, TElement>, resultSelector:Func<TKey, IEnumerable<TElement>, TResult>) : IUniTaskAsyncEnumerable<TResult>
    + {static} GroupBy(source:IUniTaskAsyncEnumerable<TSource>, keySelector:Func<TSource, TKey>, elementSelector:Func<TSource, TElement>, resultSelector:Func<TKey, IEnumerable<TElement>, TResult>, comparer:IEqualityComparer<TKey>) : IUniTaskAsyncEnumerable<TResult>
    + {static} GroupByAwait(source:IUniTaskAsyncEnumerable<TSource>, keySelector:Func<TSource, UniTask<TKey>>) : IUniTaskAsyncEnumerable<IGrouping<TKey, TSource>>
    + {static} GroupByAwait(source:IUniTaskAsyncEnumerable<TSource>, keySelector:Func<TSource, UniTask<TKey>>, comparer:IEqualityComparer<TKey>) : IUniTaskAsyncEnumerable<IGrouping<TKey, TSource>>
    + {static} GroupByAwait(source:IUniTaskAsyncEnumerable<TSource>, keySelector:Func<TSource, UniTask<TKey>>, elementSelector:Func<TSource, UniTask<TElement>>) : IUniTaskAsyncEnumerable<IGrouping<TKey, TElement>>
    + {static} GroupByAwait(source:IUniTaskAsyncEnumerable<TSource>, keySelector:Func<TSource, UniTask<TKey>>, elementSelector:Func<TSource, UniTask<TElement>>, comparer:IEqualityComparer<TKey>) : IUniTaskAsyncEnumerable<IGrouping<TKey, TElement>>
    + {static} GroupByAwait(source:IUniTaskAsyncEnumerable<TSource>, keySelector:Func<TSource, UniTask<TKey>>, resultSelector:Func<TKey, IEnumerable<TSource>, UniTask<TResult>>) : IUniTaskAsyncEnumerable<TResult>
    + {static} GroupByAwait(source:IUniTaskAsyncEnumerable<TSource>, keySelector:Func<TSource, UniTask<TKey>>, elementSelector:Func<TSource, UniTask<TElement>>, resultSelector:Func<TKey, IEnumerable<TElement>, UniTask<TResult>>) : IUniTaskAsyncEnumerable<TResult>
    + {static} GroupByAwait(source:IUniTaskAsyncEnumerable<TSource>, keySelector:Func<TSource, UniTask<TKey>>, resultSelector:Func<TKey, IEnumerable<TSource>, UniTask<TResult>>, comparer:IEqualityComparer<TKey>) : IUniTaskAsyncEnumerable<TResult>
    + {static} GroupByAwait(source:IUniTaskAsyncEnumerable<TSource>, keySelector:Func<TSource, UniTask<TKey>>, elementSelector:Func<TSource, UniTask<TElement>>, resultSelector:Func<TKey, IEnumerable<TElement>, UniTask<TResult>>, comparer:IEqualityComparer<TKey>) : IUniTaskAsyncEnumerable<TResult>
    + {static} GroupByAwaitWithCancellation(source:IUniTaskAsyncEnumerable<TSource>, keySelector:Func<TSource, CancellationToken, UniTask<TKey>>) : IUniTaskAsyncEnumerable<IGrouping<TKey, TSource>>
    + {static} GroupByAwaitWithCancellation(source:IUniTaskAsyncEnumerable<TSource>, keySelector:Func<TSource, CancellationToken, UniTask<TKey>>, comparer:IEqualityComparer<TKey>) : IUniTaskAsyncEnumerable<IGrouping<TKey, TSource>>
    + {static} GroupByAwaitWithCancellation(source:IUniTaskAsyncEnumerable<TSource>, keySelector:Func<TSource, CancellationToken, UniTask<TKey>>, elementSelector:Func<TSource, CancellationToken, UniTask<TElement>>) : IUniTaskAsyncEnumerable<IGrouping<TKey, TElement>>
    + {static} GroupByAwaitWithCancellation(source:IUniTaskAsyncEnumerable<TSource>, keySelector:Func<TSource, CancellationToken, UniTask<TKey>>, elementSelector:Func<TSource, CancellationToken, UniTask<TElement>>, comparer:IEqualityComparer<TKey>) : IUniTaskAsyncEnumerable<IGrouping<TKey, TElement>>
    + {static} GroupByAwaitWithCancellation(source:IUniTaskAsyncEnumerable<TSource>, keySelector:Func<TSource, CancellationToken, UniTask<TKey>>, resultSelector:Func<TKey, IEnumerable<TSource>, CancellationToken, UniTask<TResult>>) : IUniTaskAsyncEnumerable<TResult>
    + {static} GroupByAwaitWithCancellation(source:IUniTaskAsyncEnumerable<TSource>, keySelector:Func<TSource, CancellationToken, UniTask<TKey>>, elementSelector:Func<TSource, CancellationToken, UniTask<TElement>>, resultSelector:Func<TKey, IEnumerable<TElement>, CancellationToken, UniTask<TResult>>) : IUniTaskAsyncEnumerable<TResult>
    + {static} GroupByAwaitWithCancellation(source:IUniTaskAsyncEnumerable<TSource>, keySelector:Func<TSource, CancellationToken, UniTask<TKey>>, resultSelector:Func<TKey, IEnumerable<TSource>, CancellationToken, UniTask<TResult>>, comparer:IEqualityComparer<TKey>) : IUniTaskAsyncEnumerable<TResult>
    + {static} GroupByAwaitWithCancellation(source:IUniTaskAsyncEnumerable<TSource>, keySelector:Func<TSource, CancellationToken, UniTask<TKey>>, elementSelector:Func<TSource, CancellationToken, UniTask<TElement>>, resultSelector:Func<TKey, IEnumerable<TElement>, CancellationToken, UniTask<TResult>>, comparer:IEqualityComparer<TKey>) : IUniTaskAsyncEnumerable<TResult>
}
class "GroupBy`3"<TSource,TKey,TElement> <<sealed>> {
    + GroupBy(source:IUniTaskAsyncEnumerable<TSource>, keySelector:Func<TSource, TKey>, elementSelector:Func<TSource, TElement>, comparer:IEqualityComparer<TKey>)
    + GetAsyncEnumerator(cancellationToken:CancellationToken) : IUniTaskAsyncEnumerator<IGrouping<TKey, TElement>>
}
class "GroupBy`4"<TSource,TKey,TElement,TResult> <<sealed>> {
    + GroupBy(source:IUniTaskAsyncEnumerable<TSource>, keySelector:Func<TSource, TKey>, elementSelector:Func<TSource, TElement>, resultSelector:Func<TKey, IEnumerable<TElement>, TResult>, comparer:IEqualityComparer<TKey>)
    + GetAsyncEnumerator(cancellationToken:CancellationToken) : IUniTaskAsyncEnumerator<TResult>
}
class "GroupByAwait`3"<TSource,TKey,TElement> <<sealed>> {
    + GroupByAwait(source:IUniTaskAsyncEnumerable<TSource>, keySelector:Func<TSource, UniTask<TKey>>, elementSelector:Func<TSource, UniTask<TElement>>, comparer:IEqualityComparer<TKey>)
    + GetAsyncEnumerator(cancellationToken:CancellationToken) : IUniTaskAsyncEnumerator<IGrouping<TKey, TElement>>
}
class "GroupByAwait`4"<TSource,TKey,TElement,TResult> <<sealed>> {
    + GroupByAwait(source:IUniTaskAsyncEnumerable<TSource>, keySelector:Func<TSource, UniTask<TKey>>, elementSelector:Func<TSource, UniTask<TElement>>, resultSelector:Func<TKey, IEnumerable<TElement>, UniTask<TResult>>, comparer:IEqualityComparer<TKey>)
    + GetAsyncEnumerator(cancellationToken:CancellationToken) : IUniTaskAsyncEnumerator<TResult>
}
class "GroupByAwaitWithCancellation`3"<TSource,TKey,TElement> <<sealed>> {
    + GroupByAwaitWithCancellation(source:IUniTaskAsyncEnumerable<TSource>, keySelector:Func<TSource, CancellationToken, UniTask<TKey>>, elementSelector:Func<TSource, CancellationToken, UniTask<TElement>>, comparer:IEqualityComparer<TKey>)
    + GetAsyncEnumerator(cancellationToken:CancellationToken) : IUniTaskAsyncEnumerator<IGrouping<TKey, TElement>>
}
class "GroupByAwaitWithCancellation`4"<TSource,TKey,TElement,TResult> <<sealed>> {
    + GroupByAwaitWithCancellation(source:IUniTaskAsyncEnumerable<TSource>, keySelector:Func<TSource, CancellationToken, UniTask<TKey>>, elementSelector:Func<TSource, CancellationToken, UniTask<TElement>>, resultSelector:Func<TKey, IEnumerable<TElement>, CancellationToken, UniTask<TResult>>, comparer:IEqualityComparer<TKey>)
    + GetAsyncEnumerator(cancellationToken:CancellationToken) : IUniTaskAsyncEnumerator<TResult>
}
class "IUniTaskAsyncEnumerable`1"<T> {
}
class _GroupBy <<sealed>> {
    + _GroupBy(source:IUniTaskAsyncEnumerable<TSource>, keySelector:Func<TSource, TKey>, elementSelector:Func<TSource, TElement>, comparer:IEqualityComparer<TKey>, cancellationToken:CancellationToken)
    + MoveNextAsync() : UniTask<bool>
    + DisposeAsync() : UniTask
}
class _GroupBy <<sealed>> {
    + _GroupBy(source:IUniTaskAsyncEnumerable<TSource>, keySelector:Func<TSource, TKey>, elementSelector:Func<TSource, TElement>, resultSelector:Func<TKey, IEnumerable<TElement>, TResult>, comparer:IEqualityComparer<TKey>, cancellationToken:CancellationToken)
    + MoveNextAsync() : UniTask<bool>
    + DisposeAsync() : UniTask
}
class _GroupByAwait <<sealed>> {
    + _GroupByAwait(source:IUniTaskAsyncEnumerable<TSource>, keySelector:Func<TSource, UniTask<TKey>>, elementSelector:Func<TSource, UniTask<TElement>>, comparer:IEqualityComparer<TKey>, cancellationToken:CancellationToken)
    + MoveNextAsync() : UniTask<bool>
    + DisposeAsync() : UniTask
}
class _GroupByAwait <<sealed>> {
    + _GroupByAwait(source:IUniTaskAsyncEnumerable<TSource>, keySelector:Func<TSource, UniTask<TKey>>, elementSelector:Func<TSource, UniTask<TElement>>, resultSelector:Func<TKey, IEnumerable<TElement>, UniTask<TResult>>, comparer:IEqualityComparer<TKey>, cancellationToken:CancellationToken)
    + MoveNextAsync() : UniTask<bool>
    + DisposeAsync() : UniTask
}
class _GroupByAwaitWithCancellation <<sealed>> {
    + _GroupByAwaitWithCancellation(source:IUniTaskAsyncEnumerable<TSource>, keySelector:Func<TSource, CancellationToken, UniTask<TKey>>, elementSelector:Func<TSource, CancellationToken, UniTask<TElement>>, comparer:IEqualityComparer<TKey>, cancellationToken:CancellationToken)
    + MoveNextAsync() : UniTask<bool>
    + DisposeAsync() : UniTask
}
class _GroupByAwaitWithCancellation <<sealed>> {
    + _GroupByAwaitWithCancellation(source:IUniTaskAsyncEnumerable<TSource>, keySelector:Func<TSource, CancellationToken, UniTask<TKey>>, elementSelector:Func<TSource, CancellationToken, UniTask<TElement>>, resultSelector:Func<TKey, IEnumerable<TElement>, CancellationToken, UniTask<TResult>>, comparer:IEqualityComparer<TKey>, cancellationToken:CancellationToken)
    + MoveNextAsync() : UniTask<bool>
    + DisposeAsync() : UniTask
}
class "IUniTaskAsyncEnumerator`1"<T> {
}
class "IGrouping`2"<T1,T2> {
}
"IUniTaskAsyncEnumerable`1" "<IGrouping<TKey, TElement>>" <|- - "GroupBy`3"
"IUniTaskAsyncEnumerable`1" "<TResult>" <|- - "GroupBy`4"
"IUniTaskAsyncEnumerable`1" "<IGrouping<TKey, TElement>>" <|- - "GroupByAwait`3"
"IUniTaskAsyncEnumerable`1" "<TResult>" <|- - "GroupByAwait`4"
"IUniTaskAsyncEnumerable`1" "<IGrouping<TKey, TElement>>" <|- - "GroupByAwaitWithCancellation`3"
"IUniTaskAsyncEnumerable`1" "<TResult>" <|- - "GroupByAwaitWithCancellation`4"
"GroupBy`3" +- - _GroupBy
MoveNextSource <|- - _GroupBy
"IUniTaskAsyncEnumerator`1" "<IGrouping<TKey, TElement>>" <|- - _GroupBy
_GroupBy - -> "Current<TKey,TElement>" "IGrouping`2"
"GroupBy`4" +- - _GroupBy
MoveNextSource <|- - _GroupBy
"IUniTaskAsyncEnumerator`1" "<TResult>" <|- - _GroupBy
_GroupBy - -> "Current" TResult
"GroupByAwait`3" +- - _GroupByAwait
MoveNextSource <|- - _GroupByAwait
"IUniTaskAsyncEnumerator`1" "<IGrouping<TKey, TElement>>" <|- - _GroupByAwait
_GroupByAwait - -> "Current<TKey,TElement>" "IGrouping`2"
"GroupByAwait`4" +- - _GroupByAwait
MoveNextSource <|- - _GroupByAwait
"IUniTaskAsyncEnumerator`1" "<TResult>" <|- - _GroupByAwait
_GroupByAwait - -> "Current" TResult
"GroupByAwaitWithCancellation`3" +- - _GroupByAwaitWithCancellation
MoveNextSource <|- - _GroupByAwaitWithCancellation
"IUniTaskAsyncEnumerator`1" "<IGrouping<TKey, TElement>>" <|- - _GroupByAwaitWithCancellation
_GroupByAwaitWithCancellation - -> "Current<TKey,TElement>" "IGrouping`2"
"GroupByAwaitWithCancellation`4" +- - _GroupByAwaitWithCancellation
MoveNextSource <|- - _GroupByAwaitWithCancellation
"IUniTaskAsyncEnumerator`1" "<TResult>" <|- - _GroupByAwaitWithCancellation
_GroupByAwaitWithCancellation - -> "Current" TResult
class UniTaskAsyncEnumerable <<static>> <<partial>> {
    + {static} GroupJoin(outer:IUniTaskAsyncEnumerable<TOuter>, inner:IUniTaskAsyncEnumerable<TInner>, outerKeySelector:Func<TOuter, TKey>, innerKeySelector:Func<TInner, TKey>, resultSelector:Func<TOuter, IEnumerable<TInner>, TResult>) : IUniTaskAsyncEnumerable<TResult>
    + {static} GroupJoin(outer:IUniTaskAsyncEnumerable<TOuter>, inner:IUniTaskAsyncEnumerable<TInner>, outerKeySelector:Func<TOuter, TKey>, innerKeySelector:Func<TInner, TKey>, resultSelector:Func<TOuter, IEnumerable<TInner>, TResult>, comparer:IEqualityComparer<TKey>) : IUniTaskAsyncEnumerable<TResult>
    + {static} GroupJoinAwait(outer:IUniTaskAsyncEnumerable<TOuter>, inner:IUniTaskAsyncEnumerable<TInner>, outerKeySelector:Func<TOuter, UniTask<TKey>>, innerKeySelector:Func<TInner, UniTask<TKey>>, resultSelector:Func<TOuter, IEnumerable<TInner>, UniTask<TResult>>) : IUniTaskAsyncEnumerable<TResult>
    + {static} GroupJoinAwait(outer:IUniTaskAsyncEnumerable<TOuter>, inner:IUniTaskAsyncEnumerable<TInner>, outerKeySelector:Func<TOuter, UniTask<TKey>>, innerKeySelector:Func<TInner, UniTask<TKey>>, resultSelector:Func<TOuter, IEnumerable<TInner>, UniTask<TResult>>, comparer:IEqualityComparer<TKey>) : IUniTaskAsyncEnumerable<TResult>
    + {static} GroupJoinAwaitWithCancellation(outer:IUniTaskAsyncEnumerable<TOuter>, inner:IUniTaskAsyncEnumerable<TInner>, outerKeySelector:Func<TOuter, CancellationToken, UniTask<TKey>>, innerKeySelector:Func<TInner, CancellationToken, UniTask<TKey>>, resultSelector:Func<TOuter, IEnumerable<TInner>, CancellationToken, UniTask<TResult>>) : IUniTaskAsyncEnumerable<TResult>
    + {static} GroupJoinAwaitWithCancellation(outer:IUniTaskAsyncEnumerable<TOuter>, inner:IUniTaskAsyncEnumerable<TInner>, outerKeySelector:Func<TOuter, CancellationToken, UniTask<TKey>>, innerKeySelector:Func<TInner, CancellationToken, UniTask<TKey>>, resultSelector:Func<TOuter, IEnumerable<TInner>, CancellationToken, UniTask<TResult>>, comparer:IEqualityComparer<TKey>) : IUniTaskAsyncEnumerable<TResult>
}
class "GroupJoin`4"<TOuter,TInner,TKey,TResult> <<sealed>> {
    + GroupJoin(outer:IUniTaskAsyncEnumerable<TOuter>, inner:IUniTaskAsyncEnumerable<TInner>, outerKeySelector:Func<TOuter, TKey>, innerKeySelector:Func<TInner, TKey>, resultSelector:Func<TOuter, IEnumerable<TInner>, TResult>, comparer:IEqualityComparer<TKey>)
    + GetAsyncEnumerator(cancellationToken:CancellationToken) : IUniTaskAsyncEnumerator<TResult>
}
class "GroupJoinAwait`4"<TOuter,TInner,TKey,TResult> <<sealed>> {
    + GroupJoinAwait(outer:IUniTaskAsyncEnumerable<TOuter>, inner:IUniTaskAsyncEnumerable<TInner>, outerKeySelector:Func<TOuter, UniTask<TKey>>, innerKeySelector:Func<TInner, UniTask<TKey>>, resultSelector:Func<TOuter, IEnumerable<TInner>, UniTask<TResult>>, comparer:IEqualityComparer<TKey>)
    + GetAsyncEnumerator(cancellationToken:CancellationToken) : IUniTaskAsyncEnumerator<TResult>
}
class "GroupJoinAwaitWithCancellation`4"<TOuter,TInner,TKey,TResult> <<sealed>> {
    + GroupJoinAwaitWithCancellation(outer:IUniTaskAsyncEnumerable<TOuter>, inner:IUniTaskAsyncEnumerable<TInner>, outerKeySelector:Func<TOuter, CancellationToken, UniTask<TKey>>, innerKeySelector:Func<TInner, CancellationToken, UniTask<TKey>>, resultSelector:Func<TOuter, IEnumerable<TInner>, CancellationToken, UniTask<TResult>>, comparer:IEqualityComparer<TKey>)
    + GetAsyncEnumerator(cancellationToken:CancellationToken) : IUniTaskAsyncEnumerator<TResult>
}
class "IUniTaskAsyncEnumerable`1"<T> {
}
class _GroupJoin <<sealed>> {
    + _GroupJoin(outer:IUniTaskAsyncEnumerable<TOuter>, inner:IUniTaskAsyncEnumerable<TInner>, outerKeySelector:Func<TOuter, TKey>, innerKeySelector:Func<TInner, TKey>, resultSelector:Func<TOuter, IEnumerable<TInner>, TResult>, comparer:IEqualityComparer<TKey>, cancellationToken:CancellationToken)
    + MoveNextAsync() : UniTask<bool>
    + DisposeAsync() : UniTask
}
class _GroupJoinAwait <<sealed>> {
    + _GroupJoinAwait(outer:IUniTaskAsyncEnumerable<TOuter>, inner:IUniTaskAsyncEnumerable<TInner>, outerKeySelector:Func<TOuter, UniTask<TKey>>, innerKeySelector:Func<TInner, UniTask<TKey>>, resultSelector:Func<TOuter, IEnumerable<TInner>, UniTask<TResult>>, comparer:IEqualityComparer<TKey>, cancellationToken:CancellationToken)
    + MoveNextAsync() : UniTask<bool>
    + DisposeAsync() : UniTask
}
class _GroupJoinAwaitWithCancellation <<sealed>> {
    + _GroupJoinAwaitWithCancellation(outer:IUniTaskAsyncEnumerable<TOuter>, inner:IUniTaskAsyncEnumerable<TInner>, outerKeySelector:Func<TOuter, CancellationToken, UniTask<TKey>>, innerKeySelector:Func<TInner, CancellationToken, UniTask<TKey>>, resultSelector:Func<TOuter, IEnumerable<TInner>, CancellationToken, UniTask<TResult>>, comparer:IEqualityComparer<TKey>, cancellationToken:CancellationToken)
    + MoveNextAsync() : UniTask<bool>
    + DisposeAsync() : UniTask
}
class "IUniTaskAsyncEnumerator`1"<T> {
}
"IUniTaskAsyncEnumerable`1" "<TResult>" <|- - "GroupJoin`4"
"IUniTaskAsyncEnumerable`1" "<TResult>" <|- - "GroupJoinAwait`4"
"IUniTaskAsyncEnumerable`1" "<TResult>" <|- - "GroupJoinAwaitWithCancellation`4"
"GroupJoin`4" +- - _GroupJoin
MoveNextSource <|- - _GroupJoin
"IUniTaskAsyncEnumerator`1" "<TResult>" <|- - _GroupJoin
_GroupJoin - -> "Current" TResult
"GroupJoinAwait`4" +- - _GroupJoinAwait
MoveNextSource <|- - _GroupJoinAwait
"IUniTaskAsyncEnumerator`1" "<TResult>" <|- - _GroupJoinAwait
_GroupJoinAwait - -> "Current" TResult
"GroupJoinAwaitWithCancellation`4" +- - _GroupJoinAwaitWithCancellation
MoveNextSource <|- - _GroupJoinAwaitWithCancellation
"IUniTaskAsyncEnumerator`1" "<TResult>" <|- - _GroupJoinAwaitWithCancellation
_GroupJoinAwaitWithCancellation - -> "Current" TResult
class UniTaskAsyncEnumerable <<static>> <<partial>> {
    + {static} Intersect(first:IUniTaskAsyncEnumerable<TSource>, second:IUniTaskAsyncEnumerable<TSource>) : IUniTaskAsyncEnumerable<TSource>
    + {static} Intersect(first:IUniTaskAsyncEnumerable<TSource>, second:IUniTaskAsyncEnumerable<TSource>, comparer:IEqualityComparer<TSource>) : IUniTaskAsyncEnumerable<TSource>
}
class "Intersect`1"<TSource> <<sealed>> {
    + Intersect(first:IUniTaskAsyncEnumerable<TSource>, second:IUniTaskAsyncEnumerable<TSource>, comparer:IEqualityComparer<TSource>)
    + GetAsyncEnumerator(cancellationToken:CancellationToken) : IUniTaskAsyncEnumerator<TSource>
}
class "IUniTaskAsyncEnumerable`1"<T> {
}
class _Intersect {
    + _Intersect(first:IUniTaskAsyncEnumerable<TSource>, second:IUniTaskAsyncEnumerable<TSource>, comparer:IEqualityComparer<TSource>, cancellationToken:CancellationToken)
}
class "AsyncEnumeratorBase`2"<T1,T2> {
}
"IUniTaskAsyncEnumerable`1" "<TSource>" <|- - "Intersect`1"
"Intersect`1" +- - _Intersect
"AsyncEnumeratorBase`2" "<TSource,TSource>" <|- - _Intersect
class UniTaskAsyncEnumerable <<static>> <<partial>> {
    + {static} Join(outer:IUniTaskAsyncEnumerable<TOuter>, inner:IUniTaskAsyncEnumerable<TInner>, outerKeySelector:Func<TOuter, TKey>, innerKeySelector:Func<TInner, TKey>, resultSelector:Func<TOuter, TInner, TResult>) : IUniTaskAsyncEnumerable<TResult>
    + {static} Join(outer:IUniTaskAsyncEnumerable<TOuter>, inner:IUniTaskAsyncEnumerable<TInner>, outerKeySelector:Func<TOuter, TKey>, innerKeySelector:Func<TInner, TKey>, resultSelector:Func<TOuter, TInner, TResult>, comparer:IEqualityComparer<TKey>) : IUniTaskAsyncEnumerable<TResult>
    + {static} JoinAwait(outer:IUniTaskAsyncEnumerable<TOuter>, inner:IUniTaskAsyncEnumerable<TInner>, outerKeySelector:Func<TOuter, UniTask<TKey>>, innerKeySelector:Func<TInner, UniTask<TKey>>, resultSelector:Func<TOuter, TInner, UniTask<TResult>>) : IUniTaskAsyncEnumerable<TResult>
    + {static} JoinAwait(outer:IUniTaskAsyncEnumerable<TOuter>, inner:IUniTaskAsyncEnumerable<TInner>, outerKeySelector:Func<TOuter, UniTask<TKey>>, innerKeySelector:Func<TInner, UniTask<TKey>>, resultSelector:Func<TOuter, TInner, UniTask<TResult>>, comparer:IEqualityComparer<TKey>) : IUniTaskAsyncEnumerable<TResult>
    + {static} JoinAwaitWithCancellation(outer:IUniTaskAsyncEnumerable<TOuter>, inner:IUniTaskAsyncEnumerable<TInner>, outerKeySelector:Func<TOuter, CancellationToken, UniTask<TKey>>, innerKeySelector:Func<TInner, CancellationToken, UniTask<TKey>>, resultSelector:Func<TOuter, TInner, CancellationToken, UniTask<TResult>>) : IUniTaskAsyncEnumerable<TResult>
    + {static} JoinAwaitWithCancellation(outer:IUniTaskAsyncEnumerable<TOuter>, inner:IUniTaskAsyncEnumerable<TInner>, outerKeySelector:Func<TOuter, CancellationToken, UniTask<TKey>>, innerKeySelector:Func<TInner, CancellationToken, UniTask<TKey>>, resultSelector:Func<TOuter, TInner, CancellationToken, UniTask<TResult>>, comparer:IEqualityComparer<TKey>) : IUniTaskAsyncEnumerable<TResult>
}
class "Join`4"<TOuter,TInner,TKey,TResult> <<sealed>> {
    + Join(outer:IUniTaskAsyncEnumerable<TOuter>, inner:IUniTaskAsyncEnumerable<TInner>, outerKeySelector:Func<TOuter, TKey>, innerKeySelector:Func<TInner, TKey>, resultSelector:Func<TOuter, TInner, TResult>, comparer:IEqualityComparer<TKey>)
    + GetAsyncEnumerator(cancellationToken:CancellationToken) : IUniTaskAsyncEnumerator<TResult>
}
class "JoinAwait`4"<TOuter,TInner,TKey,TResult> <<sealed>> {
    + JoinAwait(outer:IUniTaskAsyncEnumerable<TOuter>, inner:IUniTaskAsyncEnumerable<TInner>, outerKeySelector:Func<TOuter, UniTask<TKey>>, innerKeySelector:Func<TInner, UniTask<TKey>>, resultSelector:Func<TOuter, TInner, UniTask<TResult>>, comparer:IEqualityComparer<TKey>)
    + GetAsyncEnumerator(cancellationToken:CancellationToken) : IUniTaskAsyncEnumerator<TResult>
}
class "JoinAwaitWithCancellation`4"<TOuter,TInner,TKey,TResult> <<sealed>> {
    + JoinAwaitWithCancellation(outer:IUniTaskAsyncEnumerable<TOuter>, inner:IUniTaskAsyncEnumerable<TInner>, outerKeySelector:Func<TOuter, CancellationToken, UniTask<TKey>>, innerKeySelector:Func<TInner, CancellationToken, UniTask<TKey>>, resultSelector:Func<TOuter, TInner, CancellationToken, UniTask<TResult>>, comparer:IEqualityComparer<TKey>)
    + GetAsyncEnumerator(cancellationToken:CancellationToken) : IUniTaskAsyncEnumerator<TResult>
}
class "IUniTaskAsyncEnumerable`1"<T> {
}
class _Join <<sealed>> {
    + _Join(outer:IUniTaskAsyncEnumerable<TOuter>, inner:IUniTaskAsyncEnumerable<TInner>, outerKeySelector:Func<TOuter, TKey>, innerKeySelector:Func<TInner, TKey>, resultSelector:Func<TOuter, TInner, TResult>, comparer:IEqualityComparer<TKey>, cancellationToken:CancellationToken)
    + MoveNextAsync() : UniTask<bool>
    + DisposeAsync() : UniTask
}
class _JoinAwait <<sealed>> {
    + _JoinAwait(outer:IUniTaskAsyncEnumerable<TOuter>, inner:IUniTaskAsyncEnumerable<TInner>, outerKeySelector:Func<TOuter, UniTask<TKey>>, innerKeySelector:Func<TInner, UniTask<TKey>>, resultSelector:Func<TOuter, TInner, UniTask<TResult>>, comparer:IEqualityComparer<TKey>, cancellationToken:CancellationToken)
    + MoveNextAsync() : UniTask<bool>
    + DisposeAsync() : UniTask
}
class _JoinAwaitWithCancellation <<sealed>> {
    + _JoinAwaitWithCancellation(outer:IUniTaskAsyncEnumerable<TOuter>, inner:IUniTaskAsyncEnumerable<TInner>, outerKeySelector:Func<TOuter, CancellationToken, UniTask<TKey>>, innerKeySelector:Func<TInner, CancellationToken, UniTask<TKey>>, resultSelector:Func<TOuter, TInner, CancellationToken, UniTask<TResult>>, comparer:IEqualityComparer<TKey>, cancellationToken:CancellationToken)
    + MoveNextAsync() : UniTask<bool>
    + DisposeAsync() : UniTask
}
class "IUniTaskAsyncEnumerator`1"<T> {
}
"IUniTaskAsyncEnumerable`1" "<TResult>" <|- - "Join`4"
"IUniTaskAsyncEnumerable`1" "<TResult>" <|- - "JoinAwait`4"
"IUniTaskAsyncEnumerable`1" "<TResult>" <|- - "JoinAwaitWithCancellation`4"
"Join`4" +- - _Join
MoveNextSource <|- - _Join
"IUniTaskAsyncEnumerator`1" "<TResult>" <|- - _Join
_Join - -> "Current" TResult
"JoinAwait`4" +- - _JoinAwait
MoveNextSource <|- - _JoinAwait
"IUniTaskAsyncEnumerator`1" "<TResult>" <|- - _JoinAwait
_JoinAwait - -> "Current" TResult
"JoinAwaitWithCancellation`4" +- - _JoinAwaitWithCancellation
MoveNextSource <|- - _JoinAwaitWithCancellation
"IUniTaskAsyncEnumerator`1" "<TResult>" <|- - _JoinAwaitWithCancellation
_JoinAwaitWithCancellation - -> "Current" TResult
class UniTaskAsyncEnumerable <<static>> <<partial>> {
    + {static} LastAsync(source:IUniTaskAsyncEnumerable<TSource>, cancellationToken:CancellationToken) : UniTask<TSource>
    + {static} LastAsync(source:IUniTaskAsyncEnumerable<TSource>, predicate:Func<TSource, Boolean>, cancellationToken:CancellationToken) : UniTask<TSource>
    + {static} LastAwaitAsync(source:IUniTaskAsyncEnumerable<TSource>, predicate:Func<TSource, UniTask<Boolean>>, cancellationToken:CancellationToken) : UniTask<TSource>
    + {static} LastAwaitWithCancellationAsync(source:IUniTaskAsyncEnumerable<TSource>, predicate:Func<TSource, CancellationToken, UniTask<Boolean>>, cancellationToken:CancellationToken) : UniTask<TSource>
    + {static} LastOrDefaultAsync(source:IUniTaskAsyncEnumerable<TSource>, cancellationToken:CancellationToken) : UniTask<TSource>
    + {static} LastOrDefaultAsync(source:IUniTaskAsyncEnumerable<TSource>, predicate:Func<TSource, Boolean>, cancellationToken:CancellationToken) : UniTask<TSource>
    + {static} LastOrDefaultAwaitAsync(source:IUniTaskAsyncEnumerable<TSource>, predicate:Func<TSource, UniTask<Boolean>>, cancellationToken:CancellationToken) : UniTask<TSource>
    + {static} LastOrDefaultAwaitWithCancellationAsync(source:IUniTaskAsyncEnumerable<TSource>, predicate:Func<TSource, CancellationToken, UniTask<Boolean>>, cancellationToken:CancellationToken) : UniTask<TSource>
}
class Last <<static>> {
    + {static} <<async>> LastAsync(source:IUniTaskAsyncEnumerable<TSource>, cancellationToken:CancellationToken, defaultIfEmpty:bool) : UniTask<TSource>
    + {static} <<async>> LastAsync(source:IUniTaskAsyncEnumerable<TSource>, predicate:Func<TSource, Boolean>, cancellationToken:CancellationToken, defaultIfEmpty:bool) : UniTask<TSource>
    + {static} <<async>> LastAwaitAsync(source:IUniTaskAsyncEnumerable<TSource>, predicate:Func<TSource, UniTask<Boolean>>, cancellationToken:CancellationToken, defaultIfEmpty:bool) : UniTask<TSource>
    + {static} <<async>> LastAwaitWithCancellationAsync(source:IUniTaskAsyncEnumerable<TSource>, predicate:Func<TSource, CancellationToken, UniTask<Boolean>>, cancellationToken:CancellationToken, defaultIfEmpty:bool) : UniTask<TSource>
}
class UniTaskAsyncEnumerable <<static>> <<partial>> {
    + {static} LongCountAsync(source:IUniTaskAsyncEnumerable<TSource>, cancellationToken:CancellationToken) : UniTask<long>
    + {static} LongCountAsync(source:IUniTaskAsyncEnumerable<TSource>, predicate:Func<TSource, Boolean>, cancellationToken:CancellationToken) : UniTask<long>
    + {static} LongCountAwaitAsync(source:IUniTaskAsyncEnumerable<TSource>, predicate:Func<TSource, UniTask<Boolean>>, cancellationToken:CancellationToken) : UniTask<long>
    + {static} LongCountAwaitWithCancellationAsync(source:IUniTaskAsyncEnumerable<TSource>, predicate:Func<TSource, CancellationToken, UniTask<Boolean>>, cancellationToken:CancellationToken) : UniTask<long>
}
class LongCount <<static>> {
}
class UniTaskAsyncEnumerable <<static>> <<partial>> {
    + {static} MaxAsync(source:IUniTaskAsyncEnumerable<TSource>, cancellationToken:CancellationToken) : UniTask<TSource>
    + {static} MaxAsync(source:IUniTaskAsyncEnumerable<TSource>, selector:Func<TSource, TResult>, cancellationToken:CancellationToken) : UniTask<TResult>
    + {static} MaxAwaitAsync(source:IUniTaskAsyncEnumerable<TSource>, selector:Func<TSource, UniTask<TResult>>, cancellationToken:CancellationToken) : UniTask<TResult>
    + {static} MaxAwaitWithCancellationAsync(source:IUniTaskAsyncEnumerable<TSource>, selector:Func<TSource, CancellationToken, UniTask<TResult>>, cancellationToken:CancellationToken) : UniTask<TResult>
}
class Max <<static>> <<partial>> {
    + {static} <<async>> MaxAsync(source:IUniTaskAsyncEnumerable<TSource>, cancellationToken:CancellationToken) : UniTask<TSource>
    + {static} <<async>> MaxAsync(source:IUniTaskAsyncEnumerable<TSource>, selector:Func<TSource, TResult>, cancellationToken:CancellationToken) : UniTask<TResult>
    + {static} <<async>> MaxAwaitAsync(source:IUniTaskAsyncEnumerable<TSource>, selector:Func<TSource, UniTask<TResult>>, cancellationToken:CancellationToken) : UniTask<TResult>
    + {static} <<async>> MaxAwaitWithCancellationAsync(source:IUniTaskAsyncEnumerable<TSource>, selector:Func<TSource, CancellationToken, UniTask<TResult>>, cancellationToken:CancellationToken) : UniTask<TResult>
}
class UniTaskAsyncEnumerable <<static>> <<partial>> {
    + {static} MinAsync(source:IUniTaskAsyncEnumerable<TSource>, cancellationToken:CancellationToken) : UniTask<TSource>
    + {static} MinAsync(source:IUniTaskAsyncEnumerable<TSource>, selector:Func<TSource, TResult>, cancellationToken:CancellationToken) : UniTask<TResult>
    + {static} MinAwaitAsync(source:IUniTaskAsyncEnumerable<TSource>, selector:Func<TSource, UniTask<TResult>>, cancellationToken:CancellationToken) : UniTask<TResult>
    + {static} MinAwaitWithCancellationAsync(source:IUniTaskAsyncEnumerable<TSource>, selector:Func<TSource, CancellationToken, UniTask<TResult>>, cancellationToken:CancellationToken) : UniTask<TResult>
}
class Min <<static>> <<partial>> {
    + {static} <<async>> MinAsync(source:IUniTaskAsyncEnumerable<TSource>, cancellationToken:CancellationToken) : UniTask<TSource>
    + {static} <<async>> MinAsync(source:IUniTaskAsyncEnumerable<TSource>, selector:Func<TSource, TResult>, cancellationToken:CancellationToken) : UniTask<TResult>
    + {static} <<async>> MinAwaitAsync(source:IUniTaskAsyncEnumerable<TSource>, selector:Func<TSource, UniTask<TResult>>, cancellationToken:CancellationToken) : UniTask<TResult>
    + {static} <<async>> MinAwaitWithCancellationAsync(source:IUniTaskAsyncEnumerable<TSource>, selector:Func<TSource, CancellationToken, UniTask<TResult>>, cancellationToken:CancellationToken) : UniTask<TResult>
}
class UniTaskAsyncEnumerable <<static>> <<partial>> {
    + {static} MinAsync(source:IUniTaskAsyncEnumerable<Int32>, cancellationToken:CancellationToken) : UniTask<Int32>
    + {static} MinAsync(source:IUniTaskAsyncEnumerable<TSource>, selector:Func<TSource, Int32>, cancellationToken:CancellationToken) : UniTask<Int32>
    + {static} MinAwaitAsync(source:IUniTaskAsyncEnumerable<TSource>, selector:Func<TSource, UniTask<Int32>>, cancellationToken:CancellationToken) : UniTask<Int32>
    + {static} MinAwaitWithCancellationAsync(source:IUniTaskAsyncEnumerable<TSource>, selector:Func<TSource, CancellationToken, UniTask<Int32>>, cancellationToken:CancellationToken) : UniTask<Int32>
    + {static} MinAsync(source:IUniTaskAsyncEnumerable<Int64>, cancellationToken:CancellationToken) : UniTask<Int64>
    + {static} MinAsync(source:IUniTaskAsyncEnumerable<TSource>, selector:Func<TSource, Int64>, cancellationToken:CancellationToken) : UniTask<Int64>
    + {static} MinAwaitAsync(source:IUniTaskAsyncEnumerable<TSource>, selector:Func<TSource, UniTask<Int64>>, cancellationToken:CancellationToken) : UniTask<Int64>
    + {static} MinAwaitWithCancellationAsync(source:IUniTaskAsyncEnumerable<TSource>, selector:Func<TSource, CancellationToken, UniTask<Int64>>, cancellationToken:CancellationToken) : UniTask<Int64>
    + {static} MinAsync(source:IUniTaskAsyncEnumerable<Single>, cancellationToken:CancellationToken) : UniTask<Single>
    + {static} MinAsync(source:IUniTaskAsyncEnumerable<TSource>, selector:Func<TSource, Single>, cancellationToken:CancellationToken) : UniTask<Single>
    + {static} MinAwaitAsync(source:IUniTaskAsyncEnumerable<TSource>, selector:Func<TSource, UniTask<Single>>, cancellationToken:CancellationToken) : UniTask<Single>
    + {static} MinAwaitWithCancellationAsync(source:IUniTaskAsyncEnumerable<TSource>, selector:Func<TSource, CancellationToken, UniTask<Single>>, cancellationToken:CancellationToken) : UniTask<Single>
    + {static} MinAsync(source:IUniTaskAsyncEnumerable<Double>, cancellationToken:CancellationToken) : UniTask<Double>
    + {static} MinAsync(source:IUniTaskAsyncEnumerable<TSource>, selector:Func<TSource, Double>, cancellationToken:CancellationToken) : UniTask<Double>
    + {static} MinAwaitAsync(source:IUniTaskAsyncEnumerable<TSource>, selector:Func<TSource, UniTask<Double>>, cancellationToken:CancellationToken) : UniTask<Double>
    + {static} MinAwaitWithCancellationAsync(source:IUniTaskAsyncEnumerable<TSource>, selector:Func<TSource, CancellationToken, UniTask<Double>>, cancellationToken:CancellationToken) : UniTask<Double>
    + {static} MinAsync(source:IUniTaskAsyncEnumerable<Decimal>, cancellationToken:CancellationToken) : UniTask<Decimal>
    + {static} MinAsync(source:IUniTaskAsyncEnumerable<TSource>, selector:Func<TSource, Decimal>, cancellationToken:CancellationToken) : UniTask<Decimal>
    + {static} MinAwaitAsync(source:IUniTaskAsyncEnumerable<TSource>, selector:Func<TSource, UniTask<Decimal>>, cancellationToken:CancellationToken) : UniTask<Decimal>
    + {static} MinAwaitWithCancellationAsync(source:IUniTaskAsyncEnumerable<TSource>, selector:Func<TSource, CancellationToken, UniTask<Decimal>>, cancellationToken:CancellationToken) : UniTask<Decimal>
    + {static} MinAsync(source:IUniTaskAsyncEnumerable<Int32?>, cancellationToken:CancellationToken) : UniTask<Int32?>
    + {static} MinAsync(source:IUniTaskAsyncEnumerable<TSource>, selector:Func<TSource, Int32?>, cancellationToken:CancellationToken) : UniTask<Int32?>
    + {static} MinAwaitAsync(source:IUniTaskAsyncEnumerable<TSource>, selector:Func<TSource, UniTask<Int32?>>, cancellationToken:CancellationToken) : UniTask<Int32?>
    + {static} MinAwaitWithCancellationAsync(source:IUniTaskAsyncEnumerable<TSource>, selector:Func<TSource, CancellationToken, UniTask<Int32?>>, cancellationToken:CancellationToken) : UniTask<Int32?>
    + {static} MinAsync(source:IUniTaskAsyncEnumerable<Int64?>, cancellationToken:CancellationToken) : UniTask<Int64?>
    + {static} MinAsync(source:IUniTaskAsyncEnumerable<TSource>, selector:Func<TSource, Int64?>, cancellationToken:CancellationToken) : UniTask<Int64?>
    + {static} MinAwaitAsync(source:IUniTaskAsyncEnumerable<TSource>, selector:Func<TSource, UniTask<Int64?>>, cancellationToken:CancellationToken) : UniTask<Int64?>
    + {static} MinAwaitWithCancellationAsync(source:IUniTaskAsyncEnumerable<TSource>, selector:Func<TSource, CancellationToken, UniTask<Int64?>>, cancellationToken:CancellationToken) : UniTask<Int64?>
    + {static} MinAsync(source:IUniTaskAsyncEnumerable<Single?>, cancellationToken:CancellationToken) : UniTask<Single?>
    + {static} MinAsync(source:IUniTaskAsyncEnumerable<TSource>, selector:Func<TSource, Single?>, cancellationToken:CancellationToken) : UniTask<Single?>
    + {static} MinAwaitAsync(source:IUniTaskAsyncEnumerable<TSource>, selector:Func<TSource, UniTask<Single?>>, cancellationToken:CancellationToken) : UniTask<Single?>
    + {static} MinAwaitWithCancellationAsync(source:IUniTaskAsyncEnumerable<TSource>, selector:Func<TSource, CancellationToken, UniTask<Single?>>, cancellationToken:CancellationToken) : UniTask<Single?>
    + {static} MinAsync(source:IUniTaskAsyncEnumerable<Double?>, cancellationToken:CancellationToken) : UniTask<Double?>
    + {static} MinAsync(source:IUniTaskAsyncEnumerable<TSource>, selector:Func<TSource, Double?>, cancellationToken:CancellationToken) : UniTask<Double?>
    + {static} MinAwaitAsync(source:IUniTaskAsyncEnumerable<TSource>, selector:Func<TSource, UniTask<Double?>>, cancellationToken:CancellationToken) : UniTask<Double?>
    + {static} MinAwaitWithCancellationAsync(source:IUniTaskAsyncEnumerable<TSource>, selector:Func<TSource, CancellationToken, UniTask<Double?>>, cancellationToken:CancellationToken) : UniTask<Double?>
    + {static} MinAsync(source:IUniTaskAsyncEnumerable<Decimal?>, cancellationToken:CancellationToken) : UniTask<Decimal?>
    + {static} MinAsync(source:IUniTaskAsyncEnumerable<TSource>, selector:Func<TSource, Decimal?>, cancellationToken:CancellationToken) : UniTask<Decimal?>
    + {static} MinAwaitAsync(source:IUniTaskAsyncEnumerable<TSource>, selector:Func<TSource, UniTask<Decimal?>>, cancellationToken:CancellationToken) : UniTask<Decimal?>
    + {static} MinAwaitWithCancellationAsync(source:IUniTaskAsyncEnumerable<TSource>, selector:Func<TSource, CancellationToken, UniTask<Decimal?>>, cancellationToken:CancellationToken) : UniTask<Decimal?>
}
class Min <<static>> <<partial>> {
    + {static} <<async>> MinAsync(source:IUniTaskAsyncEnumerable<Int32>, cancellationToken:CancellationToken) : UniTask<Int32>
    + {static} <<async>> MinAsync(source:IUniTaskAsyncEnumerable<TSource>, selector:Func<TSource, Int32>, cancellationToken:CancellationToken) : UniTask<Int32>
    + {static} <<async>> MinAwaitAsync(source:IUniTaskAsyncEnumerable<TSource>, selector:Func<TSource, UniTask<Int32>>, cancellationToken:CancellationToken) : UniTask<Int32>
    + {static} <<async>> MinAwaitWithCancellationAsync(source:IUniTaskAsyncEnumerable<TSource>, selector:Func<TSource, CancellationToken, UniTask<Int32>>, cancellationToken:CancellationToken) : UniTask<Int32>
    + {static} <<async>> MinAsync(source:IUniTaskAsyncEnumerable<Int64>, cancellationToken:CancellationToken) : UniTask<Int64>
    + {static} <<async>> MinAsync(source:IUniTaskAsyncEnumerable<TSource>, selector:Func<TSource, Int64>, cancellationToken:CancellationToken) : UniTask<Int64>
    + {static} <<async>> MinAwaitAsync(source:IUniTaskAsyncEnumerable<TSource>, selector:Func<TSource, UniTask<Int64>>, cancellationToken:CancellationToken) : UniTask<Int64>
    + {static} <<async>> MinAwaitWithCancellationAsync(source:IUniTaskAsyncEnumerable<TSource>, selector:Func<TSource, CancellationToken, UniTask<Int64>>, cancellationToken:CancellationToken) : UniTask<Int64>
    + {static} <<async>> MinAsync(source:IUniTaskAsyncEnumerable<Single>, cancellationToken:CancellationToken) : UniTask<Single>
    + {static} <<async>> MinAsync(source:IUniTaskAsyncEnumerable<TSource>, selector:Func<TSource, Single>, cancellationToken:CancellationToken) : UniTask<Single>
    + {static} <<async>> MinAwaitAsync(source:IUniTaskAsyncEnumerable<TSource>, selector:Func<TSource, UniTask<Single>>, cancellationToken:CancellationToken) : UniTask<Single>
    + {static} <<async>> MinAwaitWithCancellationAsync(source:IUniTaskAsyncEnumerable<TSource>, selector:Func<TSource, CancellationToken, UniTask<Single>>, cancellationToken:CancellationToken) : UniTask<Single>
    + {static} <<async>> MinAsync(source:IUniTaskAsyncEnumerable<Double>, cancellationToken:CancellationToken) : UniTask<Double>
    + {static} <<async>> MinAsync(source:IUniTaskAsyncEnumerable<TSource>, selector:Func<TSource, Double>, cancellationToken:CancellationToken) : UniTask<Double>
    + {static} <<async>> MinAwaitAsync(source:IUniTaskAsyncEnumerable<TSource>, selector:Func<TSource, UniTask<Double>>, cancellationToken:CancellationToken) : UniTask<Double>
    + {static} <<async>> MinAwaitWithCancellationAsync(source:IUniTaskAsyncEnumerable<TSource>, selector:Func<TSource, CancellationToken, UniTask<Double>>, cancellationToken:CancellationToken) : UniTask<Double>
    + {static} <<async>> MinAsync(source:IUniTaskAsyncEnumerable<Decimal>, cancellationToken:CancellationToken) : UniTask<Decimal>
    + {static} <<async>> MinAsync(source:IUniTaskAsyncEnumerable<TSource>, selector:Func<TSource, Decimal>, cancellationToken:CancellationToken) : UniTask<Decimal>
    + {static} <<async>> MinAwaitAsync(source:IUniTaskAsyncEnumerable<TSource>, selector:Func<TSource, UniTask<Decimal>>, cancellationToken:CancellationToken) : UniTask<Decimal>
    + {static} <<async>> MinAwaitWithCancellationAsync(source:IUniTaskAsyncEnumerable<TSource>, selector:Func<TSource, CancellationToken, UniTask<Decimal>>, cancellationToken:CancellationToken) : UniTask<Decimal>
    + {static} <<async>> MinAsync(source:IUniTaskAsyncEnumerable<Int32?>, cancellationToken:CancellationToken) : UniTask<Int32?>
    + {static} <<async>> MinAsync(source:IUniTaskAsyncEnumerable<TSource>, selector:Func<TSource, Int32?>, cancellationToken:CancellationToken) : UniTask<Int32?>
    + {static} <<async>> MinAwaitAsync(source:IUniTaskAsyncEnumerable<TSource>, selector:Func<TSource, UniTask<Int32?>>, cancellationToken:CancellationToken) : UniTask<Int32?>
    + {static} <<async>> MinAwaitWithCancellationAsync(source:IUniTaskAsyncEnumerable<TSource>, selector:Func<TSource, CancellationToken, UniTask<Int32?>>, cancellationToken:CancellationToken) : UniTask<Int32?>
    + {static} <<async>> MinAsync(source:IUniTaskAsyncEnumerable<Int64?>, cancellationToken:CancellationToken) : UniTask<Int64?>
    + {static} <<async>> MinAsync(source:IUniTaskAsyncEnumerable<TSource>, selector:Func<TSource, Int64?>, cancellationToken:CancellationToken) : UniTask<Int64?>
    + {static} <<async>> MinAwaitAsync(source:IUniTaskAsyncEnumerable<TSource>, selector:Func<TSource, UniTask<Int64?>>, cancellationToken:CancellationToken) : UniTask<Int64?>
    + {static} <<async>> MinAwaitWithCancellationAsync(source:IUniTaskAsyncEnumerable<TSource>, selector:Func<TSource, CancellationToken, UniTask<Int64?>>, cancellationToken:CancellationToken) : UniTask<Int64?>
    + {static} <<async>> MinAsync(source:IUniTaskAsyncEnumerable<Single?>, cancellationToken:CancellationToken) : UniTask<Single?>
    + {static} <<async>> MinAsync(source:IUniTaskAsyncEnumerable<TSource>, selector:Func<TSource, Single?>, cancellationToken:CancellationToken) : UniTask<Single?>
    + {static} <<async>> MinAwaitAsync(source:IUniTaskAsyncEnumerable<TSource>, selector:Func<TSource, UniTask<Single?>>, cancellationToken:CancellationToken) : UniTask<Single?>
    + {static} <<async>> MinAwaitWithCancellationAsync(source:IUniTaskAsyncEnumerable<TSource>, selector:Func<TSource, CancellationToken, UniTask<Single?>>, cancellationToken:CancellationToken) : UniTask<Single?>
    + {static} <<async>> MinAsync(source:IUniTaskAsyncEnumerable<Double?>, cancellationToken:CancellationToken) : UniTask<Double?>
    + {static} <<async>> MinAsync(source:IUniTaskAsyncEnumerable<TSource>, selector:Func<TSource, Double?>, cancellationToken:CancellationToken) : UniTask<Double?>
    + {static} <<async>> MinAwaitAsync(source:IUniTaskAsyncEnumerable<TSource>, selector:Func<TSource, UniTask<Double?>>, cancellationToken:CancellationToken) : UniTask<Double?>
    + {static} <<async>> MinAwaitWithCancellationAsync(source:IUniTaskAsyncEnumerable<TSource>, selector:Func<TSource, CancellationToken, UniTask<Double?>>, cancellationToken:CancellationToken) : UniTask<Double?>
    + {static} <<async>> MinAsync(source:IUniTaskAsyncEnumerable<Decimal?>, cancellationToken:CancellationToken) : UniTask<Decimal?>
    + {static} <<async>> MinAsync(source:IUniTaskAsyncEnumerable<TSource>, selector:Func<TSource, Decimal?>, cancellationToken:CancellationToken) : UniTask<Decimal?>
    + {static} <<async>> MinAwaitAsync(source:IUniTaskAsyncEnumerable<TSource>, selector:Func<TSource, UniTask<Decimal?>>, cancellationToken:CancellationToken) : UniTask<Decimal?>
    + {static} <<async>> MinAwaitWithCancellationAsync(source:IUniTaskAsyncEnumerable<TSource>, selector:Func<TSource, CancellationToken, UniTask<Decimal?>>, cancellationToken:CancellationToken) : UniTask<Decimal?>
}
class UniTaskAsyncEnumerable <<static>> <<partial>> {
    + {static} MaxAsync(source:IUniTaskAsyncEnumerable<Int32>, cancellationToken:CancellationToken) : UniTask<Int32>
    + {static} MaxAsync(source:IUniTaskAsyncEnumerable<TSource>, selector:Func<TSource, Int32>, cancellationToken:CancellationToken) : UniTask<Int32>
    + {static} MaxAwaitAsync(source:IUniTaskAsyncEnumerable<TSource>, selector:Func<TSource, UniTask<Int32>>, cancellationToken:CancellationToken) : UniTask<Int32>
    + {static} MaxAwaitWithCancellationAsync(source:IUniTaskAsyncEnumerable<TSource>, selector:Func<TSource, CancellationToken, UniTask<Int32>>, cancellationToken:CancellationToken) : UniTask<Int32>
    + {static} MaxAsync(source:IUniTaskAsyncEnumerable<Int64>, cancellationToken:CancellationToken) : UniTask<Int64>
    + {static} MaxAsync(source:IUniTaskAsyncEnumerable<TSource>, selector:Func<TSource, Int64>, cancellationToken:CancellationToken) : UniTask<Int64>
    + {static} MaxAwaitAsync(source:IUniTaskAsyncEnumerable<TSource>, selector:Func<TSource, UniTask<Int64>>, cancellationToken:CancellationToken) : UniTask<Int64>
    + {static} MaxAwaitWithCancellationAsync(source:IUniTaskAsyncEnumerable<TSource>, selector:Func<TSource, CancellationToken, UniTask<Int64>>, cancellationToken:CancellationToken) : UniTask<Int64>
    + {static} MaxAsync(source:IUniTaskAsyncEnumerable<Single>, cancellationToken:CancellationToken) : UniTask<Single>
    + {static} MaxAsync(source:IUniTaskAsyncEnumerable<TSource>, selector:Func<TSource, Single>, cancellationToken:CancellationToken) : UniTask<Single>
    + {static} MaxAwaitAsync(source:IUniTaskAsyncEnumerable<TSource>, selector:Func<TSource, UniTask<Single>>, cancellationToken:CancellationToken) : UniTask<Single>
    + {static} MaxAwaitWithCancellationAsync(source:IUniTaskAsyncEnumerable<TSource>, selector:Func<TSource, CancellationToken, UniTask<Single>>, cancellationToken:CancellationToken) : UniTask<Single>
    + {static} MaxAsync(source:IUniTaskAsyncEnumerable<Double>, cancellationToken:CancellationToken) : UniTask<Double>
    + {static} MaxAsync(source:IUniTaskAsyncEnumerable<TSource>, selector:Func<TSource, Double>, cancellationToken:CancellationToken) : UniTask<Double>
    + {static} MaxAwaitAsync(source:IUniTaskAsyncEnumerable<TSource>, selector:Func<TSource, UniTask<Double>>, cancellationToken:CancellationToken) : UniTask<Double>
    + {static} MaxAwaitWithCancellationAsync(source:IUniTaskAsyncEnumerable<TSource>, selector:Func<TSource, CancellationToken, UniTask<Double>>, cancellationToken:CancellationToken) : UniTask<Double>
    + {static} MaxAsync(source:IUniTaskAsyncEnumerable<Decimal>, cancellationToken:CancellationToken) : UniTask<Decimal>
    + {static} MaxAsync(source:IUniTaskAsyncEnumerable<TSource>, selector:Func<TSource, Decimal>, cancellationToken:CancellationToken) : UniTask<Decimal>
    + {static} MaxAwaitAsync(source:IUniTaskAsyncEnumerable<TSource>, selector:Func<TSource, UniTask<Decimal>>, cancellationToken:CancellationToken) : UniTask<Decimal>
    + {static} MaxAwaitWithCancellationAsync(source:IUniTaskAsyncEnumerable<TSource>, selector:Func<TSource, CancellationToken, UniTask<Decimal>>, cancellationToken:CancellationToken) : UniTask<Decimal>
    + {static} MaxAsync(source:IUniTaskAsyncEnumerable<Int32?>, cancellationToken:CancellationToken) : UniTask<Int32?>
    + {static} MaxAsync(source:IUniTaskAsyncEnumerable<TSource>, selector:Func<TSource, Int32?>, cancellationToken:CancellationToken) : UniTask<Int32?>
    + {static} MaxAwaitAsync(source:IUniTaskAsyncEnumerable<TSource>, selector:Func<TSource, UniTask<Int32?>>, cancellationToken:CancellationToken) : UniTask<Int32?>
    + {static} MaxAwaitWithCancellationAsync(source:IUniTaskAsyncEnumerable<TSource>, selector:Func<TSource, CancellationToken, UniTask<Int32?>>, cancellationToken:CancellationToken) : UniTask<Int32?>
    + {static} MaxAsync(source:IUniTaskAsyncEnumerable<Int64?>, cancellationToken:CancellationToken) : UniTask<Int64?>
    + {static} MaxAsync(source:IUniTaskAsyncEnumerable<TSource>, selector:Func<TSource, Int64?>, cancellationToken:CancellationToken) : UniTask<Int64?>
    + {static} MaxAwaitAsync(source:IUniTaskAsyncEnumerable<TSource>, selector:Func<TSource, UniTask<Int64?>>, cancellationToken:CancellationToken) : UniTask<Int64?>
    + {static} MaxAwaitWithCancellationAsync(source:IUniTaskAsyncEnumerable<TSource>, selector:Func<TSource, CancellationToken, UniTask<Int64?>>, cancellationToken:CancellationToken) : UniTask<Int64?>
    + {static} MaxAsync(source:IUniTaskAsyncEnumerable<Single?>, cancellationToken:CancellationToken) : UniTask<Single?>
    + {static} MaxAsync(source:IUniTaskAsyncEnumerable<TSource>, selector:Func<TSource, Single?>, cancellationToken:CancellationToken) : UniTask<Single?>
    + {static} MaxAwaitAsync(source:IUniTaskAsyncEnumerable<TSource>, selector:Func<TSource, UniTask<Single?>>, cancellationToken:CancellationToken) : UniTask<Single?>
    + {static} MaxAwaitWithCancellationAsync(source:IUniTaskAsyncEnumerable<TSource>, selector:Func<TSource, CancellationToken, UniTask<Single?>>, cancellationToken:CancellationToken) : UniTask<Single?>
    + {static} MaxAsync(source:IUniTaskAsyncEnumerable<Double?>, cancellationToken:CancellationToken) : UniTask<Double?>
    + {static} MaxAsync(source:IUniTaskAsyncEnumerable<TSource>, selector:Func<TSource, Double?>, cancellationToken:CancellationToken) : UniTask<Double?>
    + {static} MaxAwaitAsync(source:IUniTaskAsyncEnumerable<TSource>, selector:Func<TSource, UniTask<Double?>>, cancellationToken:CancellationToken) : UniTask<Double?>
    + {static} MaxAwaitWithCancellationAsync(source:IUniTaskAsyncEnumerable<TSource>, selector:Func<TSource, CancellationToken, UniTask<Double?>>, cancellationToken:CancellationToken) : UniTask<Double?>
    + {static} MaxAsync(source:IUniTaskAsyncEnumerable<Decimal?>, cancellationToken:CancellationToken) : UniTask<Decimal?>
    + {static} MaxAsync(source:IUniTaskAsyncEnumerable<TSource>, selector:Func<TSource, Decimal?>, cancellationToken:CancellationToken) : UniTask<Decimal?>
    + {static} MaxAwaitAsync(source:IUniTaskAsyncEnumerable<TSource>, selector:Func<TSource, UniTask<Decimal?>>, cancellationToken:CancellationToken) : UniTask<Decimal?>
    + {static} MaxAwaitWithCancellationAsync(source:IUniTaskAsyncEnumerable<TSource>, selector:Func<TSource, CancellationToken, UniTask<Decimal?>>, cancellationToken:CancellationToken) : UniTask<Decimal?>
}
class Max <<static>> <<partial>> {
    + {static} <<async>> MaxAsync(source:IUniTaskAsyncEnumerable<Int32>, cancellationToken:CancellationToken) : UniTask<Int32>
    + {static} <<async>> MaxAsync(source:IUniTaskAsyncEnumerable<TSource>, selector:Func<TSource, Int32>, cancellationToken:CancellationToken) : UniTask<Int32>
    + {static} <<async>> MaxAwaitAsync(source:IUniTaskAsyncEnumerable<TSource>, selector:Func<TSource, UniTask<Int32>>, cancellationToken:CancellationToken) : UniTask<Int32>
    + {static} <<async>> MaxAwaitWithCancellationAsync(source:IUniTaskAsyncEnumerable<TSource>, selector:Func<TSource, CancellationToken, UniTask<Int32>>, cancellationToken:CancellationToken) : UniTask<Int32>
    + {static} <<async>> MaxAsync(source:IUniTaskAsyncEnumerable<Int64>, cancellationToken:CancellationToken) : UniTask<Int64>
    + {static} <<async>> MaxAsync(source:IUniTaskAsyncEnumerable<TSource>, selector:Func<TSource, Int64>, cancellationToken:CancellationToken) : UniTask<Int64>
    + {static} <<async>> MaxAwaitAsync(source:IUniTaskAsyncEnumerable<TSource>, selector:Func<TSource, UniTask<Int64>>, cancellationToken:CancellationToken) : UniTask<Int64>
    + {static} <<async>> MaxAwaitWithCancellationAsync(source:IUniTaskAsyncEnumerable<TSource>, selector:Func<TSource, CancellationToken, UniTask<Int64>>, cancellationToken:CancellationToken) : UniTask<Int64>
    + {static} <<async>> MaxAsync(source:IUniTaskAsyncEnumerable<Single>, cancellationToken:CancellationToken) : UniTask<Single>
    + {static} <<async>> MaxAsync(source:IUniTaskAsyncEnumerable<TSource>, selector:Func<TSource, Single>, cancellationToken:CancellationToken) : UniTask<Single>
    + {static} <<async>> MaxAwaitAsync(source:IUniTaskAsyncEnumerable<TSource>, selector:Func<TSource, UniTask<Single>>, cancellationToken:CancellationToken) : UniTask<Single>
    + {static} <<async>> MaxAwaitWithCancellationAsync(source:IUniTaskAsyncEnumerable<TSource>, selector:Func<TSource, CancellationToken, UniTask<Single>>, cancellationToken:CancellationToken) : UniTask<Single>
    + {static} <<async>> MaxAsync(source:IUniTaskAsyncEnumerable<Double>, cancellationToken:CancellationToken) : UniTask<Double>
    + {static} <<async>> MaxAsync(source:IUniTaskAsyncEnumerable<TSource>, selector:Func<TSource, Double>, cancellationToken:CancellationToken) : UniTask<Double>
    + {static} <<async>> MaxAwaitAsync(source:IUniTaskAsyncEnumerable<TSource>, selector:Func<TSource, UniTask<Double>>, cancellationToken:CancellationToken) : UniTask<Double>
    + {static} <<async>> MaxAwaitWithCancellationAsync(source:IUniTaskAsyncEnumerable<TSource>, selector:Func<TSource, CancellationToken, UniTask<Double>>, cancellationToken:CancellationToken) : UniTask<Double>
    + {static} <<async>> MaxAsync(source:IUniTaskAsyncEnumerable<Decimal>, cancellationToken:CancellationToken) : UniTask<Decimal>
    + {static} <<async>> MaxAsync(source:IUniTaskAsyncEnumerable<TSource>, selector:Func<TSource, Decimal>, cancellationToken:CancellationToken) : UniTask<Decimal>
    + {static} <<async>> MaxAwaitAsync(source:IUniTaskAsyncEnumerable<TSource>, selector:Func<TSource, UniTask<Decimal>>, cancellationToken:CancellationToken) : UniTask<Decimal>
    + {static} <<async>> MaxAwaitWithCancellationAsync(source:IUniTaskAsyncEnumerable<TSource>, selector:Func<TSource, CancellationToken, UniTask<Decimal>>, cancellationToken:CancellationToken) : UniTask<Decimal>
    + {static} <<async>> MaxAsync(source:IUniTaskAsyncEnumerable<Int32?>, cancellationToken:CancellationToken) : UniTask<Int32?>
    + {static} <<async>> MaxAsync(source:IUniTaskAsyncEnumerable<TSource>, selector:Func<TSource, Int32?>, cancellationToken:CancellationToken) : UniTask<Int32?>
    + {static} <<async>> MaxAwaitAsync(source:IUniTaskAsyncEnumerable<TSource>, selector:Func<TSource, UniTask<Int32?>>, cancellationToken:CancellationToken) : UniTask<Int32?>
    + {static} <<async>> MaxAwaitWithCancellationAsync(source:IUniTaskAsyncEnumerable<TSource>, selector:Func<TSource, CancellationToken, UniTask<Int32?>>, cancellationToken:CancellationToken) : UniTask<Int32?>
    + {static} <<async>> MaxAsync(source:IUniTaskAsyncEnumerable<Int64?>, cancellationToken:CancellationToken) : UniTask<Int64?>
    + {static} <<async>> MaxAsync(source:IUniTaskAsyncEnumerable<TSource>, selector:Func<TSource, Int64?>, cancellationToken:CancellationToken) : UniTask<Int64?>
    + {static} <<async>> MaxAwaitAsync(source:IUniTaskAsyncEnumerable<TSource>, selector:Func<TSource, UniTask<Int64?>>, cancellationToken:CancellationToken) : UniTask<Int64?>
    + {static} <<async>> MaxAwaitWithCancellationAsync(source:IUniTaskAsyncEnumerable<TSource>, selector:Func<TSource, CancellationToken, UniTask<Int64?>>, cancellationToken:CancellationToken) : UniTask<Int64?>
    + {static} <<async>> MaxAsync(source:IUniTaskAsyncEnumerable<Single?>, cancellationToken:CancellationToken) : UniTask<Single?>
    + {static} <<async>> MaxAsync(source:IUniTaskAsyncEnumerable<TSource>, selector:Func<TSource, Single?>, cancellationToken:CancellationToken) : UniTask<Single?>
    + {static} <<async>> MaxAwaitAsync(source:IUniTaskAsyncEnumerable<TSource>, selector:Func<TSource, UniTask<Single?>>, cancellationToken:CancellationToken) : UniTask<Single?>
    + {static} <<async>> MaxAwaitWithCancellationAsync(source:IUniTaskAsyncEnumerable<TSource>, selector:Func<TSource, CancellationToken, UniTask<Single?>>, cancellationToken:CancellationToken) : UniTask<Single?>
    + {static} <<async>> MaxAsync(source:IUniTaskAsyncEnumerable<Double?>, cancellationToken:CancellationToken) : UniTask<Double?>
    + {static} <<async>> MaxAsync(source:IUniTaskAsyncEnumerable<TSource>, selector:Func<TSource, Double?>, cancellationToken:CancellationToken) : UniTask<Double?>
    + {static} <<async>> MaxAwaitAsync(source:IUniTaskAsyncEnumerable<TSource>, selector:Func<TSource, UniTask<Double?>>, cancellationToken:CancellationToken) : UniTask<Double?>
    + {static} <<async>> MaxAwaitWithCancellationAsync(source:IUniTaskAsyncEnumerable<TSource>, selector:Func<TSource, CancellationToken, UniTask<Double?>>, cancellationToken:CancellationToken) : UniTask<Double?>
    + {static} <<async>> MaxAsync(source:IUniTaskAsyncEnumerable<Decimal?>, cancellationToken:CancellationToken) : UniTask<Decimal?>
    + {static} <<async>> MaxAsync(source:IUniTaskAsyncEnumerable<TSource>, selector:Func<TSource, Decimal?>, cancellationToken:CancellationToken) : UniTask<Decimal?>
    + {static} <<async>> MaxAwaitAsync(source:IUniTaskAsyncEnumerable<TSource>, selector:Func<TSource, UniTask<Decimal?>>, cancellationToken:CancellationToken) : UniTask<Decimal?>
    + {static} <<async>> MaxAwaitWithCancellationAsync(source:IUniTaskAsyncEnumerable<TSource>, selector:Func<TSource, CancellationToken, UniTask<Decimal?>>, cancellationToken:CancellationToken) : UniTask<Decimal?>
}
class UniTaskAsyncEnumerable <<static>> <<partial>> {
    + {static} Never() : IUniTaskAsyncEnumerable<T>
}
class "Never`1"<T> {
    + GetAsyncEnumerator(cancellationToken:CancellationToken) : IUniTaskAsyncEnumerator<T>
}
class "IUniTaskAsyncEnumerable`1"<T> {
}
class _Never {
    + _Never(cancellationToken:CancellationToken)
    + MoveNextAsync() : UniTask<bool>
    + DisposeAsync() : UniTask
}
class "IUniTaskAsyncEnumerator`1"<T> {
}
"IUniTaskAsyncEnumerable`1" "<T>" <|- - "Never`1"
"Never`1" o-> "Instance<T>" "IUniTaskAsyncEnumerable`1"
"Never`1" +- - _Never
"IUniTaskAsyncEnumerator`1" "<T>" <|- - _Never
_Never - -> "Current" T
class UniTaskAsyncEnumerable <<static>> <<partial>> {
    + {static} OfType(source:IUniTaskAsyncEnumerable<Object>) : IUniTaskAsyncEnumerable<TResult>
}
class "OfType`1"<TResult> <<sealed>> {
    + OfType(source:IUniTaskAsyncEnumerable<object>)
    + GetAsyncEnumerator(cancellationToken:CancellationToken) : IUniTaskAsyncEnumerator<TResult>
}
class "IUniTaskAsyncEnumerable`1"<T> {
}
class _OfType {
    + _OfType(source:IUniTaskAsyncEnumerable<object>, cancellationToken:CancellationToken)
}
class "AsyncEnumeratorBase`2"<T1,T2> {
}
"IUniTaskAsyncEnumerable`1" "<TResult>" <|- - "OfType`1"
"OfType`1" +- - _OfType
"AsyncEnumeratorBase`2" "<object,TResult>" <|- - _OfType
class UniTaskAsyncEnumerable <<static>> <<partial>> {
    + {static} OrderBy(source:IUniTaskAsyncEnumerable<TSource>, keySelector:Func<TSource, TKey>) : IUniTaskOrderedAsyncEnumerable<TSource>
    + {static} OrderBy(source:IUniTaskAsyncEnumerable<TSource>, keySelector:Func<TSource, TKey>, comparer:IComparer<TKey>) : IUniTaskOrderedAsyncEnumerable<TSource>
    + {static} OrderByAwait(source:IUniTaskAsyncEnumerable<TSource>, keySelector:Func<TSource, UniTask<TKey>>) : IUniTaskOrderedAsyncEnumerable<TSource>
    + {static} OrderByAwait(source:IUniTaskAsyncEnumerable<TSource>, keySelector:Func<TSource, UniTask<TKey>>, comparer:IComparer<TKey>) : IUniTaskOrderedAsyncEnumerable<TSource>
    + {static} OrderByAwaitWithCancellation(source:IUniTaskAsyncEnumerable<TSource>, keySelector:Func<TSource, CancellationToken, UniTask<TKey>>) : IUniTaskOrderedAsyncEnumerable<TSource>
    + {static} OrderByAwaitWithCancellation(source:IUniTaskAsyncEnumerable<TSource>, keySelector:Func<TSource, CancellationToken, UniTask<TKey>>, comparer:IComparer<TKey>) : IUniTaskOrderedAsyncEnumerable<TSource>
    + {static} OrderByDescending(source:IUniTaskAsyncEnumerable<TSource>, keySelector:Func<TSource, TKey>) : IUniTaskOrderedAsyncEnumerable<TSource>
    + {static} OrderByDescending(source:IUniTaskAsyncEnumerable<TSource>, keySelector:Func<TSource, TKey>, comparer:IComparer<TKey>) : IUniTaskOrderedAsyncEnumerable<TSource>
    + {static} OrderByDescendingAwait(source:IUniTaskAsyncEnumerable<TSource>, keySelector:Func<TSource, UniTask<TKey>>) : IUniTaskOrderedAsyncEnumerable<TSource>
    + {static} OrderByDescendingAwait(source:IUniTaskAsyncEnumerable<TSource>, keySelector:Func<TSource, UniTask<TKey>>, comparer:IComparer<TKey>) : IUniTaskOrderedAsyncEnumerable<TSource>
    + {static} OrderByDescendingAwaitWithCancellation(source:IUniTaskAsyncEnumerable<TSource>, keySelector:Func<TSource, CancellationToken, UniTask<TKey>>) : IUniTaskOrderedAsyncEnumerable<TSource>
    + {static} OrderByDescendingAwaitWithCancellation(source:IUniTaskAsyncEnumerable<TSource>, keySelector:Func<TSource, CancellationToken, UniTask<TKey>>, comparer:IComparer<TKey>) : IUniTaskOrderedAsyncEnumerable<TSource>
    + {static} ThenBy(source:IUniTaskOrderedAsyncEnumerable<TSource>, keySelector:Func<TSource, TKey>) : IUniTaskOrderedAsyncEnumerable<TSource>
    + {static} ThenBy(source:IUniTaskOrderedAsyncEnumerable<TSource>, keySelector:Func<TSource, TKey>, comparer:IComparer<TKey>) : IUniTaskOrderedAsyncEnumerable<TSource>
    + {static} ThenByAwait(source:IUniTaskOrderedAsyncEnumerable<TSource>, keySelector:Func<TSource, UniTask<TKey>>) : IUniTaskOrderedAsyncEnumerable<TSource>
    + {static} ThenByAwait(source:IUniTaskOrderedAsyncEnumerable<TSource>, keySelector:Func<TSource, UniTask<TKey>>, comparer:IComparer<TKey>) : IUniTaskOrderedAsyncEnumerable<TSource>
    + {static} ThenByAwaitWithCancellation(source:IUniTaskOrderedAsyncEnumerable<TSource>, keySelector:Func<TSource, CancellationToken, UniTask<TKey>>) : IUniTaskOrderedAsyncEnumerable<TSource>
    + {static} ThenByAwaitWithCancellation(source:IUniTaskOrderedAsyncEnumerable<TSource>, keySelector:Func<TSource, CancellationToken, UniTask<TKey>>, comparer:IComparer<TKey>) : IUniTaskOrderedAsyncEnumerable<TSource>
    + {static} ThenByDescending(source:IUniTaskOrderedAsyncEnumerable<TSource>, keySelector:Func<TSource, TKey>) : IUniTaskOrderedAsyncEnumerable<TSource>
    + {static} ThenByDescending(source:IUniTaskOrderedAsyncEnumerable<TSource>, keySelector:Func<TSource, TKey>, comparer:IComparer<TKey>) : IUniTaskOrderedAsyncEnumerable<TSource>
    + {static} ThenByDescendingAwait(source:IUniTaskOrderedAsyncEnumerable<TSource>, keySelector:Func<TSource, UniTask<TKey>>) : IUniTaskOrderedAsyncEnumerable<TSource>
    + {static} ThenByDescendingAwait(source:IUniTaskOrderedAsyncEnumerable<TSource>, keySelector:Func<TSource, UniTask<TKey>>, comparer:IComparer<TKey>) : IUniTaskOrderedAsyncEnumerable<TSource>
    + {static} ThenByDescendingAwaitWithCancellation(source:IUniTaskOrderedAsyncEnumerable<TSource>, keySelector:Func<TSource, CancellationToken, UniTask<TKey>>) : IUniTaskOrderedAsyncEnumerable<TSource>
    + {static} ThenByDescendingAwaitWithCancellation(source:IUniTaskOrderedAsyncEnumerable<TSource>, keySelector:Func<TSource, CancellationToken, UniTask<TKey>>, comparer:IComparer<TKey>) : IUniTaskOrderedAsyncEnumerable<TSource>
}
abstract class "AsyncEnumerableSorter`1"<TElement> {
}
class "SyncSelectorAsyncEnumerableSorter`2"<TElement,TKey> {
}
class "AsyncSelectorEnumerableSorter`2"<TElement,TKey> {
}
class "AsyncSelectorWithCancellationEnumerableSorter`2"<TElement,TKey> {
}
abstract class "OrderedAsyncEnumerable`1"<TElement> {
    + OrderedAsyncEnumerable(source:IUniTaskAsyncEnumerable<TElement>)
    + CreateOrderedEnumerable(keySelector:Func<TElement, TKey>, comparer:IComparer<TKey>, descending:bool) : IUniTaskOrderedAsyncEnumerable<TElement>
    + CreateOrderedEnumerable(keySelector:Func<TElement, UniTask<TKey>>, comparer:IComparer<TKey>, descending:bool) : IUniTaskOrderedAsyncEnumerable<TElement>
    + CreateOrderedEnumerable(keySelector:Func<TElement, CancellationToken, UniTask<TKey>>, comparer:IComparer<TKey>, descending:bool) : IUniTaskOrderedAsyncEnumerable<TElement>
    + GetAsyncEnumerator(cancellationToken:CancellationToken) : IUniTaskAsyncEnumerator<TElement>
}
class "OrderedAsyncEnumerable`2"<TElement,TKey> {
    + OrderedAsyncEnumerable(source:IUniTaskAsyncEnumerable<TElement>, keySelector:Func<TElement, TKey>, comparer:IComparer<TKey>, descending:bool, parent:OrderedAsyncEnumerable<TElement>)
}
class "OrderedAsyncEnumerableAwait`2"<TElement,TKey> {
    + OrderedAsyncEnumerableAwait(source:IUniTaskAsyncEnumerable<TElement>, keySelector:Func<TElement, UniTask<TKey>>, comparer:IComparer<TKey>, descending:bool, parent:OrderedAsyncEnumerable<TElement>)
}
class "OrderedAsyncEnumerableAwaitWithCancellation`2"<TElement,TKey> {
    + OrderedAsyncEnumerableAwaitWithCancellation(source:IUniTaskAsyncEnumerable<TElement>, keySelector:Func<TElement, CancellationToken, UniTask<TKey>>, comparer:IComparer<TKey>, descending:bool, parent:OrderedAsyncEnumerable<TElement>)
}
class "IUniTaskOrderedAsyncEnumerable`1"<T> {
}
class _OrderedAsyncEnumerator {
    + _OrderedAsyncEnumerator(parent:OrderedAsyncEnumerable<TElement>, cancellationToken:CancellationToken)
    + MoveNextAsync() : UniTask<bool>
    + DisposeAsync() : UniTask
}
class "IUniTaskAsyncEnumerator`1"<T> {
}
"AsyncEnumerableSorter`1" "<TElement>" <|- - "SyncSelectorAsyncEnumerableSorter`2"
"AsyncEnumerableSorter`1" "<TElement>" <|- - "AsyncSelectorEnumerableSorter`2"
"AsyncEnumerableSorter`1" "<TElement>" <|- - "AsyncSelectorWithCancellationEnumerableSorter`2"
"IUniTaskOrderedAsyncEnumerable`1" "<TElement>" <|- - "OrderedAsyncEnumerable`1"
"OrderedAsyncEnumerable`1" "<TElement>" <|- - "OrderedAsyncEnumerable`2"
"OrderedAsyncEnumerable`1" "<TElement>" <|- - "OrderedAsyncEnumerableAwait`2"
"OrderedAsyncEnumerable`1" "<TElement>" <|- - "OrderedAsyncEnumerableAwaitWithCancellation`2"
"OrderedAsyncEnumerable`1" +- - _OrderedAsyncEnumerator
MoveNextSource <|- - _OrderedAsyncEnumerator
"IUniTaskAsyncEnumerator`1" "<TElement>" <|- - _OrderedAsyncEnumerator
_OrderedAsyncEnumerator - -> "Current" TElement
class UniTaskAsyncEnumerable <<static>> <<partial>> {
    + {static} Pairwise(source:IUniTaskAsyncEnumerable<TSource>) : IUniTaskAsyncEnumerable<(TSource, TSource)>
}
class "Pairwise`1"<TSource> <<sealed>> {
    + Pairwise(source:IUniTaskAsyncEnumerable<TSource>)
    + GetAsyncEnumerator(cancellationToken:CancellationToken) : IUniTaskAsyncEnumerator<(TSource, TSource)>
}
class "IUniTaskAsyncEnumerable`1"<T> {
}
class _Pairwise <<sealed>> {
    + _Pairwise(source:IUniTaskAsyncEnumerable<TSource>, cancellationToken:CancellationToken)
    + MoveNextAsync() : UniTask<bool>
    + DisposeAsync() : UniTask
}
class "IUniTaskAsyncEnumerator`1"<T> {
}
"IUniTaskAsyncEnumerable`1" "<(TSource, TSource)>" <|- - "Pairwise`1"
"Pairwise`1" +- - _Pairwise
MoveNextSource <|- - _Pairwise
"IUniTaskAsyncEnumerator`1" "<(TSource, TSource)>" <|- - _Pairwise
class UniTaskAsyncEnumerable <<static>> <<partial>> {
    + {static} Publish(source:IUniTaskAsyncEnumerable<TSource>) : IConnectableUniTaskAsyncEnumerable<TSource>
}
class "Publish`1"<TSource> <<sealed>> {
    + Publish(source:IUniTaskAsyncEnumerable<TSource>)
    + Connect() : IDisposable
    + GetAsyncEnumerator(cancellationToken:CancellationToken) : IUniTaskAsyncEnumerator<TSource>
}
class "IConnectableUniTaskAsyncEnumerable`1"<T> {
}
class ConnectDisposable <<sealed>> {
    + ConnectDisposable(cancellationTokenSource:CancellationTokenSource)
    + Dispose() : void
}
class _Publish <<sealed>> {
    + _Publish(parent:Publish<TSource>, cancellationToken:CancellationToken)
    + MoveNextAsync() : UniTask<bool>
    + DisposeAsync() : UniTask
    + OnNext(value:TSource) : void
    + OnCanceled(cancellationToken:CancellationToken) : void
    + OnCompleted() : void
    + OnError(ex:Exception) : void
}
class "IUniTaskAsyncEnumerator`1"<T> {
}
class "ITriggerHandler`1"<T> {
}
"IConnectableUniTaskAsyncEnumerable`1" "<TSource>" <|- - "Publish`1"
"Publish`1" +- - ConnectDisposable
IDisposable <|- - ConnectDisposable
"Publish`1" +- - _Publish
MoveNextSource <|- - _Publish
"IUniTaskAsyncEnumerator`1" "<TSource>" <|- - _Publish
"ITriggerHandler`1" "<TSource>" <|- - _Publish
_Publish - -> "Current" TSource
class UniTaskAsyncEnumerable <<static>> <<partial>> {
    + {static} Queue(source:IUniTaskAsyncEnumerable<TSource>) : IUniTaskAsyncEnumerable<TSource>
}
class "QueueOperator`1"<TSource> <<sealed>> {
    + QueueOperator(source:IUniTaskAsyncEnumerable<TSource>)
    + GetAsyncEnumerator(cancellationToken:CancellationToken) : IUniTaskAsyncEnumerator<TSource>
}
class "IUniTaskAsyncEnumerable`1"<T> {
}
class _Queue <<sealed>> {
    + _Queue(source:IUniTaskAsyncEnumerable<TSource>, cancellationToken:CancellationToken)
    + MoveNextAsync() : UniTask<bool>
    + <<async>> DisposeAsync() : UniTask
}
class "IUniTaskAsyncEnumerator`1"<T> {
}
"IUniTaskAsyncEnumerable`1" "<TSource>" <|- - "QueueOperator`1"
"QueueOperator`1" +- - _Queue
"IUniTaskAsyncEnumerator`1" "<TSource>" <|- - _Queue
_Queue - -> "Current" TSource
class UniTaskAsyncEnumerable <<static>> <<partial>> {
    + {static} Range(start:int, count:int) : IUniTaskAsyncEnumerable<int>
}
class Range {
    + Range(start:int, count:int)
    + GetAsyncEnumerator(cancellationToken:CancellationToken) : IUniTaskAsyncEnumerator<int>
}
class "IUniTaskAsyncEnumerable`1"<T> {
}
class _Range {
    + _Range(start:int, end:int, cancellationToken:CancellationToken)
    + Current : int <<get>>
    + MoveNextAsync() : UniTask<bool>
    + DisposeAsync() : UniTask
}
class "IUniTaskAsyncEnumerator`1"<T> {
}
"IUniTaskAsyncEnumerable`1" "<int>" <|- - Range
Range +- - _Range
"IUniTaskAsyncEnumerator`1" "<int>" <|- - _Range
class UniTaskAsyncEnumerable <<static>> <<partial>> {
    + {static} Repeat(element:TElement, count:int) : IUniTaskAsyncEnumerable<TElement>
}
class "Repeat`1"<TElement> {
    + Repeat(element:TElement, count:int)
    + GetAsyncEnumerator(cancellationToken:CancellationToken) : IUniTaskAsyncEnumerator<TElement>
}
class "IUniTaskAsyncEnumerable`1"<T> {
}
class _Repeat {
    + _Repeat(element:TElement, count:int, cancellationToken:CancellationToken)
    + MoveNextAsync() : UniTask<bool>
    + DisposeAsync() : UniTask
}
class "IUniTaskAsyncEnumerator`1"<T> {
}
"IUniTaskAsyncEnumerable`1" "<TElement>" <|- - "Repeat`1"
"Repeat`1" +- - _Repeat
"IUniTaskAsyncEnumerator`1" "<TElement>" <|- - _Repeat
_Repeat - -> "Current" TElement
class UniTaskAsyncEnumerable <<static>> <<partial>> {
    + {static} Return(value:TValue) : IUniTaskAsyncEnumerable<TValue>
}
class "Return`1"<TValue> {
    + Return(value:TValue)
    + GetAsyncEnumerator(cancellationToken:CancellationToken) : IUniTaskAsyncEnumerator<TValue>
}
class "IUniTaskAsyncEnumerable`1"<T> {
}
class _Return {
    + _Return(value:TValue, cancellationToken:CancellationToken)
    + MoveNextAsync() : UniTask<bool>
    + DisposeAsync() : UniTask
}
class "IUniTaskAsyncEnumerator`1"<T> {
}
"IUniTaskAsyncEnumerable`1" "<TValue>" <|- - "Return`1"
"Return`1" +- - _Return
"IUniTaskAsyncEnumerator`1" "<TValue>" <|- - _Return
_Return - -> "Current" TValue
class UniTaskAsyncEnumerable <<static>> <<partial>> {
    + {static} Reverse(source:IUniTaskAsyncEnumerable<TSource>) : IUniTaskAsyncEnumerable<TSource>
}
class "Reverse`1"<TSource> <<sealed>> {
    + Reverse(source:IUniTaskAsyncEnumerable<TSource>)
    + GetAsyncEnumerator(cancellationToken:CancellationToken) : IUniTaskAsyncEnumerator<TSource>
}
class "IUniTaskAsyncEnumerable`1"<T> {
}
class _Reverse <<sealed>> {
    + _Reverse(source:IUniTaskAsyncEnumerable<TSource>, cancellationToken:CancellationToken)
    + <<async>> MoveNextAsync() : UniTask<bool>
    + DisposeAsync() : UniTask
}
class "IUniTaskAsyncEnumerator`1"<T> {
}
"IUniTaskAsyncEnumerable`1" "<TSource>" <|- - "Reverse`1"
"Reverse`1" +- - _Reverse
MoveNextSource <|- - _Reverse
"IUniTaskAsyncEnumerator`1" "<TSource>" <|- - _Reverse
_Reverse - -> "Current" TSource
class UniTaskAsyncEnumerable <<static>> <<partial>> {
    + {static} Select(source:IUniTaskAsyncEnumerable<TSource>, selector:Func<TSource, TResult>) : IUniTaskAsyncEnumerable<TResult>
    + {static} Select(source:IUniTaskAsyncEnumerable<TSource>, selector:Func<TSource, Int32, TResult>) : IUniTaskAsyncEnumerable<TResult>
    + {static} SelectAwait(source:IUniTaskAsyncEnumerable<TSource>, selector:Func<TSource, UniTask<TResult>>) : IUniTaskAsyncEnumerable<TResult>
    + {static} SelectAwait(source:IUniTaskAsyncEnumerable<TSource>, selector:Func<TSource, Int32, UniTask<TResult>>) : IUniTaskAsyncEnumerable<TResult>
    + {static} SelectAwaitWithCancellation(source:IUniTaskAsyncEnumerable<TSource>, selector:Func<TSource, CancellationToken, UniTask<TResult>>) : IUniTaskAsyncEnumerable<TResult>
    + {static} SelectAwaitWithCancellation(source:IUniTaskAsyncEnumerable<TSource>, selector:Func<TSource, Int32, CancellationToken, UniTask<TResult>>) : IUniTaskAsyncEnumerable<TResult>
}
class "Select`2"<TSource,TResult> <<sealed>> {
    + Select(source:IUniTaskAsyncEnumerable<TSource>, selector:Func<TSource, TResult>)
    + GetAsyncEnumerator(cancellationToken:CancellationToken) : IUniTaskAsyncEnumerator<TResult>
}
class "SelectInt`2"<TSource,TResult> <<sealed>> {
    + SelectInt(source:IUniTaskAsyncEnumerable<TSource>, selector:Func<TSource, int, TResult>)
    + GetAsyncEnumerator(cancellationToken:CancellationToken) : IUniTaskAsyncEnumerator<TResult>
}
class "SelectAwait`2"<TSource,TResult> <<sealed>> {
    + SelectAwait(source:IUniTaskAsyncEnumerable<TSource>, selector:Func<TSource, UniTask<TResult>>)
    + GetAsyncEnumerator(cancellationToken:CancellationToken) : IUniTaskAsyncEnumerator<TResult>
}
class "SelectIntAwait`2"<TSource,TResult> <<sealed>> {
    + SelectIntAwait(source:IUniTaskAsyncEnumerable<TSource>, selector:Func<TSource, int, UniTask<TResult>>)
    + GetAsyncEnumerator(cancellationToken:CancellationToken) : IUniTaskAsyncEnumerator<TResult>
}
class "SelectAwaitWithCancellation`2"<TSource,TResult> <<sealed>> {
    + SelectAwaitWithCancellation(source:IUniTaskAsyncEnumerable<TSource>, selector:Func<TSource, CancellationToken, UniTask<TResult>>)
    + GetAsyncEnumerator(cancellationToken:CancellationToken) : IUniTaskAsyncEnumerator<TResult>
}
class "SelectIntAwaitWithCancellation`2"<TSource,TResult> <<sealed>> {
    + SelectIntAwaitWithCancellation(source:IUniTaskAsyncEnumerable<TSource>, selector:Func<TSource, int, CancellationToken, UniTask<TResult>>)
    + GetAsyncEnumerator(cancellationToken:CancellationToken) : IUniTaskAsyncEnumerator<TResult>
}
class "IUniTaskAsyncEnumerable`1"<T> {
}
class _Select <<sealed>> {
    + _Select(source:IUniTaskAsyncEnumerable<TSource>, selector:Func<TSource, TResult>, cancellationToken:CancellationToken)
    + MoveNextAsync() : UniTask<bool>
    + DisposeAsync() : UniTask
}
class _Select <<sealed>> {
    + _Select(source:IUniTaskAsyncEnumerable<TSource>, selector:Func<TSource, int, TResult>, cancellationToken:CancellationToken)
    + MoveNextAsync() : UniTask<bool>
    + DisposeAsync() : UniTask
}
class _SelectAwait <<sealed>> {
    + _SelectAwait(source:IUniTaskAsyncEnumerable<TSource>, selector:Func<TSource, UniTask<TResult>>, cancellationToken:CancellationToken)
    + MoveNextAsync() : UniTask<bool>
    + DisposeAsync() : UniTask
}
class _SelectAwait <<sealed>> {
    + _SelectAwait(source:IUniTaskAsyncEnumerable<TSource>, selector:Func<TSource, int, UniTask<TResult>>, cancellationToken:CancellationToken)
    + MoveNextAsync() : UniTask<bool>
    + DisposeAsync() : UniTask
}
class _SelectAwaitWithCancellation <<sealed>> {
    + _SelectAwaitWithCancellation(source:IUniTaskAsyncEnumerable<TSource>, selector:Func<TSource, CancellationToken, UniTask<TResult>>, cancellationToken:CancellationToken)
    + MoveNextAsync() : UniTask<bool>
    + DisposeAsync() : UniTask
}
class _SelectAwaitWithCancellation <<sealed>> {
    + _SelectAwaitWithCancellation(source:IUniTaskAsyncEnumerable<TSource>, selector:Func<TSource, int, CancellationToken, UniTask<TResult>>, cancellationToken:CancellationToken)
    + MoveNextAsync() : UniTask<bool>
    + DisposeAsync() : UniTask
}
class "IUniTaskAsyncEnumerator`1"<T> {
}
"IUniTaskAsyncEnumerable`1" "<TResult>" <|- - "Select`2"
"IUniTaskAsyncEnumerable`1" "<TResult>" <|- - "SelectInt`2"
"IUniTaskAsyncEnumerable`1" "<TResult>" <|- - "SelectAwait`2"
"IUniTaskAsyncEnumerable`1" "<TResult>" <|- - "SelectIntAwait`2"
"IUniTaskAsyncEnumerable`1" "<TResult>" <|- - "SelectAwaitWithCancellation`2"
"IUniTaskAsyncEnumerable`1" "<TResult>" <|- - "SelectIntAwaitWithCancellation`2"
"Select`2" +- - _Select
MoveNextSource <|- - _Select
"IUniTaskAsyncEnumerator`1" "<TResult>" <|- - _Select
_Select - -> "Current" TResult
"SelectInt`2" +- - _Select
MoveNextSource <|- - _Select
"IUniTaskAsyncEnumerator`1" "<TResult>" <|- - _Select
_Select - -> "Current" TResult
"SelectAwait`2" +- - _SelectAwait
MoveNextSource <|- - _SelectAwait
"IUniTaskAsyncEnumerator`1" "<TResult>" <|- - _SelectAwait
_SelectAwait - -> "Current" TResult
"SelectIntAwait`2" +- - _SelectAwait
MoveNextSource <|- - _SelectAwait
"IUniTaskAsyncEnumerator`1" "<TResult>" <|- - _SelectAwait
_SelectAwait - -> "Current" TResult
"SelectAwaitWithCancellation`2" +- - _SelectAwaitWithCancellation
MoveNextSource <|- - _SelectAwaitWithCancellation
"IUniTaskAsyncEnumerator`1" "<TResult>" <|- - _SelectAwaitWithCancellation
_SelectAwaitWithCancellation - -> "Current" TResult
"SelectIntAwaitWithCancellation`2" +- - _SelectAwaitWithCancellation
MoveNextSource <|- - _SelectAwaitWithCancellation
"IUniTaskAsyncEnumerator`1" "<TResult>" <|- - _SelectAwaitWithCancellation
_SelectAwaitWithCancellation - -> "Current" TResult
class UniTaskAsyncEnumerable <<static>> <<partial>> {
    + {static} SelectMany(source:IUniTaskAsyncEnumerable<TSource>, selector:Func<TSource, IUniTaskAsyncEnumerable<TResult>>) : IUniTaskAsyncEnumerable<TResult>
    + {static} SelectMany(source:IUniTaskAsyncEnumerable<TSource>, selector:Func<TSource, Int32, IUniTaskAsyncEnumerable<TResult>>) : IUniTaskAsyncEnumerable<TResult>
    + {static} SelectMany(source:IUniTaskAsyncEnumerable<TSource>, collectionSelector:Func<TSource, IUniTaskAsyncEnumerable<TCollection>>, resultSelector:Func<TSource, TCollection, TResult>) : IUniTaskAsyncEnumerable<TResult>
    + {static} SelectMany(source:IUniTaskAsyncEnumerable<TSource>, collectionSelector:Func<TSource, Int32, IUniTaskAsyncEnumerable<TCollection>>, resultSelector:Func<TSource, TCollection, TResult>) : IUniTaskAsyncEnumerable<TResult>
    + {static} SelectManyAwait(source:IUniTaskAsyncEnumerable<TSource>, selector:Func<TSource, UniTask<IUniTaskAsyncEnumerable<TResult>>>) : IUniTaskAsyncEnumerable<TResult>
    + {static} SelectManyAwait(source:IUniTaskAsyncEnumerable<TSource>, selector:Func<TSource, Int32, UniTask<IUniTaskAsyncEnumerable<TResult>>>) : IUniTaskAsyncEnumerable<TResult>
    + {static} SelectManyAwait(source:IUniTaskAsyncEnumerable<TSource>, collectionSelector:Func<TSource, UniTask<IUniTaskAsyncEnumerable<TCollection>>>, resultSelector:Func<TSource, TCollection, UniTask<TResult>>) : IUniTaskAsyncEnumerable<TResult>
    + {static} SelectManyAwait(source:IUniTaskAsyncEnumerable<TSource>, collectionSelector:Func<TSource, Int32, UniTask<IUniTaskAsyncEnumerable<TCollection>>>, resultSelector:Func<TSource, TCollection, UniTask<TResult>>) : IUniTaskAsyncEnumerable<TResult>
    + {static} SelectManyAwaitWithCancellation(source:IUniTaskAsyncEnumerable<TSource>, selector:Func<TSource, CancellationToken, UniTask<IUniTaskAsyncEnumerable<TResult>>>) : IUniTaskAsyncEnumerable<TResult>
    + {static} SelectManyAwaitWithCancellation(source:IUniTaskAsyncEnumerable<TSource>, selector:Func<TSource, Int32, CancellationToken, UniTask<IUniTaskAsyncEnumerable<TResult>>>) : IUniTaskAsyncEnumerable<TResult>
    + {static} SelectManyAwaitWithCancellation(source:IUniTaskAsyncEnumerable<TSource>, collectionSelector:Func<TSource, CancellationToken, UniTask<IUniTaskAsyncEnumerable<TCollection>>>, resultSelector:Func<TSource, TCollection, CancellationToken, UniTask<TResult>>) : IUniTaskAsyncEnumerable<TResult>
    + {static} SelectManyAwaitWithCancellation(source:IUniTaskAsyncEnumerable<TSource>, collectionSelector:Func<TSource, Int32, CancellationToken, UniTask<IUniTaskAsyncEnumerable<TCollection>>>, resultSelector:Func<TSource, TCollection, CancellationToken, UniTask<TResult>>) : IUniTaskAsyncEnumerable<TResult>
}
class "SelectMany`3"<TSource,TCollection,TResult> <<sealed>> {
    + SelectMany(source:IUniTaskAsyncEnumerable<TSource>, selector:Func<TSource, IUniTaskAsyncEnumerable<TCollection>>, resultSelector:Func<TSource, TCollection, TResult>)
    + SelectMany(source:IUniTaskAsyncEnumerable<TSource>, selector:Func<TSource, int, IUniTaskAsyncEnumerable<TCollection>>, resultSelector:Func<TSource, TCollection, TResult>)
    + GetAsyncEnumerator(cancellationToken:CancellationToken) : IUniTaskAsyncEnumerator<TResult>
}
class "SelectManyAwait`3"<TSource,TCollection,TResult> <<sealed>> {
    + SelectManyAwait(source:IUniTaskAsyncEnumerable<TSource>, selector:Func<TSource, UniTask<IUniTaskAsyncEnumerable<TCollection>>>, resultSelector:Func<TSource, TCollection, UniTask<TResult>>)
    + SelectManyAwait(source:IUniTaskAsyncEnumerable<TSource>, selector:Func<TSource, int, UniTask<IUniTaskAsyncEnumerable<TCollection>>>, resultSelector:Func<TSource, TCollection, UniTask<TResult>>)
    + GetAsyncEnumerator(cancellationToken:CancellationToken) : IUniTaskAsyncEnumerator<TResult>
}
class "SelectManyAwaitWithCancellation`3"<TSource,TCollection,TResult> <<sealed>> {
    + SelectManyAwaitWithCancellation(source:IUniTaskAsyncEnumerable<TSource>, selector:Func<TSource, CancellationToken, UniTask<IUniTaskAsyncEnumerable<TCollection>>>, resultSelector:Func<TSource, TCollection, CancellationToken, UniTask<TResult>>)
    + SelectManyAwaitWithCancellation(source:IUniTaskAsyncEnumerable<TSource>, selector:Func<TSource, int, CancellationToken, UniTask<IUniTaskAsyncEnumerable<TCollection>>>, resultSelector:Func<TSource, TCollection, CancellationToken, UniTask<TResult>>)
    + GetAsyncEnumerator(cancellationToken:CancellationToken) : IUniTaskAsyncEnumerator<TResult>
}
class "IUniTaskAsyncEnumerable`1"<T> {
}
class _SelectMany <<sealed>> {
    + _SelectMany(source:IUniTaskAsyncEnumerable<TSource>, selector1:Func<TSource, IUniTaskAsyncEnumerable<TCollection>>, selector2:Func<TSource, int, IUniTaskAsyncEnumerable<TCollection>>, resultSelector:Func<TSource, TCollection, TResult>, cancellationToken:CancellationToken)
    + MoveNextAsync() : UniTask<bool>
    + <<async>> DisposeAsync() : UniTask
}
class _SelectManyAwait <<sealed>> {
    + _SelectManyAwait(source:IUniTaskAsyncEnumerable<TSource>, selector1:Func<TSource, UniTask<IUniTaskAsyncEnumerable<TCollection>>>, selector2:Func<TSource, int, UniTask<IUniTaskAsyncEnumerable<TCollection>>>, resultSelector:Func<TSource, TCollection, UniTask<TResult>>, cancellationToken:CancellationToken)
    + MoveNextAsync() : UniTask<bool>
    + <<async>> DisposeAsync() : UniTask
}
class _SelectManyAwaitWithCancellation <<sealed>> {
    + _SelectManyAwaitWithCancellation(source:IUniTaskAsyncEnumerable<TSource>, selector1:Func<TSource, CancellationToken, UniTask<IUniTaskAsyncEnumerable<TCollection>>>, selector2:Func<TSource, int, CancellationToken, UniTask<IUniTaskAsyncEnumerable<TCollection>>>, resultSelector:Func<TSource, TCollection, CancellationToken, UniTask<TResult>>, cancellationToken:CancellationToken)
    + MoveNextAsync() : UniTask<bool>
    + <<async>> DisposeAsync() : UniTask
}
class "IUniTaskAsyncEnumerator`1"<T> {
}
"IUniTaskAsyncEnumerable`1" "<TResult>" <|- - "SelectMany`3"
"IUniTaskAsyncEnumerable`1" "<TResult>" <|- - "SelectManyAwait`3"
"IUniTaskAsyncEnumerable`1" "<TResult>" <|- - "SelectManyAwaitWithCancellation`3"
"SelectMany`3" +- - _SelectMany
MoveNextSource <|- - _SelectMany
"IUniTaskAsyncEnumerator`1" "<TResult>" <|- - _SelectMany
_SelectMany - -> "Current" TResult
"SelectManyAwait`3" +- - _SelectManyAwait
MoveNextSource <|- - _SelectManyAwait
"IUniTaskAsyncEnumerator`1" "<TResult>" <|- - _SelectManyAwait
_SelectManyAwait - -> "Current" TResult
"SelectManyAwaitWithCancellation`3" +- - _SelectManyAwaitWithCancellation
MoveNextSource <|- - _SelectManyAwaitWithCancellation
"IUniTaskAsyncEnumerator`1" "<TResult>" <|- - _SelectManyAwaitWithCancellation
_SelectManyAwaitWithCancellation - -> "Current" TResult
class UniTaskAsyncEnumerable <<static>> <<partial>> {
    + {static} SequenceEqualAsync(first:IUniTaskAsyncEnumerable<TSource>, second:IUniTaskAsyncEnumerable<TSource>, cancellationToken:CancellationToken) : UniTask<Boolean>
    + {static} SequenceEqualAsync(first:IUniTaskAsyncEnumerable<TSource>, second:IUniTaskAsyncEnumerable<TSource>, comparer:IEqualityComparer<TSource>, cancellationToken:CancellationToken) : UniTask<Boolean>
}
class SequenceEqual <<static>> {
}
class UniTaskAsyncEnumerable <<static>> <<partial>> {
    + {static} SingleAsync(source:IUniTaskAsyncEnumerable<TSource>, cancellationToken:CancellationToken) : UniTask<TSource>
    + {static} SingleAsync(source:IUniTaskAsyncEnumerable<TSource>, predicate:Func<TSource, Boolean>, cancellationToken:CancellationToken) : UniTask<TSource>
    + {static} SingleAwaitAsync(source:IUniTaskAsyncEnumerable<TSource>, predicate:Func<TSource, UniTask<Boolean>>, cancellationToken:CancellationToken) : UniTask<TSource>
    + {static} SingleAwaitWithCancellationAsync(source:IUniTaskAsyncEnumerable<TSource>, predicate:Func<TSource, CancellationToken, UniTask<Boolean>>, cancellationToken:CancellationToken) : UniTask<TSource>
    + {static} SingleOrDefaultAsync(source:IUniTaskAsyncEnumerable<TSource>, cancellationToken:CancellationToken) : UniTask<TSource>
    + {static} SingleOrDefaultAsync(source:IUniTaskAsyncEnumerable<TSource>, predicate:Func<TSource, Boolean>, cancellationToken:CancellationToken) : UniTask<TSource>
    + {static} SingleOrDefaultAwaitAsync(source:IUniTaskAsyncEnumerable<TSource>, predicate:Func<TSource, UniTask<Boolean>>, cancellationToken:CancellationToken) : UniTask<TSource>
    + {static} SingleOrDefaultAwaitWithCancellationAsync(source:IUniTaskAsyncEnumerable<TSource>, predicate:Func<TSource, CancellationToken, UniTask<Boolean>>, cancellationToken:CancellationToken) : UniTask<TSource>
}
class SingleOperator <<static>> {
    + {static} <<async>> SingleAsync(source:IUniTaskAsyncEnumerable<TSource>, cancellationToken:CancellationToken, defaultIfEmpty:bool) : UniTask<TSource>
    + {static} <<async>> SingleAsync(source:IUniTaskAsyncEnumerable<TSource>, predicate:Func<TSource, Boolean>, cancellationToken:CancellationToken, defaultIfEmpty:bool) : UniTask<TSource>
    + {static} <<async>> SingleAwaitAsync(source:IUniTaskAsyncEnumerable<TSource>, predicate:Func<TSource, UniTask<Boolean>>, cancellationToken:CancellationToken, defaultIfEmpty:bool) : UniTask<TSource>
    + {static} <<async>> SingleAwaitWithCancellationAsync(source:IUniTaskAsyncEnumerable<TSource>, predicate:Func<TSource, CancellationToken, UniTask<Boolean>>, cancellationToken:CancellationToken, defaultIfEmpty:bool) : UniTask<TSource>
}
class UniTaskAsyncEnumerable <<static>> <<partial>> {
    + {static} Skip(source:IUniTaskAsyncEnumerable<TSource>, count:Int32) : IUniTaskAsyncEnumerable<TSource>
}
class "Skip`1"<TSource> <<sealed>> {
    + Skip(source:IUniTaskAsyncEnumerable<TSource>, count:int)
    + GetAsyncEnumerator(cancellationToken:CancellationToken) : IUniTaskAsyncEnumerator<TSource>
}
class "IUniTaskAsyncEnumerable`1"<T> {
}
class _Skip <<sealed>> {
    + _Skip(source:IUniTaskAsyncEnumerable<TSource>, count:int, cancellationToken:CancellationToken)
}
class "AsyncEnumeratorBase`2"<T1,T2> {
}
"IUniTaskAsyncEnumerable`1" "<TSource>" <|- - "Skip`1"
"Skip`1" +- - _Skip
"AsyncEnumeratorBase`2" "<TSource,TSource>" <|- - _Skip
class UniTaskAsyncEnumerable <<static>> <<partial>> {
    + {static} SkipLast(source:IUniTaskAsyncEnumerable<TSource>, count:Int32) : IUniTaskAsyncEnumerable<TSource>
}
class "SkipLast`1"<TSource> <<sealed>> {
    + SkipLast(source:IUniTaskAsyncEnumerable<TSource>, count:int)
    + GetAsyncEnumerator(cancellationToken:CancellationToken) : IUniTaskAsyncEnumerator<TSource>
}
class "IUniTaskAsyncEnumerable`1"<T> {
}
class _SkipLast <<sealed>> {
    + _SkipLast(source:IUniTaskAsyncEnumerable<TSource>, count:int, cancellationToken:CancellationToken)
    + MoveNextAsync() : UniTask<bool>
    + DisposeAsync() : UniTask
}
class "IUniTaskAsyncEnumerator`1"<T> {
}
"IUniTaskAsyncEnumerable`1" "<TSource>" <|- - "SkipLast`1"
"SkipLast`1" +- - _SkipLast
MoveNextSource <|- - _SkipLast
"IUniTaskAsyncEnumerator`1" "<TSource>" <|- - _SkipLast
_SkipLast - -> "Current" TSource
class UniTaskAsyncEnumerable <<static>> <<partial>> {
    + {static} SkipUntil(source:IUniTaskAsyncEnumerable<TSource>, other:UniTask) : IUniTaskAsyncEnumerable<TSource>
    + {static} SkipUntil(source:IUniTaskAsyncEnumerable<TSource>, other:Func<CancellationToken, UniTask>) : IUniTaskAsyncEnumerable<TSource>
}
class "SkipUntil`1"<TSource> <<sealed>> {
    + SkipUntil(source:IUniTaskAsyncEnumerable<TSource>, other:UniTask, other2:Func<CancellationToken, UniTask>)
    + GetAsyncEnumerator(cancellationToken:CancellationToken) : IUniTaskAsyncEnumerator<TSource>
}
class "IUniTaskAsyncEnumerable`1"<T> {
}
class _SkipUntil <<sealed>> {
    + _SkipUntil(source:IUniTaskAsyncEnumerable<TSource>, other:UniTask, cancellationToken1:CancellationToken)
    + MoveNextAsync() : UniTask<bool>
    + DisposeAsync() : UniTask
}
class "IUniTaskAsyncEnumerator`1"<T> {
}
"IUniTaskAsyncEnumerable`1" "<TSource>" <|- - "SkipUntil`1"
"SkipUntil`1" +- - _SkipUntil
MoveNextSource <|- - _SkipUntil
"IUniTaskAsyncEnumerator`1" "<TSource>" <|- - _SkipUntil
_SkipUntil - -> "Current" TSource
class UniTaskAsyncEnumerable <<static>> <<partial>> {
    + {static} SkipUntilCanceled(source:IUniTaskAsyncEnumerable<TSource>, cancellationToken:CancellationToken) : IUniTaskAsyncEnumerable<TSource>
}
class "SkipUntilCanceled`1"<TSource> <<sealed>> {
    + SkipUntilCanceled(source:IUniTaskAsyncEnumerable<TSource>, cancellationToken:CancellationToken)
    + GetAsyncEnumerator(cancellationToken:CancellationToken) : IUniTaskAsyncEnumerator<TSource>
}
class "IUniTaskAsyncEnumerable`1"<T> {
}
class _SkipUntilCanceled <<sealed>> {
    + _SkipUntilCanceled(source:IUniTaskAsyncEnumerable<TSource>, cancellationToken1:CancellationToken, cancellationToken2:CancellationToken)
    + MoveNextAsync() : UniTask<bool>
    + DisposeAsync() : UniTask
}
class "IUniTaskAsyncEnumerator`1"<T> {
}
"IUniTaskAsyncEnumerable`1" "<TSource>" <|- - "SkipUntilCanceled`1"
"SkipUntilCanceled`1" +- - _SkipUntilCanceled
MoveNextSource <|- - _SkipUntilCanceled
"IUniTaskAsyncEnumerator`1" "<TSource>" <|- - _SkipUntilCanceled
_SkipUntilCanceled - -> "Current" TSource
class UniTaskAsyncEnumerable <<static>> <<partial>> {
    + {static} SkipWhile(source:IUniTaskAsyncEnumerable<TSource>, predicate:Func<TSource, Boolean>) : IUniTaskAsyncEnumerable<TSource>
    + {static} SkipWhile(source:IUniTaskAsyncEnumerable<TSource>, predicate:Func<TSource, Int32, Boolean>) : IUniTaskAsyncEnumerable<TSource>
    + {static} SkipWhileAwait(source:IUniTaskAsyncEnumerable<TSource>, predicate:Func<TSource, UniTask<Boolean>>) : IUniTaskAsyncEnumerable<TSource>
    + {static} SkipWhileAwait(source:IUniTaskAsyncEnumerable<TSource>, predicate:Func<TSource, Int32, UniTask<Boolean>>) : IUniTaskAsyncEnumerable<TSource>
    + {static} SkipWhileAwaitWithCancellation(source:IUniTaskAsyncEnumerable<TSource>, predicate:Func<TSource, CancellationToken, UniTask<Boolean>>) : IUniTaskAsyncEnumerable<TSource>
    + {static} SkipWhileAwaitWithCancellation(source:IUniTaskAsyncEnumerable<TSource>, predicate:Func<TSource, Int32, CancellationToken, UniTask<Boolean>>) : IUniTaskAsyncEnumerable<TSource>
}
class "SkipWhile`1"<TSource> <<sealed>> {
    + SkipWhile(source:IUniTaskAsyncEnumerable<TSource>, predicate:Func<TSource, bool>)
    + GetAsyncEnumerator(cancellationToken:CancellationToken) : IUniTaskAsyncEnumerator<TSource>
}
class "SkipWhileInt`1"<TSource> <<sealed>> {
    + SkipWhileInt(source:IUniTaskAsyncEnumerable<TSource>, predicate:Func<TSource, int, bool>)
    + GetAsyncEnumerator(cancellationToken:CancellationToken) : IUniTaskAsyncEnumerator<TSource>
}
class "SkipWhileAwait`1"<TSource> <<sealed>> {
    + SkipWhileAwait(source:IUniTaskAsyncEnumerable<TSource>, predicate:Func<TSource, UniTask<bool>>)
    + GetAsyncEnumerator(cancellationToken:CancellationToken) : IUniTaskAsyncEnumerator<TSource>
}
class "SkipWhileIntAwait`1"<TSource> <<sealed>> {
    + SkipWhileIntAwait(source:IUniTaskAsyncEnumerable<TSource>, predicate:Func<TSource, int, UniTask<bool>>)
    + GetAsyncEnumerator(cancellationToken:CancellationToken) : IUniTaskAsyncEnumerator<TSource>
}
class "SkipWhileAwaitWithCancellation`1"<TSource> <<sealed>> {
    + SkipWhileAwaitWithCancellation(source:IUniTaskAsyncEnumerable<TSource>, predicate:Func<TSource, CancellationToken, UniTask<bool>>)
    + GetAsyncEnumerator(cancellationToken:CancellationToken) : IUniTaskAsyncEnumerator<TSource>
}
class "SkipWhileIntAwaitWithCancellation`1"<TSource> <<sealed>> {
    + SkipWhileIntAwaitWithCancellation(source:IUniTaskAsyncEnumerable<TSource>, predicate:Func<TSource, int, CancellationToken, UniTask<bool>>)
    + GetAsyncEnumerator(cancellationToken:CancellationToken) : IUniTaskAsyncEnumerator<TSource>
}
class "IUniTaskAsyncEnumerable`1"<T> {
}
class _SkipWhile {
    + _SkipWhile(source:IUniTaskAsyncEnumerable<TSource>, predicate:Func<TSource, bool>, cancellationToken:CancellationToken)
}
class _SkipWhileInt {
    + _SkipWhileInt(source:IUniTaskAsyncEnumerable<TSource>, predicate:Func<TSource, int, bool>, cancellationToken:CancellationToken)
}
class _SkipWhileAwait {
    + _SkipWhileAwait(source:IUniTaskAsyncEnumerable<TSource>, predicate:Func<TSource, UniTask<bool>>, cancellationToken:CancellationToken)
}
class _SkipWhileIntAwait {
    + _SkipWhileIntAwait(source:IUniTaskAsyncEnumerable<TSource>, predicate:Func<TSource, int, UniTask<bool>>, cancellationToken:CancellationToken)
}
class _SkipWhileAwaitWithCancellation {
    + _SkipWhileAwaitWithCancellation(source:IUniTaskAsyncEnumerable<TSource>, predicate:Func<TSource, CancellationToken, UniTask<bool>>, cancellationToken:CancellationToken)
}
class _SkipWhileIntAwaitWithCancellation {
    + _SkipWhileIntAwaitWithCancellation(source:IUniTaskAsyncEnumerable<TSource>, predicate:Func<TSource, int, CancellationToken, UniTask<bool>>, cancellationToken:CancellationToken)
}
class "AsyncEnumeratorBase`2"<T1,T2> {
}
class "AsyncEnumeratorAwaitSelectorBase`3"<T1,T2,T3> {
}
"IUniTaskAsyncEnumerable`1" "<TSource>" <|- - "SkipWhile`1"
"IUniTaskAsyncEnumerable`1" "<TSource>" <|- - "SkipWhileInt`1"
"IUniTaskAsyncEnumerable`1" "<TSource>" <|- - "SkipWhileAwait`1"
"IUniTaskAsyncEnumerable`1" "<TSource>" <|- - "SkipWhileIntAwait`1"
"IUniTaskAsyncEnumerable`1" "<TSource>" <|- - "SkipWhileAwaitWithCancellation`1"
"IUniTaskAsyncEnumerable`1" "<TSource>" <|- - "SkipWhileIntAwaitWithCancellation`1"
"SkipWhile`1" +- - _SkipWhile
"AsyncEnumeratorBase`2" "<TSource,TSource>" <|- - _SkipWhile
"SkipWhileInt`1" +- - _SkipWhileInt
"AsyncEnumeratorBase`2" "<TSource,TSource>" <|- - _SkipWhileInt
"SkipWhileAwait`1" +- - _SkipWhileAwait
"AsyncEnumeratorAwaitSelectorBase`3" "<TSource,TSource,bool>" <|- - _SkipWhileAwait
"SkipWhileIntAwait`1" +- - _SkipWhileIntAwait
"AsyncEnumeratorAwaitSelectorBase`3" "<TSource,TSource,bool>" <|- - _SkipWhileIntAwait
"SkipWhileAwaitWithCancellation`1" +- - _SkipWhileAwaitWithCancellation
"AsyncEnumeratorAwaitSelectorBase`3" "<TSource,TSource,bool>" <|- - _SkipWhileAwaitWithCancellation
"SkipWhileIntAwaitWithCancellation`1" +- - _SkipWhileIntAwaitWithCancellation
"AsyncEnumeratorAwaitSelectorBase`3" "<TSource,TSource,bool>" <|- - _SkipWhileIntAwaitWithCancellation
class UniTaskAsyncEnumerable <<static>> <<partial>> {
    + {static} Subscribe(source:IUniTaskAsyncEnumerable<TSource>, action:Action<TSource>) : IDisposable
    + {static} Subscribe(source:IUniTaskAsyncEnumerable<TSource>, action:Func<TSource, UniTaskVoid>) : IDisposable
    + {static} Subscribe(source:IUniTaskAsyncEnumerable<TSource>, action:Func<TSource, CancellationToken, UniTaskVoid>) : IDisposable
    + {static} Subscribe(source:IUniTaskAsyncEnumerable<TSource>, action:Action<TSource>, cancellationToken:CancellationToken) : void
    + {static} Subscribe(source:IUniTaskAsyncEnumerable<TSource>, action:Func<TSource, UniTaskVoid>, cancellationToken:CancellationToken) : void
    + {static} Subscribe(source:IUniTaskAsyncEnumerable<TSource>, action:Func<TSource, CancellationToken, UniTaskVoid>, cancellationToken:CancellationToken) : void
    + {static} SubscribeAwait(source:IUniTaskAsyncEnumerable<TSource>, onNext:Func<TSource, UniTask>) : IDisposable
    + {static} SubscribeAwait(source:IUniTaskAsyncEnumerable<TSource>, onNext:Func<TSource, UniTask>, cancellationToken:CancellationToken) : void
    + {static} SubscribeAwait(source:IUniTaskAsyncEnumerable<TSource>, onNext:Func<TSource, CancellationToken, UniTask>) : IDisposable
    + {static} SubscribeAwait(source:IUniTaskAsyncEnumerable<TSource>, onNext:Func<TSource, CancellationToken, UniTask>, cancellationToken:CancellationToken) : void
    + {static} Subscribe(source:IUniTaskAsyncEnumerable<TSource>, onNext:Action<TSource>, onError:Action<Exception>) : IDisposable
    + {static} Subscribe(source:IUniTaskAsyncEnumerable<TSource>, onNext:Func<TSource, UniTaskVoid>, onError:Action<Exception>) : IDisposable
    + {static} Subscribe(source:IUniTaskAsyncEnumerable<TSource>, onNext:Action<TSource>, onError:Action<Exception>, cancellationToken:CancellationToken) : void
    + {static} Subscribe(source:IUniTaskAsyncEnumerable<TSource>, onNext:Func<TSource, UniTaskVoid>, onError:Action<Exception>, cancellationToken:CancellationToken) : void
    + {static} SubscribeAwait(source:IUniTaskAsyncEnumerable<TSource>, onNext:Func<TSource, UniTask>, onError:Action<Exception>) : IDisposable
    + {static} SubscribeAwait(source:IUniTaskAsyncEnumerable<TSource>, onNext:Func<TSource, UniTask>, onError:Action<Exception>, cancellationToken:CancellationToken) : void
    + {static} SubscribeAwait(source:IUniTaskAsyncEnumerable<TSource>, onNext:Func<TSource, CancellationToken, UniTask>, onError:Action<Exception>) : IDisposable
    + {static} SubscribeAwait(source:IUniTaskAsyncEnumerable<TSource>, onNext:Func<TSource, CancellationToken, UniTask>, onError:Action<Exception>, cancellationToken:CancellationToken) : void
    + {static} Subscribe(source:IUniTaskAsyncEnumerable<TSource>, onNext:Action<TSource>, onCompleted:Action) : IDisposable
    + {static} Subscribe(source:IUniTaskAsyncEnumerable<TSource>, onNext:Func<TSource, UniTaskVoid>, onCompleted:Action) : IDisposable
    + {static} Subscribe(source:IUniTaskAsyncEnumerable<TSource>, onNext:Action<TSource>, onCompleted:Action, cancellationToken:CancellationToken) : void
    + {static} Subscribe(source:IUniTaskAsyncEnumerable<TSource>, onNext:Func<TSource, UniTaskVoid>, onCompleted:Action, cancellationToken:CancellationToken) : void
    + {static} SubscribeAwait(source:IUniTaskAsyncEnumerable<TSource>, onNext:Func<TSource, UniTask>, onCompleted:Action) : IDisposable
    + {static} SubscribeAwait(source:IUniTaskAsyncEnumerable<TSource>, onNext:Func<TSource, UniTask>, onCompleted:Action, cancellationToken:CancellationToken) : void
    + {static} SubscribeAwait(source:IUniTaskAsyncEnumerable<TSource>, onNext:Func<TSource, CancellationToken, UniTask>, onCompleted:Action) : IDisposable
    + {static} SubscribeAwait(source:IUniTaskAsyncEnumerable<TSource>, onNext:Func<TSource, CancellationToken, UniTask>, onCompleted:Action, cancellationToken:CancellationToken) : void
    + {static} Subscribe(source:IUniTaskAsyncEnumerable<TSource>, observer:IObserver<TSource>) : IDisposable
    + {static} Subscribe(source:IUniTaskAsyncEnumerable<TSource>, observer:IObserver<TSource>, cancellationToken:CancellationToken) : void
}
class CancellationTokenDisposable <<sealed>> {
    + Dispose() : void
}
class Subscribe <<static>> {
    + {static} <<async>> SubscribeCore(source:IUniTaskAsyncEnumerable<TSource>, onNext:Action<TSource>, onError:Action<Exception>, onCompleted:Action, cancellationToken:CancellationToken) : UniTaskVoid
    + {static} <<async>> SubscribeCore(source:IUniTaskAsyncEnumerable<TSource>, onNext:Func<TSource, UniTaskVoid>, onError:Action<Exception>, onCompleted:Action, cancellationToken:CancellationToken) : UniTaskVoid
    + {static} <<async>> SubscribeCore(source:IUniTaskAsyncEnumerable<TSource>, onNext:Func<TSource, CancellationToken, UniTaskVoid>, onError:Action<Exception>, onCompleted:Action, cancellationToken:CancellationToken) : UniTaskVoid
    + {static} <<async>> SubscribeCore(source:IUniTaskAsyncEnumerable<TSource>, observer:IObserver<TSource>, cancellationToken:CancellationToken) : UniTaskVoid
    + {static} <<async>> SubscribeAwaitCore(source:IUniTaskAsyncEnumerable<TSource>, onNext:Func<TSource, UniTask>, onError:Action<Exception>, onCompleted:Action, cancellationToken:CancellationToken) : UniTaskVoid
    + {static} <<async>> SubscribeAwaitCore(source:IUniTaskAsyncEnumerable<TSource>, onNext:Func<TSource, CancellationToken, UniTask>, onError:Action<Exception>, onCompleted:Action, cancellationToken:CancellationToken) : UniTaskVoid
}
class "Action`1"<T> {
}
IDisposable <|- - CancellationTokenDisposable
CancellationTokenDisposable - -> "Token" CancellationToken
Subscribe o-> "NopError<Exception>" "Action`1"
Subscribe o-> "NopCompleted" Action
class UniTaskAsyncEnumerable <<static>> <<partial>> {
    + {static} SumAsync(source:IUniTaskAsyncEnumerable<Int32>, cancellationToken:CancellationToken) : UniTask<Int32>
    + {static} SumAsync(source:IUniTaskAsyncEnumerable<TSource>, selector:Func<TSource, Int32>, cancellationToken:CancellationToken) : UniTask<Int32>
    + {static} SumAwaitAsync(source:IUniTaskAsyncEnumerable<TSource>, selector:Func<TSource, UniTask<Int32>>, cancellationToken:CancellationToken) : UniTask<Int32>
    + {static} SumAwaitWithCancellationAsync(source:IUniTaskAsyncEnumerable<TSource>, selector:Func<TSource, CancellationToken, UniTask<Int32>>, cancellationToken:CancellationToken) : UniTask<Int32>
    + {static} SumAsync(source:IUniTaskAsyncEnumerable<Int64>, cancellationToken:CancellationToken) : UniTask<Int64>
    + {static} SumAsync(source:IUniTaskAsyncEnumerable<TSource>, selector:Func<TSource, Int64>, cancellationToken:CancellationToken) : UniTask<Int64>
    + {static} SumAwaitAsync(source:IUniTaskAsyncEnumerable<TSource>, selector:Func<TSource, UniTask<Int64>>, cancellationToken:CancellationToken) : UniTask<Int64>
    + {static} SumAwaitWithCancellationAsync(source:IUniTaskAsyncEnumerable<TSource>, selector:Func<TSource, CancellationToken, UniTask<Int64>>, cancellationToken:CancellationToken) : UniTask<Int64>
    + {static} SumAsync(source:IUniTaskAsyncEnumerable<Single>, cancellationToken:CancellationToken) : UniTask<Single>
    + {static} SumAsync(source:IUniTaskAsyncEnumerable<TSource>, selector:Func<TSource, Single>, cancellationToken:CancellationToken) : UniTask<Single>
    + {static} SumAwaitAsync(source:IUniTaskAsyncEnumerable<TSource>, selector:Func<TSource, UniTask<Single>>, cancellationToken:CancellationToken) : UniTask<Single>
    + {static} SumAwaitWithCancellationAsync(source:IUniTaskAsyncEnumerable<TSource>, selector:Func<TSource, CancellationToken, UniTask<Single>>, cancellationToken:CancellationToken) : UniTask<Single>
    + {static} SumAsync(source:IUniTaskAsyncEnumerable<Double>, cancellationToken:CancellationToken) : UniTask<Double>
    + {static} SumAsync(source:IUniTaskAsyncEnumerable<TSource>, selector:Func<TSource, Double>, cancellationToken:CancellationToken) : UniTask<Double>
    + {static} SumAwaitAsync(source:IUniTaskAsyncEnumerable<TSource>, selector:Func<TSource, UniTask<Double>>, cancellationToken:CancellationToken) : UniTask<Double>
    + {static} SumAwaitWithCancellationAsync(source:IUniTaskAsyncEnumerable<TSource>, selector:Func<TSource, CancellationToken, UniTask<Double>>, cancellationToken:CancellationToken) : UniTask<Double>
    + {static} SumAsync(source:IUniTaskAsyncEnumerable<Decimal>, cancellationToken:CancellationToken) : UniTask<Decimal>
    + {static} SumAsync(source:IUniTaskAsyncEnumerable<TSource>, selector:Func<TSource, Decimal>, cancellationToken:CancellationToken) : UniTask<Decimal>
    + {static} SumAwaitAsync(source:IUniTaskAsyncEnumerable<TSource>, selector:Func<TSource, UniTask<Decimal>>, cancellationToken:CancellationToken) : UniTask<Decimal>
    + {static} SumAwaitWithCancellationAsync(source:IUniTaskAsyncEnumerable<TSource>, selector:Func<TSource, CancellationToken, UniTask<Decimal>>, cancellationToken:CancellationToken) : UniTask<Decimal>
    + {static} SumAsync(source:IUniTaskAsyncEnumerable<Int32?>, cancellationToken:CancellationToken) : UniTask<Int32?>
    + {static} SumAsync(source:IUniTaskAsyncEnumerable<TSource>, selector:Func<TSource, Int32?>, cancellationToken:CancellationToken) : UniTask<Int32?>
    + {static} SumAwaitAsync(source:IUniTaskAsyncEnumerable<TSource>, selector:Func<TSource, UniTask<Int32?>>, cancellationToken:CancellationToken) : UniTask<Int32?>
    + {static} SumAwaitWithCancellationAsync(source:IUniTaskAsyncEnumerable<TSource>, selector:Func<TSource, CancellationToken, UniTask<Int32?>>, cancellationToken:CancellationToken) : UniTask<Int32?>
    + {static} SumAsync(source:IUniTaskAsyncEnumerable<Int64?>, cancellationToken:CancellationToken) : UniTask<Int64?>
    + {static} SumAsync(source:IUniTaskAsyncEnumerable<TSource>, selector:Func<TSource, Int64?>, cancellationToken:CancellationToken) : UniTask<Int64?>
    + {static} SumAwaitAsync(source:IUniTaskAsyncEnumerable<TSource>, selector:Func<TSource, UniTask<Int64?>>, cancellationToken:CancellationToken) : UniTask<Int64?>
    + {static} SumAwaitWithCancellationAsync(source:IUniTaskAsyncEnumerable<TSource>, selector:Func<TSource, CancellationToken, UniTask<Int64?>>, cancellationToken:CancellationToken) : UniTask<Int64?>
    + {static} SumAsync(source:IUniTaskAsyncEnumerable<Single?>, cancellationToken:CancellationToken) : UniTask<Single?>
    + {static} SumAsync(source:IUniTaskAsyncEnumerable<TSource>, selector:Func<TSource, Single?>, cancellationToken:CancellationToken) : UniTask<Single?>
    + {static} SumAwaitAsync(source:IUniTaskAsyncEnumerable<TSource>, selector:Func<TSource, UniTask<Single?>>, cancellationToken:CancellationToken) : UniTask<Single?>
    + {static} SumAwaitWithCancellationAsync(source:IUniTaskAsyncEnumerable<TSource>, selector:Func<TSource, CancellationToken, UniTask<Single?>>, cancellationToken:CancellationToken) : UniTask<Single?>
    + {static} SumAsync(source:IUniTaskAsyncEnumerable<Double?>, cancellationToken:CancellationToken) : UniTask<Double?>
    + {static} SumAsync(source:IUniTaskAsyncEnumerable<TSource>, selector:Func<TSource, Double?>, cancellationToken:CancellationToken) : UniTask<Double?>
    + {static} SumAwaitAsync(source:IUniTaskAsyncEnumerable<TSource>, selector:Func<TSource, UniTask<Double?>>, cancellationToken:CancellationToken) : UniTask<Double?>
    + {static} SumAwaitWithCancellationAsync(source:IUniTaskAsyncEnumerable<TSource>, selector:Func<TSource, CancellationToken, UniTask<Double?>>, cancellationToken:CancellationToken) : UniTask<Double?>
    + {static} SumAsync(source:IUniTaskAsyncEnumerable<Decimal?>, cancellationToken:CancellationToken) : UniTask<Decimal?>
    + {static} SumAsync(source:IUniTaskAsyncEnumerable<TSource>, selector:Func<TSource, Decimal?>, cancellationToken:CancellationToken) : UniTask<Decimal?>
    + {static} SumAwaitAsync(source:IUniTaskAsyncEnumerable<TSource>, selector:Func<TSource, UniTask<Decimal?>>, cancellationToken:CancellationToken) : UniTask<Decimal?>
    + {static} SumAwaitWithCancellationAsync(source:IUniTaskAsyncEnumerable<TSource>, selector:Func<TSource, CancellationToken, UniTask<Decimal?>>, cancellationToken:CancellationToken) : UniTask<Decimal?>
}
class Sum <<static>> {
    + {static} <<async>> SumAsync(source:IUniTaskAsyncEnumerable<Int32>, cancellationToken:CancellationToken) : UniTask<Int32>
    + {static} <<async>> SumAsync(source:IUniTaskAsyncEnumerable<TSource>, selector:Func<TSource, Int32>, cancellationToken:CancellationToken) : UniTask<Int32>
    + {static} <<async>> SumAwaitAsync(source:IUniTaskAsyncEnumerable<TSource>, selector:Func<TSource, UniTask<Int32>>, cancellationToken:CancellationToken) : UniTask<Int32>
    + {static} <<async>> SumAwaitWithCancellationAsync(source:IUniTaskAsyncEnumerable<TSource>, selector:Func<TSource, CancellationToken, UniTask<Int32>>, cancellationToken:CancellationToken) : UniTask<Int32>
    + {static} <<async>> SumAsync(source:IUniTaskAsyncEnumerable<Int64>, cancellationToken:CancellationToken) : UniTask<Int64>
    + {static} <<async>> SumAsync(source:IUniTaskAsyncEnumerable<TSource>, selector:Func<TSource, Int64>, cancellationToken:CancellationToken) : UniTask<Int64>
    + {static} <<async>> SumAwaitAsync(source:IUniTaskAsyncEnumerable<TSource>, selector:Func<TSource, UniTask<Int64>>, cancellationToken:CancellationToken) : UniTask<Int64>
    + {static} <<async>> SumAwaitWithCancellationAsync(source:IUniTaskAsyncEnumerable<TSource>, selector:Func<TSource, CancellationToken, UniTask<Int64>>, cancellationToken:CancellationToken) : UniTask<Int64>
    + {static} <<async>> SumAsync(source:IUniTaskAsyncEnumerable<Single>, cancellationToken:CancellationToken) : UniTask<Single>
    + {static} <<async>> SumAsync(source:IUniTaskAsyncEnumerable<TSource>, selector:Func<TSource, Single>, cancellationToken:CancellationToken) : UniTask<Single>
    + {static} <<async>> SumAwaitAsync(source:IUniTaskAsyncEnumerable<TSource>, selector:Func<TSource, UniTask<Single>>, cancellationToken:CancellationToken) : UniTask<Single>
    + {static} <<async>> SumAwaitWithCancellationAsync(source:IUniTaskAsyncEnumerable<TSource>, selector:Func<TSource, CancellationToken, UniTask<Single>>, cancellationToken:CancellationToken) : UniTask<Single>
    + {static} <<async>> SumAsync(source:IUniTaskAsyncEnumerable<Double>, cancellationToken:CancellationToken) : UniTask<Double>
    + {static} <<async>> SumAsync(source:IUniTaskAsyncEnumerable<TSource>, selector:Func<TSource, Double>, cancellationToken:CancellationToken) : UniTask<Double>
    + {static} <<async>> SumAwaitAsync(source:IUniTaskAsyncEnumerable<TSource>, selector:Func<TSource, UniTask<Double>>, cancellationToken:CancellationToken) : UniTask<Double>
    + {static} <<async>> SumAwaitWithCancellationAsync(source:IUniTaskAsyncEnumerable<TSource>, selector:Func<TSource, CancellationToken, UniTask<Double>>, cancellationToken:CancellationToken) : UniTask<Double>
    + {static} <<async>> SumAsync(source:IUniTaskAsyncEnumerable<Decimal>, cancellationToken:CancellationToken) : UniTask<Decimal>
    + {static} <<async>> SumAsync(source:IUniTaskAsyncEnumerable<TSource>, selector:Func<TSource, Decimal>, cancellationToken:CancellationToken) : UniTask<Decimal>
    + {static} <<async>> SumAwaitAsync(source:IUniTaskAsyncEnumerable<TSource>, selector:Func<TSource, UniTask<Decimal>>, cancellationToken:CancellationToken) : UniTask<Decimal>
    + {static} <<async>> SumAwaitWithCancellationAsync(source:IUniTaskAsyncEnumerable<TSource>, selector:Func<TSource, CancellationToken, UniTask<Decimal>>, cancellationToken:CancellationToken) : UniTask<Decimal>
    + {static} <<async>> SumAsync(source:IUniTaskAsyncEnumerable<Int32?>, cancellationToken:CancellationToken) : UniTask<Int32?>
    + {static} <<async>> SumAsync(source:IUniTaskAsyncEnumerable<TSource>, selector:Func<TSource, Int32?>, cancellationToken:CancellationToken) : UniTask<Int32?>
    + {static} <<async>> SumAwaitAsync(source:IUniTaskAsyncEnumerable<TSource>, selector:Func<TSource, UniTask<Int32?>>, cancellationToken:CancellationToken) : UniTask<Int32?>
    + {static} <<async>> SumAwaitWithCancellationAsync(source:IUniTaskAsyncEnumerable<TSource>, selector:Func<TSource, CancellationToken, UniTask<Int32?>>, cancellationToken:CancellationToken) : UniTask<Int32?>
    + {static} <<async>> SumAsync(source:IUniTaskAsyncEnumerable<Int64?>, cancellationToken:CancellationToken) : UniTask<Int64?>
    + {static} <<async>> SumAsync(source:IUniTaskAsyncEnumerable<TSource>, selector:Func<TSource, Int64?>, cancellationToken:CancellationToken) : UniTask<Int64?>
    + {static} <<async>> SumAwaitAsync(source:IUniTaskAsyncEnumerable<TSource>, selector:Func<TSource, UniTask<Int64?>>, cancellationToken:CancellationToken) : UniTask<Int64?>
    + {static} <<async>> SumAwaitWithCancellationAsync(source:IUniTaskAsyncEnumerable<TSource>, selector:Func<TSource, CancellationToken, UniTask<Int64?>>, cancellationToken:CancellationToken) : UniTask<Int64?>
    + {static} <<async>> SumAsync(source:IUniTaskAsyncEnumerable<Single?>, cancellationToken:CancellationToken) : UniTask<Single?>
    + {static} <<async>> SumAsync(source:IUniTaskAsyncEnumerable<TSource>, selector:Func<TSource, Single?>, cancellationToken:CancellationToken) : UniTask<Single?>
    + {static} <<async>> SumAwaitAsync(source:IUniTaskAsyncEnumerable<TSource>, selector:Func<TSource, UniTask<Single?>>, cancellationToken:CancellationToken) : UniTask<Single?>
    + {static} <<async>> SumAwaitWithCancellationAsync(source:IUniTaskAsyncEnumerable<TSource>, selector:Func<TSource, CancellationToken, UniTask<Single?>>, cancellationToken:CancellationToken) : UniTask<Single?>
    + {static} <<async>> SumAsync(source:IUniTaskAsyncEnumerable<Double?>, cancellationToken:CancellationToken) : UniTask<Double?>
    + {static} <<async>> SumAsync(source:IUniTaskAsyncEnumerable<TSource>, selector:Func<TSource, Double?>, cancellationToken:CancellationToken) : UniTask<Double?>
    + {static} <<async>> SumAwaitAsync(source:IUniTaskAsyncEnumerable<TSource>, selector:Func<TSource, UniTask<Double?>>, cancellationToken:CancellationToken) : UniTask<Double?>
    + {static} <<async>> SumAwaitWithCancellationAsync(source:IUniTaskAsyncEnumerable<TSource>, selector:Func<TSource, CancellationToken, UniTask<Double?>>, cancellationToken:CancellationToken) : UniTask<Double?>
    + {static} <<async>> SumAsync(source:IUniTaskAsyncEnumerable<Decimal?>, cancellationToken:CancellationToken) : UniTask<Decimal?>
    + {static} <<async>> SumAsync(source:IUniTaskAsyncEnumerable<TSource>, selector:Func<TSource, Decimal?>, cancellationToken:CancellationToken) : UniTask<Decimal?>
    + {static} <<async>> SumAwaitAsync(source:IUniTaskAsyncEnumerable<TSource>, selector:Func<TSource, UniTask<Decimal?>>, cancellationToken:CancellationToken) : UniTask<Decimal?>
    + {static} <<async>> SumAwaitWithCancellationAsync(source:IUniTaskAsyncEnumerable<TSource>, selector:Func<TSource, CancellationToken, UniTask<Decimal?>>, cancellationToken:CancellationToken) : UniTask<Decimal?>
}
class UniTaskAsyncEnumerable <<static>> <<partial>> {
    + {static} Take(source:IUniTaskAsyncEnumerable<TSource>, count:Int32) : IUniTaskAsyncEnumerable<TSource>
}
class "Take`1"<TSource> <<sealed>> {
    + Take(source:IUniTaskAsyncEnumerable<TSource>, count:int)
    + GetAsyncEnumerator(cancellationToken:CancellationToken) : IUniTaskAsyncEnumerator<TSource>
}
class "IUniTaskAsyncEnumerable`1"<T> {
}
class _Take <<sealed>> {
    + _Take(source:IUniTaskAsyncEnumerable<TSource>, count:int, cancellationToken:CancellationToken)
    + MoveNextAsync() : UniTask<bool>
    + DisposeAsync() : UniTask
}
class "IUniTaskAsyncEnumerator`1"<T> {
}
"IUniTaskAsyncEnumerable`1" "<TSource>" <|- - "Take`1"
"Take`1" +- - _Take
MoveNextSource <|- - _Take
"IUniTaskAsyncEnumerator`1" "<TSource>" <|- - _Take
_Take - -> "Current" TSource
class UniTaskAsyncEnumerable <<static>> <<partial>> {
    + {static} TakeLast(source:IUniTaskAsyncEnumerable<TSource>, count:Int32) : IUniTaskAsyncEnumerable<TSource>
}
class "TakeLast`1"<TSource> <<sealed>> {
    + TakeLast(source:IUniTaskAsyncEnumerable<TSource>, count:int)
    + GetAsyncEnumerator(cancellationToken:CancellationToken) : IUniTaskAsyncEnumerator<TSource>
}
class "IUniTaskAsyncEnumerable`1"<T> {
}
class _TakeLast <<sealed>> {
    + _TakeLast(source:IUniTaskAsyncEnumerable<TSource>, count:int, cancellationToken:CancellationToken)
    + MoveNextAsync() : UniTask<bool>
    + DisposeAsync() : UniTask
}
class "IUniTaskAsyncEnumerator`1"<T> {
}
"IUniTaskAsyncEnumerable`1" "<TSource>" <|- - "TakeLast`1"
"TakeLast`1" +- - _TakeLast
MoveNextSource <|- - _TakeLast
"IUniTaskAsyncEnumerator`1" "<TSource>" <|- - _TakeLast
_TakeLast - -> "Current" TSource
class UniTaskAsyncEnumerable <<static>> <<partial>> {
    + {static} TakeUntil(source:IUniTaskAsyncEnumerable<TSource>, other:UniTask) : IUniTaskAsyncEnumerable<TSource>
    + {static} TakeUntil(source:IUniTaskAsyncEnumerable<TSource>, other:Func<CancellationToken, UniTask>) : IUniTaskAsyncEnumerable<TSource>
}
class "TakeUntil`1"<TSource> <<sealed>> {
    + TakeUntil(source:IUniTaskAsyncEnumerable<TSource>, other:UniTask, other2:Func<CancellationToken, UniTask>)
    + GetAsyncEnumerator(cancellationToken:CancellationToken) : IUniTaskAsyncEnumerator<TSource>
}
class "IUniTaskAsyncEnumerable`1"<T> {
}
class _TakeUntil <<sealed>> {
    + _TakeUntil(source:IUniTaskAsyncEnumerable<TSource>, other:UniTask, cancellationToken1:CancellationToken)
    + MoveNextAsync() : UniTask<bool>
    + DisposeAsync() : UniTask
}
class "IUniTaskAsyncEnumerator`1"<T> {
}
"IUniTaskAsyncEnumerable`1" "<TSource>" <|- - "TakeUntil`1"
"TakeUntil`1" +- - _TakeUntil
MoveNextSource <|- - _TakeUntil
"IUniTaskAsyncEnumerator`1" "<TSource>" <|- - _TakeUntil
_TakeUntil - -> "Current" TSource
class UniTaskAsyncEnumerable <<static>> <<partial>> {
    + {static} TakeUntilCanceled(source:IUniTaskAsyncEnumerable<TSource>, cancellationToken:CancellationToken) : IUniTaskAsyncEnumerable<TSource>
}
class "TakeUntilCanceled`1"<TSource> <<sealed>> {
    + TakeUntilCanceled(source:IUniTaskAsyncEnumerable<TSource>, cancellationToken:CancellationToken)
    + GetAsyncEnumerator(cancellationToken:CancellationToken) : IUniTaskAsyncEnumerator<TSource>
}
class "IUniTaskAsyncEnumerable`1"<T> {
}
class _TakeUntilCanceled <<sealed>> {
    + _TakeUntilCanceled(source:IUniTaskAsyncEnumerable<TSource>, cancellationToken1:CancellationToken, cancellationToken2:CancellationToken)
    + MoveNextAsync() : UniTask<bool>
    + DisposeAsync() : UniTask
}
class "IUniTaskAsyncEnumerator`1"<T> {
}
"IUniTaskAsyncEnumerable`1" "<TSource>" <|- - "TakeUntilCanceled`1"
"TakeUntilCanceled`1" +- - _TakeUntilCanceled
MoveNextSource <|- - _TakeUntilCanceled
"IUniTaskAsyncEnumerator`1" "<TSource>" <|- - _TakeUntilCanceled
_TakeUntilCanceled - -> "Current" TSource
class UniTaskAsyncEnumerable <<static>> <<partial>> {
    + {static} TakeWhile(source:IUniTaskAsyncEnumerable<TSource>, predicate:Func<TSource, Boolean>) : IUniTaskAsyncEnumerable<TSource>
    + {static} TakeWhile(source:IUniTaskAsyncEnumerable<TSource>, predicate:Func<TSource, Int32, Boolean>) : IUniTaskAsyncEnumerable<TSource>
    + {static} TakeWhileAwait(source:IUniTaskAsyncEnumerable<TSource>, predicate:Func<TSource, UniTask<Boolean>>) : IUniTaskAsyncEnumerable<TSource>
    + {static} TakeWhileAwait(source:IUniTaskAsyncEnumerable<TSource>, predicate:Func<TSource, Int32, UniTask<Boolean>>) : IUniTaskAsyncEnumerable<TSource>
    + {static} TakeWhileAwaitWithCancellation(source:IUniTaskAsyncEnumerable<TSource>, predicate:Func<TSource, CancellationToken, UniTask<Boolean>>) : IUniTaskAsyncEnumerable<TSource>
    + {static} TakeWhileAwaitWithCancellation(source:IUniTaskAsyncEnumerable<TSource>, predicate:Func<TSource, Int32, CancellationToken, UniTask<Boolean>>) : IUniTaskAsyncEnumerable<TSource>
}
class "TakeWhile`1"<TSource> <<sealed>> {
    + TakeWhile(source:IUniTaskAsyncEnumerable<TSource>, predicate:Func<TSource, bool>)
    + GetAsyncEnumerator(cancellationToken:CancellationToken) : IUniTaskAsyncEnumerator<TSource>
}
class "TakeWhileInt`1"<TSource> <<sealed>> {
    + TakeWhileInt(source:IUniTaskAsyncEnumerable<TSource>, predicate:Func<TSource, int, bool>)
    + GetAsyncEnumerator(cancellationToken:CancellationToken) : IUniTaskAsyncEnumerator<TSource>
}
class "TakeWhileAwait`1"<TSource> <<sealed>> {
    + TakeWhileAwait(source:IUniTaskAsyncEnumerable<TSource>, predicate:Func<TSource, UniTask<bool>>)
    + GetAsyncEnumerator(cancellationToken:CancellationToken) : IUniTaskAsyncEnumerator<TSource>
}
class "TakeWhileIntAwait`1"<TSource> <<sealed>> {
    + TakeWhileIntAwait(source:IUniTaskAsyncEnumerable<TSource>, predicate:Func<TSource, int, UniTask<bool>>)
    + GetAsyncEnumerator(cancellationToken:CancellationToken) : IUniTaskAsyncEnumerator<TSource>
}
class "TakeWhileAwaitWithCancellation`1"<TSource> <<sealed>> {
    + TakeWhileAwaitWithCancellation(source:IUniTaskAsyncEnumerable<TSource>, predicate:Func<TSource, CancellationToken, UniTask<bool>>)
    + GetAsyncEnumerator(cancellationToken:CancellationToken) : IUniTaskAsyncEnumerator<TSource>
}
class "TakeWhileIntAwaitWithCancellation`1"<TSource> <<sealed>> {
    + TakeWhileIntAwaitWithCancellation(source:IUniTaskAsyncEnumerable<TSource>, predicate:Func<TSource, int, CancellationToken, UniTask<bool>>)
    + GetAsyncEnumerator(cancellationToken:CancellationToken) : IUniTaskAsyncEnumerator<TSource>
}
class "IUniTaskAsyncEnumerable`1"<T> {
}
class _TakeWhile {
    + _TakeWhile(source:IUniTaskAsyncEnumerable<TSource>, predicate:Func<TSource, bool>, cancellationToken:CancellationToken)
}
class _TakeWhileInt {
    + _TakeWhileInt(source:IUniTaskAsyncEnumerable<TSource>, predicate:Func<TSource, int, bool>, cancellationToken:CancellationToken)
}
class _TakeWhileAwait {
    + _TakeWhileAwait(source:IUniTaskAsyncEnumerable<TSource>, predicate:Func<TSource, UniTask<bool>>, cancellationToken:CancellationToken)
}
class _TakeWhileIntAwait {
    + _TakeWhileIntAwait(source:IUniTaskAsyncEnumerable<TSource>, predicate:Func<TSource, int, UniTask<bool>>, cancellationToken:CancellationToken)
}
class _TakeWhileAwaitWithCancellation {
    + _TakeWhileAwaitWithCancellation(source:IUniTaskAsyncEnumerable<TSource>, predicate:Func<TSource, CancellationToken, UniTask<bool>>, cancellationToken:CancellationToken)
}
class _TakeWhileIntAwaitWithCancellation {
    + _TakeWhileIntAwaitWithCancellation(source:IUniTaskAsyncEnumerable<TSource>, predicate:Func<TSource, int, CancellationToken, UniTask<bool>>, cancellationToken:CancellationToken)
}
class "AsyncEnumeratorBase`2"<T1,T2> {
}
class "AsyncEnumeratorAwaitSelectorBase`3"<T1,T2,T3> {
}
"IUniTaskAsyncEnumerable`1" "<TSource>" <|- - "TakeWhile`1"
"IUniTaskAsyncEnumerable`1" "<TSource>" <|- - "TakeWhileInt`1"
"IUniTaskAsyncEnumerable`1" "<TSource>" <|- - "TakeWhileAwait`1"
"IUniTaskAsyncEnumerable`1" "<TSource>" <|- - "TakeWhileIntAwait`1"
"IUniTaskAsyncEnumerable`1" "<TSource>" <|- - "TakeWhileAwaitWithCancellation`1"
"IUniTaskAsyncEnumerable`1" "<TSource>" <|- - "TakeWhileIntAwaitWithCancellation`1"
"TakeWhile`1" +- - _TakeWhile
"AsyncEnumeratorBase`2" "<TSource,TSource>" <|- - _TakeWhile
"TakeWhileInt`1" +- - _TakeWhileInt
"AsyncEnumeratorBase`2" "<TSource,TSource>" <|- - _TakeWhileInt
"TakeWhileAwait`1" +- - _TakeWhileAwait
"AsyncEnumeratorAwaitSelectorBase`3" "<TSource,TSource,bool>" <|- - _TakeWhileAwait
"TakeWhileIntAwait`1" +- - _TakeWhileIntAwait
"AsyncEnumeratorAwaitSelectorBase`3" "<TSource,TSource,bool>" <|- - _TakeWhileIntAwait
"TakeWhileAwaitWithCancellation`1" +- - _TakeWhileAwaitWithCancellation
"AsyncEnumeratorAwaitSelectorBase`3" "<TSource,TSource,bool>" <|- - _TakeWhileAwaitWithCancellation
"TakeWhileIntAwaitWithCancellation`1" +- - _TakeWhileIntAwaitWithCancellation
"AsyncEnumeratorAwaitSelectorBase`3" "<TSource,TSource,bool>" <|- - _TakeWhileIntAwaitWithCancellation
class UniTaskAsyncEnumerable <<static>> <<partial>> {
    + {static} Throw(exception:Exception) : IUniTaskAsyncEnumerable<TValue>
}
class "Throw`1"<TValue> {
    + Throw(exception:Exception)
    + GetAsyncEnumerator(cancellationToken:CancellationToken) : IUniTaskAsyncEnumerator<TValue>
}
class "IUniTaskAsyncEnumerable`1"<T> {
}
class _Throw {
    + _Throw(exception:Exception, cancellationToken:CancellationToken)
    + MoveNextAsync() : UniTask<bool>
    + DisposeAsync() : UniTask
}
class "IUniTaskAsyncEnumerator`1"<T> {
}
"IUniTaskAsyncEnumerable`1" "<TValue>" <|- - "Throw`1"
"Throw`1" +- - _Throw
"IUniTaskAsyncEnumerator`1" "<TValue>" <|- - _Throw
_Throw - -> "Current" TValue
class UniTaskAsyncEnumerable <<static>> <<partial>> {
    + {static} ToArrayAsync(source:IUniTaskAsyncEnumerable<TSource>, cancellationToken:CancellationToken) : UniTask<TSource[]>
}
class ToArray <<static>> {
}
class UniTaskAsyncEnumerable <<static>> <<partial>> {
    + {static} ToDictionaryAsync(source:IUniTaskAsyncEnumerable<TSource>, keySelector:Func<TSource, TKey>, cancellationToken:CancellationToken) : UniTask<Dictionary<TKey, TSource>>
    + {static} ToDictionaryAsync(source:IUniTaskAsyncEnumerable<TSource>, keySelector:Func<TSource, TKey>, comparer:IEqualityComparer<TKey>, cancellationToken:CancellationToken) : UniTask<Dictionary<TKey, TSource>>
    + {static} ToDictionaryAsync(source:IUniTaskAsyncEnumerable<TSource>, keySelector:Func<TSource, TKey>, elementSelector:Func<TSource, TElement>, cancellationToken:CancellationToken) : UniTask<Dictionary<TKey, TElement>>
    + {static} ToDictionaryAsync(source:IUniTaskAsyncEnumerable<TSource>, keySelector:Func<TSource, TKey>, elementSelector:Func<TSource, TElement>, comparer:IEqualityComparer<TKey>, cancellationToken:CancellationToken) : UniTask<Dictionary<TKey, TElement>>
    + {static} ToDictionaryAwaitAsync(source:IUniTaskAsyncEnumerable<TSource>, keySelector:Func<TSource, UniTask<TKey>>, cancellationToken:CancellationToken) : UniTask<Dictionary<TKey, TSource>>
    + {static} ToDictionaryAwaitAsync(source:IUniTaskAsyncEnumerable<TSource>, keySelector:Func<TSource, UniTask<TKey>>, comparer:IEqualityComparer<TKey>, cancellationToken:CancellationToken) : UniTask<Dictionary<TKey, TSource>>
    + {static} ToDictionaryAwaitAsync(source:IUniTaskAsyncEnumerable<TSource>, keySelector:Func<TSource, UniTask<TKey>>, elementSelector:Func<TSource, UniTask<TElement>>, cancellationToken:CancellationToken) : UniTask<Dictionary<TKey, TElement>>
    + {static} ToDictionaryAwaitAsync(source:IUniTaskAsyncEnumerable<TSource>, keySelector:Func<TSource, UniTask<TKey>>, elementSelector:Func<TSource, UniTask<TElement>>, comparer:IEqualityComparer<TKey>, cancellationToken:CancellationToken) : UniTask<Dictionary<TKey, TElement>>
    + {static} ToDictionaryAwaitWithCancellationAsync(source:IUniTaskAsyncEnumerable<TSource>, keySelector:Func<TSource, CancellationToken, UniTask<TKey>>, cancellationToken:CancellationToken) : UniTask<Dictionary<TKey, TSource>>
    + {static} ToDictionaryAwaitWithCancellationAsync(source:IUniTaskAsyncEnumerable<TSource>, keySelector:Func<TSource, CancellationToken, UniTask<TKey>>, comparer:IEqualityComparer<TKey>, cancellationToken:CancellationToken) : UniTask<Dictionary<TKey, TSource>>
    + {static} ToDictionaryAwaitWithCancellationAsync(source:IUniTaskAsyncEnumerable<TSource>, keySelector:Func<TSource, CancellationToken, UniTask<TKey>>, elementSelector:Func<TSource, CancellationToken, UniTask<TElement>>, cancellationToken:CancellationToken) : UniTask<Dictionary<TKey, TElement>>
    + {static} ToDictionaryAwaitWithCancellationAsync(source:IUniTaskAsyncEnumerable<TSource>, keySelector:Func<TSource, CancellationToken, UniTask<TKey>>, elementSelector:Func<TSource, CancellationToken, UniTask<TElement>>, comparer:IEqualityComparer<TKey>, cancellationToken:CancellationToken) : UniTask<Dictionary<TKey, TElement>>
}
class ToDictionary <<static>> {
}
class UniTaskAsyncEnumerable <<static>> <<partial>> {
    + {static} ToHashSetAsync(source:IUniTaskAsyncEnumerable<TSource>, cancellationToken:CancellationToken) : UniTask<HashSet<TSource>>
    + {static} ToHashSetAsync(source:IUniTaskAsyncEnumerable<TSource>, comparer:IEqualityComparer<TSource>, cancellationToken:CancellationToken) : UniTask<HashSet<TSource>>
}
class ToHashSet <<static>> {
}
class UniTaskAsyncEnumerable <<static>> <<partial>> {
    + {static} ToListAsync(source:IUniTaskAsyncEnumerable<TSource>, cancellationToken:CancellationToken) : UniTask<List<TSource>>
}
class ToList <<static>> {
}
class UniTaskAsyncEnumerable <<static>> <<partial>> {
    + {static} ToLookupAsync(source:IUniTaskAsyncEnumerable<TSource>, keySelector:Func<TSource, TKey>, cancellationToken:CancellationToken) : UniTask<ILookup<TKey, TSource>>
    + {static} ToLookupAsync(source:IUniTaskAsyncEnumerable<TSource>, keySelector:Func<TSource, TKey>, comparer:IEqualityComparer<TKey>, cancellationToken:CancellationToken) : UniTask<ILookup<TKey, TSource>>
    + {static} ToLookupAsync(source:IUniTaskAsyncEnumerable<TSource>, keySelector:Func<TSource, TKey>, elementSelector:Func<TSource, TElement>, cancellationToken:CancellationToken) : UniTask<ILookup<TKey, TElement>>
    + {static} ToLookupAsync(source:IUniTaskAsyncEnumerable<TSource>, keySelector:Func<TSource, TKey>, elementSelector:Func<TSource, TElement>, comparer:IEqualityComparer<TKey>, cancellationToken:CancellationToken) : UniTask<ILookup<TKey, TElement>>
    + {static} ToLookupAwaitAsync(source:IUniTaskAsyncEnumerable<TSource>, keySelector:Func<TSource, UniTask<TKey>>, cancellationToken:CancellationToken) : UniTask<ILookup<TKey, TSource>>
    + {static} ToLookupAwaitAsync(source:IUniTaskAsyncEnumerable<TSource>, keySelector:Func<TSource, UniTask<TKey>>, comparer:IEqualityComparer<TKey>, cancellationToken:CancellationToken) : UniTask<ILookup<TKey, TSource>>
    + {static} ToLookupAwaitAsync(source:IUniTaskAsyncEnumerable<TSource>, keySelector:Func<TSource, UniTask<TKey>>, elementSelector:Func<TSource, UniTask<TElement>>, cancellationToken:CancellationToken) : UniTask<ILookup<TKey, TElement>>
    + {static} ToLookupAwaitAsync(source:IUniTaskAsyncEnumerable<TSource>, keySelector:Func<TSource, UniTask<TKey>>, elementSelector:Func<TSource, UniTask<TElement>>, comparer:IEqualityComparer<TKey>, cancellationToken:CancellationToken) : UniTask<ILookup<TKey, TElement>>
    + {static} ToLookupAwaitWithCancellationAsync(source:IUniTaskAsyncEnumerable<TSource>, keySelector:Func<TSource, CancellationToken, UniTask<TKey>>, cancellationToken:CancellationToken) : UniTask<ILookup<TKey, TSource>>
    + {static} ToLookupAwaitWithCancellationAsync(source:IUniTaskAsyncEnumerable<TSource>, keySelector:Func<TSource, CancellationToken, UniTask<TKey>>, comparer:IEqualityComparer<TKey>, cancellationToken:CancellationToken) : UniTask<ILookup<TKey, TSource>>
    + {static} ToLookupAwaitWithCancellationAsync(source:IUniTaskAsyncEnumerable<TSource>, keySelector:Func<TSource, CancellationToken, UniTask<TKey>>, elementSelector:Func<TSource, CancellationToken, UniTask<TElement>>, cancellationToken:CancellationToken) : UniTask<ILookup<TKey, TElement>>
    + {static} ToLookupAwaitWithCancellationAsync(source:IUniTaskAsyncEnumerable<TSource>, keySelector:Func<TSource, CancellationToken, UniTask<TKey>>, elementSelector:Func<TSource, CancellationToken, UniTask<TElement>>, comparer:IEqualityComparer<TKey>, cancellationToken:CancellationToken) : UniTask<ILookup<TKey, TElement>>
}
class ToLookup <<static>> {
}
class "Lookup`2"<TKey,TElement> {
    + {static} CreateEmpty() : Lookup<TKey, TElement>
    + {static} Create(source:ArraySegment<TElement>, keySelector:Func<TElement, TKey>, comparer:IEqualityComparer<TKey>) : Lookup<TKey, TElement>
    + {static} Create(source:ArraySegment<TSource>, keySelector:Func<TSource, TKey>, elementSelector:Func<TSource, TElement>, comparer:IEqualityComparer<TKey>) : Lookup<TKey, TElement>
    + {static} <<async>> CreateAsync(source:ArraySegment<TElement>, keySelector:Func<TElement, UniTask<TKey>>, comparer:IEqualityComparer<TKey>) : UniTask<Lookup<TKey, TElement>>
    + {static} <<async>> CreateAsync(source:ArraySegment<TSource>, keySelector:Func<TSource, UniTask<TKey>>, elementSelector:Func<TSource, UniTask<TElement>>, comparer:IEqualityComparer<TKey>) : UniTask<Lookup<TKey, TElement>>
    + {static} <<async>> CreateAsync(source:ArraySegment<TElement>, keySelector:Func<TElement, CancellationToken, UniTask<TKey>>, comparer:IEqualityComparer<TKey>, cancellationToken:CancellationToken) : UniTask<Lookup<TKey, TElement>>
    + {static} <<async>> CreateAsync(source:ArraySegment<TSource>, keySelector:Func<TSource, CancellationToken, UniTask<TKey>>, elementSelector:Func<TSource, CancellationToken, UniTask<TElement>>, comparer:IEqualityComparer<TKey>, cancellationToken:CancellationToken) : UniTask<Lookup<TKey, TElement>>
    + Count : int <<get>>
    + Contains(key:TKey) : bool
    + GetEnumerator() : IEnumerator<IGrouping<TKey, TElement>>
}
class "Grouping`2"<TKey,TElement> {
    + Key : TKey <<get>>
    + Grouping(key:TKey)
    + Add(value:TElement) : void
    + GetEnumerator() : IEnumerator<TElement>
    + GetAsyncEnumerator(cancellationToken:CancellationToken) : IUniTaskAsyncEnumerator<TElement>
    + <<override>> ToString() : string
}
class "ILookup`2"<T1,T2> {
}
class "IEnumerable`1"<T> {
}
class "Empty`1"<T> {
}
class "IGrouping`2"<T1,T2> {
}
ToLookup +- - "Lookup`2"
"ILookup`2" "<TKey,TElement>" <|- - "Lookup`2"
ToLookup +- - "Grouping`2"
"IGrouping`2" "<TKey,TElement>" <|- - "Grouping`2"
class UniTaskAsyncEnumerable <<static>> <<partial>> {
    + {static} ToObservable(source:IUniTaskAsyncEnumerable<TSource>) : IObservable<TSource>
}
class "ToObservable`1"<T> <<sealed>> {
    + ToObservable(source:IUniTaskAsyncEnumerable<T>)
    + Subscribe(observer:IObserver<T>) : IDisposable
}
class "IObservable`1"<T> {
}
class CancellationTokenDisposable <<sealed>> {
    + Dispose() : void
}
"IObservable`1" "<T>" <|- - "ToObservable`1"
"ToObservable`1" +- - CancellationTokenDisposable
IDisposable <|- - CancellationTokenDisposable
CancellationTokenDisposable - -> "Token" CancellationToken
class UniTaskAsyncEnumerable <<static>> <<partial>> {
    + {static} ToUniTaskAsyncEnumerable(source:IEnumerable<TSource>) : IUniTaskAsyncEnumerable<TSource>
    + {static} ToUniTaskAsyncEnumerable(source:Task<TSource>) : IUniTaskAsyncEnumerable<TSource>
    + {static} ToUniTaskAsyncEnumerable(source:UniTask<TSource>) : IUniTaskAsyncEnumerable<TSource>
    + {static} ToUniTaskAsyncEnumerable(source:IObservable<TSource>) : IUniTaskAsyncEnumerable<TSource>
}
class "ToUniTaskAsyncEnumerable`1"<T> {
    + ToUniTaskAsyncEnumerable(source:IEnumerable<T>)
    + GetAsyncEnumerator(cancellationToken:CancellationToken) : IUniTaskAsyncEnumerator<T>
}
class "ToUniTaskAsyncEnumerableTask`1"<T> {
    + ToUniTaskAsyncEnumerableTask(source:Task<T>)
    + GetAsyncEnumerator(cancellationToken:CancellationToken) : IUniTaskAsyncEnumerator<T>
}
class "ToUniTaskAsyncEnumerableUniTask`1"<T> {
    + ToUniTaskAsyncEnumerableUniTask(source:UniTask<T>)
    + GetAsyncEnumerator(cancellationToken:CancellationToken) : IUniTaskAsyncEnumerator<T>
}
class "ToUniTaskAsyncEnumerableObservable`1"<T> {
    + ToUniTaskAsyncEnumerableObservable(source:IObservable<T>)
    + GetAsyncEnumerator(cancellationToken:CancellationToken) : IUniTaskAsyncEnumerator<T>
}
class "IUniTaskAsyncEnumerable`1"<T> {
}
class _ToUniTaskAsyncEnumerable {
    + _ToUniTaskAsyncEnumerable(source:IEnumerable<T>, cancellationToken:CancellationToken)
    + MoveNextAsync() : UniTask<bool>
    + DisposeAsync() : UniTask
}
class _ToUniTaskAsyncEnumerableTask {
    + _ToUniTaskAsyncEnumerableTask(source:Task<T>, cancellationToken:CancellationToken)
    + <<async>> MoveNextAsync() : UniTask<bool>
    + DisposeAsync() : UniTask
}
class _ToUniTaskAsyncEnumerableUniTask {
    + _ToUniTaskAsyncEnumerableUniTask(source:UniTask<T>, cancellationToken:CancellationToken)
    + <<async>> MoveNextAsync() : UniTask<bool>
    + DisposeAsync() : UniTask
}
class _ToUniTaskAsyncEnumerableObservable {
    + _ToUniTaskAsyncEnumerableObservable(source:IObservable<T>, cancellationToken:CancellationToken)
    + MoveNextAsync() : UniTask<bool>
    + DisposeAsync() : UniTask
    + OnCompleted() : void
    + OnError(error:Exception) : void
    + OnNext(value:T) : void
}
class "IUniTaskAsyncEnumerator`1"<T> {
}
class "IObserver`1"<T> {
}
"IUniTaskAsyncEnumerable`1" "<T>" <|- - "ToUniTaskAsyncEnumerable`1"
"IUniTaskAsyncEnumerable`1" "<T>" <|- - "ToUniTaskAsyncEnumerableTask`1"
"IUniTaskAsyncEnumerable`1" "<T>" <|- - "ToUniTaskAsyncEnumerableUniTask`1"
"IUniTaskAsyncEnumerable`1" "<T>" <|- - "ToUniTaskAsyncEnumerableObservable`1"
"ToUniTaskAsyncEnumerable`1" +- - _ToUniTaskAsyncEnumerable
"IUniTaskAsyncEnumerator`1" "<T>" <|- - _ToUniTaskAsyncEnumerable
_ToUniTaskAsyncEnumerable - -> "Current" T
"ToUniTaskAsyncEnumerableTask`1" +- - _ToUniTaskAsyncEnumerableTask
"IUniTaskAsyncEnumerator`1" "<T>" <|- - _ToUniTaskAsyncEnumerableTask
_ToUniTaskAsyncEnumerableTask - -> "Current" T
"ToUniTaskAsyncEnumerableUniTask`1" +- - _ToUniTaskAsyncEnumerableUniTask
"IUniTaskAsyncEnumerator`1" "<T>" <|- - _ToUniTaskAsyncEnumerableUniTask
_ToUniTaskAsyncEnumerableUniTask - -> "Current" T
"ToUniTaskAsyncEnumerableObservable`1" +- - _ToUniTaskAsyncEnumerableObservable
MoveNextSource <|- - _ToUniTaskAsyncEnumerableObservable
"IUniTaskAsyncEnumerator`1" "<T>" <|- - _ToUniTaskAsyncEnumerableObservable
"IObserver`1" "<T>" <|- - _ToUniTaskAsyncEnumerableObservable
_ToUniTaskAsyncEnumerableObservable - -> "Current" T
class UniTaskAsyncEnumerable <<static>> <<partial>> {
    + {static} Union(first:IUniTaskAsyncEnumerable<TSource>, second:IUniTaskAsyncEnumerable<TSource>) : IUniTaskAsyncEnumerable<TSource>
    + {static} Union(first:IUniTaskAsyncEnumerable<TSource>, second:IUniTaskAsyncEnumerable<TSource>, comparer:IEqualityComparer<TSource>) : IUniTaskAsyncEnumerable<TSource>
}
class UniTaskAsyncEnumerable <<static>> <<partial>> {
    + {static} Where(source:IUniTaskAsyncEnumerable<TSource>, predicate:Func<TSource, Boolean>) : IUniTaskAsyncEnumerable<TSource>
    + {static} Where(source:IUniTaskAsyncEnumerable<TSource>, predicate:Func<TSource, Int32, Boolean>) : IUniTaskAsyncEnumerable<TSource>
    + {static} WhereAwait(source:IUniTaskAsyncEnumerable<TSource>, predicate:Func<TSource, UniTask<Boolean>>) : IUniTaskAsyncEnumerable<TSource>
    + {static} WhereAwait(source:IUniTaskAsyncEnumerable<TSource>, predicate:Func<TSource, Int32, UniTask<Boolean>>) : IUniTaskAsyncEnumerable<TSource>
    + {static} WhereAwaitWithCancellation(source:IUniTaskAsyncEnumerable<TSource>, predicate:Func<TSource, CancellationToken, UniTask<Boolean>>) : IUniTaskAsyncEnumerable<TSource>
    + {static} WhereAwaitWithCancellation(source:IUniTaskAsyncEnumerable<TSource>, predicate:Func<TSource, Int32, CancellationToken, UniTask<Boolean>>) : IUniTaskAsyncEnumerable<TSource>
}
class "Where`1"<TSource> <<sealed>> {
    + Where(source:IUniTaskAsyncEnumerable<TSource>, predicate:Func<TSource, bool>)
    + GetAsyncEnumerator(cancellationToken:CancellationToken) : IUniTaskAsyncEnumerator<TSource>
}
class "WhereInt`1"<TSource> <<sealed>> {
    + WhereInt(source:IUniTaskAsyncEnumerable<TSource>, predicate:Func<TSource, int, bool>)
    + GetAsyncEnumerator(cancellationToken:CancellationToken) : IUniTaskAsyncEnumerator<TSource>
}
class "WhereAwait`1"<TSource> <<sealed>> {
    + WhereAwait(source:IUniTaskAsyncEnumerable<TSource>, predicate:Func<TSource, UniTask<bool>>)
    + GetAsyncEnumerator(cancellationToken:CancellationToken) : IUniTaskAsyncEnumerator<TSource>
}
class "WhereIntAwait`1"<TSource> <<sealed>> {
    + WhereIntAwait(source:IUniTaskAsyncEnumerable<TSource>, predicate:Func<TSource, int, UniTask<bool>>)
    + GetAsyncEnumerator(cancellationToken:CancellationToken) : IUniTaskAsyncEnumerator<TSource>
}
class "WhereAwaitWithCancellation`1"<TSource> <<sealed>> {
    + WhereAwaitWithCancellation(source:IUniTaskAsyncEnumerable<TSource>, predicate:Func<TSource, CancellationToken, UniTask<bool>>)
    + GetAsyncEnumerator(cancellationToken:CancellationToken) : IUniTaskAsyncEnumerator<TSource>
}
class "WhereIntAwaitWithCancellation`1"<TSource> <<sealed>> {
    + WhereIntAwaitWithCancellation(source:IUniTaskAsyncEnumerable<TSource>, predicate:Func<TSource, int, CancellationToken, UniTask<bool>>)
    + GetAsyncEnumerator(cancellationToken:CancellationToken) : IUniTaskAsyncEnumerator<TSource>
}
class "IUniTaskAsyncEnumerable`1"<T> {
}
class _Where <<sealed>> {
    + _Where(source:IUniTaskAsyncEnumerable<TSource>, predicate:Func<TSource, bool>, cancellationToken:CancellationToken)
    + MoveNextAsync() : UniTask<bool>
    + DisposeAsync() : UniTask
}
class _Where <<sealed>> {
    + _Where(source:IUniTaskAsyncEnumerable<TSource>, predicate:Func<TSource, int, bool>, cancellationToken:CancellationToken)
    + MoveNextAsync() : UniTask<bool>
    + DisposeAsync() : UniTask
}
class _WhereAwait <<sealed>> {
    + _WhereAwait(source:IUniTaskAsyncEnumerable<TSource>, predicate:Func<TSource, UniTask<bool>>, cancellationToken:CancellationToken)
    + MoveNextAsync() : UniTask<bool>
    + DisposeAsync() : UniTask
}
class _WhereAwait <<sealed>> {
    + _WhereAwait(source:IUniTaskAsyncEnumerable<TSource>, predicate:Func<TSource, int, UniTask<bool>>, cancellationToken:CancellationToken)
    + MoveNextAsync() : UniTask<bool>
    + DisposeAsync() : UniTask
}
class _WhereAwaitWithCancellation <<sealed>> {
    + _WhereAwaitWithCancellation(source:IUniTaskAsyncEnumerable<TSource>, predicate:Func<TSource, CancellationToken, UniTask<bool>>, cancellationToken:CancellationToken)
    + MoveNextAsync() : UniTask<bool>
    + DisposeAsync() : UniTask
}
class _WhereAwaitWithCancellation <<sealed>> {
    + _WhereAwaitWithCancellation(source:IUniTaskAsyncEnumerable<TSource>, predicate:Func<TSource, int, CancellationToken, UniTask<bool>>, cancellationToken:CancellationToken)
    + MoveNextAsync() : UniTask<bool>
    + DisposeAsync() : UniTask
}
class "IUniTaskAsyncEnumerator`1"<T> {
}
"IUniTaskAsyncEnumerable`1" "<TSource>" <|- - "Where`1"
"IUniTaskAsyncEnumerable`1" "<TSource>" <|- - "WhereInt`1"
"IUniTaskAsyncEnumerable`1" "<TSource>" <|- - "WhereAwait`1"
"IUniTaskAsyncEnumerable`1" "<TSource>" <|- - "WhereIntAwait`1"
"IUniTaskAsyncEnumerable`1" "<TSource>" <|- - "WhereAwaitWithCancellation`1"
"IUniTaskAsyncEnumerable`1" "<TSource>" <|- - "WhereIntAwaitWithCancellation`1"
"Where`1" +- - _Where
MoveNextSource <|- - _Where
"IUniTaskAsyncEnumerator`1" "<TSource>" <|- - _Where
_Where - -> "Current" TSource
"WhereInt`1" +- - _Where
MoveNextSource <|- - _Where
"IUniTaskAsyncEnumerator`1" "<TSource>" <|- - _Where
_Where - -> "Current" TSource
"WhereAwait`1" +- - _WhereAwait
MoveNextSource <|- - _WhereAwait
"IUniTaskAsyncEnumerator`1" "<TSource>" <|- - _WhereAwait
_WhereAwait - -> "Current" TSource
"WhereIntAwait`1" +- - _WhereAwait
MoveNextSource <|- - _WhereAwait
"IUniTaskAsyncEnumerator`1" "<TSource>" <|- - _WhereAwait
_WhereAwait - -> "Current" TSource
"WhereAwaitWithCancellation`1" +- - _WhereAwaitWithCancellation
MoveNextSource <|- - _WhereAwaitWithCancellation
"IUniTaskAsyncEnumerator`1" "<TSource>" <|- - _WhereAwaitWithCancellation
_WhereAwaitWithCancellation - -> "Current" TSource
"WhereIntAwaitWithCancellation`1" +- - _WhereAwaitWithCancellation
MoveNextSource <|- - _WhereAwaitWithCancellation
"IUniTaskAsyncEnumerator`1" "<TSource>" <|- - _WhereAwaitWithCancellation
_WhereAwaitWithCancellation - -> "Current" TSource
class UniTaskAsyncEnumerable <<static>> <<partial>> {
    + {static} Zip(first:IUniTaskAsyncEnumerable<TFirst>, second:IUniTaskAsyncEnumerable<TSecond>) : IUniTaskAsyncEnumerable<(TFirst First, TSecond Second)>
    + {static} Zip(first:IUniTaskAsyncEnumerable<TFirst>, second:IUniTaskAsyncEnumerable<TSecond>, resultSelector:Func<TFirst, TSecond, TResult>) : IUniTaskAsyncEnumerable<TResult>
    + {static} ZipAwait(first:IUniTaskAsyncEnumerable<TFirst>, second:IUniTaskAsyncEnumerable<TSecond>, selector:Func<TFirst, TSecond, UniTask<TResult>>) : IUniTaskAsyncEnumerable<TResult>
    + {static} ZipAwaitWithCancellation(first:IUniTaskAsyncEnumerable<TFirst>, second:IUniTaskAsyncEnumerable<TSecond>, selector:Func<TFirst, TSecond, CancellationToken, UniTask<TResult>>) : IUniTaskAsyncEnumerable<TResult>
}
class "Zip`3"<TFirst,TSecond,TResult> <<sealed>> {
    + Zip(first:IUniTaskAsyncEnumerable<TFirst>, second:IUniTaskAsyncEnumerable<TSecond>, resultSelector:Func<TFirst, TSecond, TResult>)
    + GetAsyncEnumerator(cancellationToken:CancellationToken) : IUniTaskAsyncEnumerator<TResult>
}
class "ZipAwait`3"<TFirst,TSecond,TResult> <<sealed>> {
    + ZipAwait(first:IUniTaskAsyncEnumerable<TFirst>, second:IUniTaskAsyncEnumerable<TSecond>, resultSelector:Func<TFirst, TSecond, UniTask<TResult>>)
    + GetAsyncEnumerator(cancellationToken:CancellationToken) : IUniTaskAsyncEnumerator<TResult>
}
class "ZipAwaitWithCancellation`3"<TFirst,TSecond,TResult> <<sealed>> {
    + ZipAwaitWithCancellation(first:IUniTaskAsyncEnumerable<TFirst>, second:IUniTaskAsyncEnumerable<TSecond>, resultSelector:Func<TFirst, TSecond, CancellationToken, UniTask<TResult>>)
    + GetAsyncEnumerator(cancellationToken:CancellationToken) : IUniTaskAsyncEnumerator<TResult>
}
class "IUniTaskAsyncEnumerable`1"<T> {
}
class _Zip <<sealed>> {
    + _Zip(first:IUniTaskAsyncEnumerable<TFirst>, second:IUniTaskAsyncEnumerable<TSecond>, resultSelector:Func<TFirst, TSecond, TResult>, cancellationToken:CancellationToken)
    + MoveNextAsync() : UniTask<bool>
    + <<async>> DisposeAsync() : UniTask
}
class _ZipAwait <<sealed>> {
    + _ZipAwait(first:IUniTaskAsyncEnumerable<TFirst>, second:IUniTaskAsyncEnumerable<TSecond>, resultSelector:Func<TFirst, TSecond, UniTask<TResult>>, cancellationToken:CancellationToken)
    + MoveNextAsync() : UniTask<bool>
    + <<async>> DisposeAsync() : UniTask
}
class _ZipAwaitWithCancellation <<sealed>> {
    + _ZipAwaitWithCancellation(first:IUniTaskAsyncEnumerable<TFirst>, second:IUniTaskAsyncEnumerable<TSecond>, resultSelector:Func<TFirst, TSecond, CancellationToken, UniTask<TResult>>, cancellationToken:CancellationToken)
    + MoveNextAsync() : UniTask<bool>
    + <<async>> DisposeAsync() : UniTask
}
class "IUniTaskAsyncEnumerator`1"<T> {
}
"IUniTaskAsyncEnumerable`1" "<TResult>" <|- - "Zip`3"
"IUniTaskAsyncEnumerable`1" "<TResult>" <|- - "ZipAwait`3"
"IUniTaskAsyncEnumerable`1" "<TResult>" <|- - "ZipAwaitWithCancellation`3"
"Zip`3" +- - _Zip
MoveNextSource <|- - _Zip
"IUniTaskAsyncEnumerator`1" "<TResult>" <|- - _Zip
_Zip - -> "Current" TResult
"ZipAwait`3" +- - _ZipAwait
MoveNextSource <|- - _ZipAwait
"IUniTaskAsyncEnumerator`1" "<TResult>" <|- - _ZipAwait
_ZipAwait - -> "Current" TResult
"ZipAwaitWithCancellation`3" +- - _ZipAwaitWithCancellation
MoveNextSource <|- - _ZipAwaitWithCancellation
"IUniTaskAsyncEnumerator`1" "<TResult>" <|- - _ZipAwaitWithCancellation
_ZipAwaitWithCancellation - -> "Current" TResult
class AsyncTriggerExtensions <<static>> <<partial>> {
    + {static} GetAsyncAwakeTrigger(gameObject:GameObject) : AsyncAwakeTrigger
    + {static} GetAsyncAwakeTrigger(component:Component) : AsyncAwakeTrigger
}
class AsyncAwakeTrigger <<sealed>> {
    + AwakeAsync() : UniTask
}
class "AsyncTriggerBase`1"<T> {
}
"AsyncTriggerBase`1" "<AsyncUnit>" <|- - AsyncAwakeTrigger
class AsyncTriggerExtensions <<static>> <<partial>> {
    + {static} GetAsyncDestroyTrigger(gameObject:GameObject) : AsyncDestroyTrigger
    + {static} GetAsyncDestroyTrigger(component:Component) : AsyncDestroyTrigger
}
class AsyncDestroyTrigger <<sealed>> {
    + OnDestroyAsync() : UniTask
}
class AwakeMonitor {
    + AwakeMonitor(trigger:AsyncDestroyTrigger)
    + MoveNext() : bool
}
MonoBehaviour <|- - AsyncDestroyTrigger
AsyncDestroyTrigger - -> "CancellationToken" CancellationToken
AsyncDestroyTrigger +- - AwakeMonitor
IPlayerLoopItem <|- - AwakeMonitor
class AsyncTriggerExtensions <<static>> <<partial>> {
    + {static} GetAsyncStartTrigger(gameObject:GameObject) : AsyncStartTrigger
    + {static} GetAsyncStartTrigger(component:Component) : AsyncStartTrigger
}
class AsyncStartTrigger <<sealed>> {
    + StartAsync() : UniTask
}
class "AsyncTriggerBase`1"<T> {
}
"AsyncTriggerBase`1" "<AsyncUnit>" <|- - AsyncStartTrigger
abstract class "AsyncTriggerBase`1"<T> {
    + GetAsyncEnumerator(cancellationToken:CancellationToken) : IUniTaskAsyncEnumerator<T>
}
interface IAsyncOneShotTrigger {
}
class "AsyncTriggerHandler`1"<T> <<partial>> {
}
class "AsyncTriggerHandler`1"<T> <<sealed>> <<partial>> {
    + Dispose() : void
}
class "IUniTaskAsyncEnumerable`1"<T> {
}
class AsyncTriggerEnumerator <<sealed>> {
    + AsyncTriggerEnumerator(parent:AsyncTriggerBase<T>, cancellationToken:CancellationToken)
    + OnCanceled(cancellationToken:CancellationToken) : void
    + OnNext(value:T) : void
    + OnCompleted() : void
    + OnError(ex:Exception) : void
    + MoveNextAsync() : UniTask<bool>
    + DisposeAsync() : UniTask
}
class AwakeMonitor {
    + AwakeMonitor(trigger:AsyncTriggerBase<T>)
    + MoveNext() : bool
}
class "IUniTaskSource`1"<T> {
}
class "ITriggerHandler`1"<T> {
}
class "IUniTaskAsyncEnumerator`1"<T> {
}
MonoBehaviour <|- - "AsyncTriggerBase`1"
"IUniTaskAsyncEnumerable`1" "<T>" <|- - "AsyncTriggerBase`1"
IAsyncOneShotTrigger <|- - "AsyncTriggerHandler`1"
"IUniTaskSource`1" "<T>" <|- - "AsyncTriggerHandler`1"
"ITriggerHandler`1" "<T>" <|- - "AsyncTriggerHandler`1"
IDisposable <|- - "AsyncTriggerHandler`1"
"AsyncTriggerBase`1" +- - AsyncTriggerEnumerator
MoveNextSource <|- - AsyncTriggerEnumerator
"IUniTaskAsyncEnumerator`1" "<T>" <|- - AsyncTriggerEnumerator
"ITriggerHandler`1" "<T>" <|- - AsyncTriggerEnumerator
AsyncTriggerEnumerator - -> "Current" T
"AsyncTriggerBase`1" +- - AwakeMonitor
IPlayerLoopItem <|- - AwakeMonitor
class UniTaskCancellationExtensions <<static>> {
    + {static} GetCancellationTokenOnDestroy(gameObject:GameObject) : CancellationToken
    + {static} GetCancellationTokenOnDestroy(component:Component) : CancellationToken
}
class AsyncTriggerExtensions <<static>> <<partial>> {
    + {static} OnDestroyAsync(gameObject:GameObject) : UniTask
    + {static} OnDestroyAsync(component:Component) : UniTask
    + {static} StartAsync(gameObject:GameObject) : UniTask
    + {static} StartAsync(component:Component) : UniTask
    + {static} AwakeAsync(gameObject:GameObject) : UniTask
    + {static} AwakeAsync(component:Component) : UniTask
}
interface IAsyncFixedUpdateHandler {
}
class "AsyncTriggerHandler`1"<T> <<partial>> {
}
class AsyncTriggerExtensions <<static>> <<partial>> {
    + {static} GetAsyncFixedUpdateTrigger(gameObject:GameObject) : AsyncFixedUpdateTrigger
    + {static} GetAsyncFixedUpdateTrigger(component:Component) : AsyncFixedUpdateTrigger
}
class AsyncFixedUpdateTrigger <<sealed>> {
    + GetFixedUpdateAsyncHandler() : IAsyncFixedUpdateHandler
    + GetFixedUpdateAsyncHandler(cancellationToken:CancellationToken) : IAsyncFixedUpdateHandler
    + FixedUpdateAsync() : UniTask
    + FixedUpdateAsync(cancellationToken:CancellationToken) : UniTask
}
interface IAsyncLateUpdateHandler {
}
class "AsyncTriggerHandler`1"<T> <<partial>> {
}
class AsyncTriggerExtensions <<static>> <<partial>> {
    + {static} GetAsyncLateUpdateTrigger(gameObject:GameObject) : AsyncLateUpdateTrigger
    + {static} GetAsyncLateUpdateTrigger(component:Component) : AsyncLateUpdateTrigger
}
class AsyncLateUpdateTrigger <<sealed>> {
    + GetLateUpdateAsyncHandler() : IAsyncLateUpdateHandler
    + GetLateUpdateAsyncHandler(cancellationToken:CancellationToken) : IAsyncLateUpdateHandler
    + LateUpdateAsync() : UniTask
    + LateUpdateAsync(cancellationToken:CancellationToken) : UniTask
}
interface IAsyncOnAnimatorIKHandler {
}
class "AsyncTriggerHandler`1"<T> <<partial>> {
}
class AsyncTriggerExtensions <<static>> <<partial>> {
    + {static} GetAsyncAnimatorIKTrigger(gameObject:GameObject) : AsyncAnimatorIKTrigger
    + {static} GetAsyncAnimatorIKTrigger(component:Component) : AsyncAnimatorIKTrigger
}
class AsyncAnimatorIKTrigger <<sealed>> {
    + GetOnAnimatorIKAsyncHandler() : IAsyncOnAnimatorIKHandler
    + GetOnAnimatorIKAsyncHandler(cancellationToken:CancellationToken) : IAsyncOnAnimatorIKHandler
    + OnAnimatorIKAsync() : UniTask<int>
    + OnAnimatorIKAsync(cancellationToken:CancellationToken) : UniTask<int>
}
interface IAsyncOnAnimatorMoveHandler {
}
class "AsyncTriggerHandler`1"<T> <<partial>> {
}
class AsyncTriggerExtensions <<static>> <<partial>> {
    + {static} GetAsyncAnimatorMoveTrigger(gameObject:GameObject) : AsyncAnimatorMoveTrigger
    + {static} GetAsyncAnimatorMoveTrigger(component:Component) : AsyncAnimatorMoveTrigger
}
class AsyncAnimatorMoveTrigger <<sealed>> {
    + GetOnAnimatorMoveAsyncHandler() : IAsyncOnAnimatorMoveHandler
    + GetOnAnimatorMoveAsyncHandler(cancellationToken:CancellationToken) : IAsyncOnAnimatorMoveHandler
    + OnAnimatorMoveAsync() : UniTask
    + OnAnimatorMoveAsync(cancellationToken:CancellationToken) : UniTask
}
interface IAsyncOnApplicationFocusHandler {
}
class "AsyncTriggerHandler`1"<T> <<partial>> {
}
class AsyncTriggerExtensions <<static>> <<partial>> {
    + {static} GetAsyncApplicationFocusTrigger(gameObject:GameObject) : AsyncApplicationFocusTrigger
    + {static} GetAsyncApplicationFocusTrigger(component:Component) : AsyncApplicationFocusTrigger
}
class AsyncApplicationFocusTrigger <<sealed>> {
    + GetOnApplicationFocusAsyncHandler() : IAsyncOnApplicationFocusHandler
    + GetOnApplicationFocusAsyncHandler(cancellationToken:CancellationToken) : IAsyncOnApplicationFocusHandler
    + OnApplicationFocusAsync() : UniTask<bool>
    + OnApplicationFocusAsync(cancellationToken:CancellationToken) : UniTask<bool>
}
interface IAsyncOnApplicationPauseHandler {
}
class "AsyncTriggerHandler`1"<T> <<partial>> {
}
class AsyncTriggerExtensions <<static>> <<partial>> {
    + {static} GetAsyncApplicationPauseTrigger(gameObject:GameObject) : AsyncApplicationPauseTrigger
    + {static} GetAsyncApplicationPauseTrigger(component:Component) : AsyncApplicationPauseTrigger
}
class AsyncApplicationPauseTrigger <<sealed>> {
    + GetOnApplicationPauseAsyncHandler() : IAsyncOnApplicationPauseHandler
    + GetOnApplicationPauseAsyncHandler(cancellationToken:CancellationToken) : IAsyncOnApplicationPauseHandler
    + OnApplicationPauseAsync() : UniTask<bool>
    + OnApplicationPauseAsync(cancellationToken:CancellationToken) : UniTask<bool>
}
interface IAsyncOnApplicationQuitHandler {
}
class "AsyncTriggerHandler`1"<T> <<partial>> {
}
class AsyncTriggerExtensions <<static>> <<partial>> {
    + {static} GetAsyncApplicationQuitTrigger(gameObject:GameObject) : AsyncApplicationQuitTrigger
    + {static} GetAsyncApplicationQuitTrigger(component:Component) : AsyncApplicationQuitTrigger
}
class AsyncApplicationQuitTrigger <<sealed>> {
    + GetOnApplicationQuitAsyncHandler() : IAsyncOnApplicationQuitHandler
    + GetOnApplicationQuitAsyncHandler(cancellationToken:CancellationToken) : IAsyncOnApplicationQuitHandler
    + OnApplicationQuitAsync() : UniTask
    + OnApplicationQuitAsync(cancellationToken:CancellationToken) : UniTask
}
interface IAsyncOnAudioFilterReadHandler {
}
class "AsyncTriggerHandler`1"<T> <<partial>> {
}
class AsyncTriggerExtensions <<static>> <<partial>> {
    + {static} GetAsyncAudioFilterReadTrigger(gameObject:GameObject) : AsyncAudioFilterReadTrigger
    + {static} GetAsyncAudioFilterReadTrigger(component:Component) : AsyncAudioFilterReadTrigger
}
class AsyncAudioFilterReadTrigger <<sealed>> {
    + GetOnAudioFilterReadAsyncHandler() : IAsyncOnAudioFilterReadHandler
    + GetOnAudioFilterReadAsyncHandler(cancellationToken:CancellationToken) : IAsyncOnAudioFilterReadHandler
    + OnAudioFilterReadAsync() : UniTask<(float[] data, int channels)>
    + OnAudioFilterReadAsync(cancellationToken:CancellationToken) : UniTask<(float[] data, int channels)>
}
interface IAsyncOnBecameInvisibleHandler {
}
class "AsyncTriggerHandler`1"<T> <<partial>> {
}
class AsyncTriggerExtensions <<static>> <<partial>> {
    + {static} GetAsyncBecameInvisibleTrigger(gameObject:GameObject) : AsyncBecameInvisibleTrigger
    + {static} GetAsyncBecameInvisibleTrigger(component:Component) : AsyncBecameInvisibleTrigger
}
class AsyncBecameInvisibleTrigger <<sealed>> {
    + GetOnBecameInvisibleAsyncHandler() : IAsyncOnBecameInvisibleHandler
    + GetOnBecameInvisibleAsyncHandler(cancellationToken:CancellationToken) : IAsyncOnBecameInvisibleHandler
    + OnBecameInvisibleAsync() : UniTask
    + OnBecameInvisibleAsync(cancellationToken:CancellationToken) : UniTask
}
interface IAsyncOnBecameVisibleHandler {
}
class "AsyncTriggerHandler`1"<T> <<partial>> {
}
class AsyncTriggerExtensions <<static>> <<partial>> {
    + {static} GetAsyncBecameVisibleTrigger(gameObject:GameObject) : AsyncBecameVisibleTrigger
    + {static} GetAsyncBecameVisibleTrigger(component:Component) : AsyncBecameVisibleTrigger
}
class AsyncBecameVisibleTrigger <<sealed>> {
    + GetOnBecameVisibleAsyncHandler() : IAsyncOnBecameVisibleHandler
    + GetOnBecameVisibleAsyncHandler(cancellationToken:CancellationToken) : IAsyncOnBecameVisibleHandler
    + OnBecameVisibleAsync() : UniTask
    + OnBecameVisibleAsync(cancellationToken:CancellationToken) : UniTask
}
interface IAsyncOnBeforeTransformParentChangedHandler {
}
class "AsyncTriggerHandler`1"<T> <<partial>> {
}
class AsyncTriggerExtensions <<static>> <<partial>> {
    + {static} GetAsyncBeforeTransformParentChangedTrigger(gameObject:GameObject) : AsyncBeforeTransformParentChangedTrigger
    + {static} GetAsyncBeforeTransformParentChangedTrigger(component:Component) : AsyncBeforeTransformParentChangedTrigger
}
class AsyncBeforeTransformParentChangedTrigger <<sealed>> {
    + GetOnBeforeTransformParentChangedAsyncHandler() : IAsyncOnBeforeTransformParentChangedHandler
    + GetOnBeforeTransformParentChangedAsyncHandler(cancellationToken:CancellationToken) : IAsyncOnBeforeTransformParentChangedHandler
    + OnBeforeTransformParentChangedAsync() : UniTask
    + OnBeforeTransformParentChangedAsync(cancellationToken:CancellationToken) : UniTask
}
interface IAsyncOnCanvasGroupChangedHandler {
}
class "AsyncTriggerHandler`1"<T> <<partial>> {
}
class AsyncTriggerExtensions <<static>> <<partial>> {
    + {static} GetAsyncOnCanvasGroupChangedTrigger(gameObject:GameObject) : AsyncOnCanvasGroupChangedTrigger
    + {static} GetAsyncOnCanvasGroupChangedTrigger(component:Component) : AsyncOnCanvasGroupChangedTrigger
}
class AsyncOnCanvasGroupChangedTrigger <<sealed>> {
    + GetOnCanvasGroupChangedAsyncHandler() : IAsyncOnCanvasGroupChangedHandler
    + GetOnCanvasGroupChangedAsyncHandler(cancellationToken:CancellationToken) : IAsyncOnCanvasGroupChangedHandler
    + OnCanvasGroupChangedAsync() : UniTask
    + OnCanvasGroupChangedAsync(cancellationToken:CancellationToken) : UniTask
}
interface IAsyncOnCollisionEnterHandler {
}
class "AsyncTriggerHandler`1"<T> <<partial>> {
}
class AsyncTriggerExtensions <<static>> <<partial>> {
    + {static} GetAsyncCollisionEnterTrigger(gameObject:GameObject) : AsyncCollisionEnterTrigger
    + {static} GetAsyncCollisionEnterTrigger(component:Component) : AsyncCollisionEnterTrigger
}
class AsyncCollisionEnterTrigger <<sealed>> {
    + GetOnCollisionEnterAsyncHandler() : IAsyncOnCollisionEnterHandler
    + GetOnCollisionEnterAsyncHandler(cancellationToken:CancellationToken) : IAsyncOnCollisionEnterHandler
    + OnCollisionEnterAsync() : UniTask<Collision>
    + OnCollisionEnterAsync(cancellationToken:CancellationToken) : UniTask<Collision>
}
interface IAsyncOnCollisionEnter2DHandler {
}
class "AsyncTriggerHandler`1"<T> <<partial>> {
}
class AsyncTriggerExtensions <<static>> <<partial>> {
    + {static} GetAsyncCollisionEnter2DTrigger(gameObject:GameObject) : AsyncCollisionEnter2DTrigger
    + {static} GetAsyncCollisionEnter2DTrigger(component:Component) : AsyncCollisionEnter2DTrigger
}
class AsyncCollisionEnter2DTrigger <<sealed>> {
    + GetOnCollisionEnter2DAsyncHandler() : IAsyncOnCollisionEnter2DHandler
    + GetOnCollisionEnter2DAsyncHandler(cancellationToken:CancellationToken) : IAsyncOnCollisionEnter2DHandler
    + OnCollisionEnter2DAsync() : UniTask<Collision2D>
    + OnCollisionEnter2DAsync(cancellationToken:CancellationToken) : UniTask<Collision2D>
}
interface IAsyncOnCollisionExitHandler {
}
class "AsyncTriggerHandler`1"<T> <<partial>> {
}
class AsyncTriggerExtensions <<static>> <<partial>> {
    + {static} GetAsyncCollisionExitTrigger(gameObject:GameObject) : AsyncCollisionExitTrigger
    + {static} GetAsyncCollisionExitTrigger(component:Component) : AsyncCollisionExitTrigger
}
class AsyncCollisionExitTrigger <<sealed>> {
    + GetOnCollisionExitAsyncHandler() : IAsyncOnCollisionExitHandler
    + GetOnCollisionExitAsyncHandler(cancellationToken:CancellationToken) : IAsyncOnCollisionExitHandler
    + OnCollisionExitAsync() : UniTask<Collision>
    + OnCollisionExitAsync(cancellationToken:CancellationToken) : UniTask<Collision>
}
interface IAsyncOnCollisionExit2DHandler {
}
class "AsyncTriggerHandler`1"<T> <<partial>> {
}
class AsyncTriggerExtensions <<static>> <<partial>> {
    + {static} GetAsyncCollisionExit2DTrigger(gameObject:GameObject) : AsyncCollisionExit2DTrigger
    + {static} GetAsyncCollisionExit2DTrigger(component:Component) : AsyncCollisionExit2DTrigger
}
class AsyncCollisionExit2DTrigger <<sealed>> {
    + GetOnCollisionExit2DAsyncHandler() : IAsyncOnCollisionExit2DHandler
    + GetOnCollisionExit2DAsyncHandler(cancellationToken:CancellationToken) : IAsyncOnCollisionExit2DHandler
    + OnCollisionExit2DAsync() : UniTask<Collision2D>
    + OnCollisionExit2DAsync(cancellationToken:CancellationToken) : UniTask<Collision2D>
}
interface IAsyncOnCollisionStayHandler {
}
class "AsyncTriggerHandler`1"<T> <<partial>> {
}
class AsyncTriggerExtensions <<static>> <<partial>> {
    + {static} GetAsyncCollisionStayTrigger(gameObject:GameObject) : AsyncCollisionStayTrigger
    + {static} GetAsyncCollisionStayTrigger(component:Component) : AsyncCollisionStayTrigger
}
class AsyncCollisionStayTrigger <<sealed>> {
    + GetOnCollisionStayAsyncHandler() : IAsyncOnCollisionStayHandler
    + GetOnCollisionStayAsyncHandler(cancellationToken:CancellationToken) : IAsyncOnCollisionStayHandler
    + OnCollisionStayAsync() : UniTask<Collision>
    + OnCollisionStayAsync(cancellationToken:CancellationToken) : UniTask<Collision>
}
interface IAsyncOnCollisionStay2DHandler {
}
class "AsyncTriggerHandler`1"<T> <<partial>> {
}
class AsyncTriggerExtensions <<static>> <<partial>> {
    + {static} GetAsyncCollisionStay2DTrigger(gameObject:GameObject) : AsyncCollisionStay2DTrigger
    + {static} GetAsyncCollisionStay2DTrigger(component:Component) : AsyncCollisionStay2DTrigger
}
class AsyncCollisionStay2DTrigger <<sealed>> {
    + GetOnCollisionStay2DAsyncHandler() : IAsyncOnCollisionStay2DHandler
    + GetOnCollisionStay2DAsyncHandler(cancellationToken:CancellationToken) : IAsyncOnCollisionStay2DHandler
    + OnCollisionStay2DAsync() : UniTask<Collision2D>
    + OnCollisionStay2DAsync(cancellationToken:CancellationToken) : UniTask<Collision2D>
}
interface IAsyncOnControllerColliderHitHandler {
}
class "AsyncTriggerHandler`1"<T> <<partial>> {
}
class AsyncTriggerExtensions <<static>> <<partial>> {
    + {static} GetAsyncControllerColliderHitTrigger(gameObject:GameObject) : AsyncControllerColliderHitTrigger
    + {static} GetAsyncControllerColliderHitTrigger(component:Component) : AsyncControllerColliderHitTrigger
}
class AsyncControllerColliderHitTrigger <<sealed>> {
    + GetOnControllerColliderHitAsyncHandler() : IAsyncOnControllerColliderHitHandler
    + GetOnControllerColliderHitAsyncHandler(cancellationToken:CancellationToken) : IAsyncOnControllerColliderHitHandler
    + OnControllerColliderHitAsync() : UniTask<ControllerColliderHit>
    + OnControllerColliderHitAsync(cancellationToken:CancellationToken) : UniTask<ControllerColliderHit>
}
interface IAsyncOnDisableHandler {
}
class "AsyncTriggerHandler`1"<T> <<partial>> {
}
class AsyncTriggerExtensions <<static>> <<partial>> {
    + {static} GetAsyncDisableTrigger(gameObject:GameObject) : AsyncDisableTrigger
    + {static} GetAsyncDisableTrigger(component:Component) : AsyncDisableTrigger
}
class AsyncDisableTrigger <<sealed>> {
    + GetOnDisableAsyncHandler() : IAsyncOnDisableHandler
    + GetOnDisableAsyncHandler(cancellationToken:CancellationToken) : IAsyncOnDisableHandler
    + OnDisableAsync() : UniTask
    + OnDisableAsync(cancellationToken:CancellationToken) : UniTask
}
interface IAsyncOnDrawGizmosHandler {
}
class "AsyncTriggerHandler`1"<T> <<partial>> {
}
class AsyncTriggerExtensions <<static>> <<partial>> {
    + {static} GetAsyncDrawGizmosTrigger(gameObject:GameObject) : AsyncDrawGizmosTrigger
    + {static} GetAsyncDrawGizmosTrigger(component:Component) : AsyncDrawGizmosTrigger
}
class AsyncDrawGizmosTrigger <<sealed>> {
    + GetOnDrawGizmosAsyncHandler() : IAsyncOnDrawGizmosHandler
    + GetOnDrawGizmosAsyncHandler(cancellationToken:CancellationToken) : IAsyncOnDrawGizmosHandler
    + OnDrawGizmosAsync() : UniTask
    + OnDrawGizmosAsync(cancellationToken:CancellationToken) : UniTask
}
interface IAsyncOnDrawGizmosSelectedHandler {
}
class "AsyncTriggerHandler`1"<T> <<partial>> {
}
class AsyncTriggerExtensions <<static>> <<partial>> {
    + {static} GetAsyncDrawGizmosSelectedTrigger(gameObject:GameObject) : AsyncDrawGizmosSelectedTrigger
    + {static} GetAsyncDrawGizmosSelectedTrigger(component:Component) : AsyncDrawGizmosSelectedTrigger
}
class AsyncDrawGizmosSelectedTrigger <<sealed>> {
    + GetOnDrawGizmosSelectedAsyncHandler() : IAsyncOnDrawGizmosSelectedHandler
    + GetOnDrawGizmosSelectedAsyncHandler(cancellationToken:CancellationToken) : IAsyncOnDrawGizmosSelectedHandler
    + OnDrawGizmosSelectedAsync() : UniTask
    + OnDrawGizmosSelectedAsync(cancellationToken:CancellationToken) : UniTask
}
interface IAsyncOnEnableHandler {
}
class "AsyncTriggerHandler`1"<T> <<partial>> {
}
class AsyncTriggerExtensions <<static>> <<partial>> {
    + {static} GetAsyncEnableTrigger(gameObject:GameObject) : AsyncEnableTrigger
    + {static} GetAsyncEnableTrigger(component:Component) : AsyncEnableTrigger
}
class AsyncEnableTrigger <<sealed>> {
    + GetOnEnableAsyncHandler() : IAsyncOnEnableHandler
    + GetOnEnableAsyncHandler(cancellationToken:CancellationToken) : IAsyncOnEnableHandler
    + OnEnableAsync() : UniTask
    + OnEnableAsync(cancellationToken:CancellationToken) : UniTask
}
interface IAsyncOnGUIHandler {
}
class "AsyncTriggerHandler`1"<T> <<partial>> {
}
class AsyncTriggerExtensions <<static>> <<partial>> {
    + {static} GetAsyncGUITrigger(gameObject:GameObject) : AsyncGUITrigger
    + {static} GetAsyncGUITrigger(component:Component) : AsyncGUITrigger
}
class AsyncGUITrigger <<sealed>> {
    + GetOnGUIAsyncHandler() : IAsyncOnGUIHandler
    + GetOnGUIAsyncHandler(cancellationToken:CancellationToken) : IAsyncOnGUIHandler
    + OnGUIAsync() : UniTask
    + OnGUIAsync(cancellationToken:CancellationToken) : UniTask
}
interface IAsyncOnJointBreakHandler {
}
class "AsyncTriggerHandler`1"<T> <<partial>> {
}
class AsyncTriggerExtensions <<static>> <<partial>> {
    + {static} GetAsyncJointBreakTrigger(gameObject:GameObject) : AsyncJointBreakTrigger
    + {static} GetAsyncJointBreakTrigger(component:Component) : AsyncJointBreakTrigger
}
class AsyncJointBreakTrigger <<sealed>> {
    + GetOnJointBreakAsyncHandler() : IAsyncOnJointBreakHandler
    + GetOnJointBreakAsyncHandler(cancellationToken:CancellationToken) : IAsyncOnJointBreakHandler
    + OnJointBreakAsync() : UniTask<float>
    + OnJointBreakAsync(cancellationToken:CancellationToken) : UniTask<float>
}
interface IAsyncOnJointBreak2DHandler {
}
class "AsyncTriggerHandler`1"<T> <<partial>> {
}
class AsyncTriggerExtensions <<static>> <<partial>> {
    + {static} GetAsyncJointBreak2DTrigger(gameObject:GameObject) : AsyncJointBreak2DTrigger
    + {static} GetAsyncJointBreak2DTrigger(component:Component) : AsyncJointBreak2DTrigger
}
class AsyncJointBreak2DTrigger <<sealed>> {
    + GetOnJointBreak2DAsyncHandler() : IAsyncOnJointBreak2DHandler
    + GetOnJointBreak2DAsyncHandler(cancellationToken:CancellationToken) : IAsyncOnJointBreak2DHandler
    + OnJointBreak2DAsync() : UniTask<Joint2D>
    + OnJointBreak2DAsync(cancellationToken:CancellationToken) : UniTask<Joint2D>
}
interface IAsyncOnMouseDownHandler {
}
class "AsyncTriggerHandler`1"<T> <<partial>> {
}
class AsyncTriggerExtensions <<static>> <<partial>> {
    + {static} GetAsyncMouseDownTrigger(gameObject:GameObject) : AsyncMouseDownTrigger
    + {static} GetAsyncMouseDownTrigger(component:Component) : AsyncMouseDownTrigger
}
class AsyncMouseDownTrigger <<sealed>> {
    + GetOnMouseDownAsyncHandler() : IAsyncOnMouseDownHandler
    + GetOnMouseDownAsyncHandler(cancellationToken:CancellationToken) : IAsyncOnMouseDownHandler
    + OnMouseDownAsync() : UniTask
    + OnMouseDownAsync(cancellationToken:CancellationToken) : UniTask
}
interface IAsyncOnMouseDragHandler {
}
class "AsyncTriggerHandler`1"<T> <<partial>> {
}
class AsyncTriggerExtensions <<static>> <<partial>> {
    + {static} GetAsyncMouseDragTrigger(gameObject:GameObject) : AsyncMouseDragTrigger
    + {static} GetAsyncMouseDragTrigger(component:Component) : AsyncMouseDragTrigger
}
class AsyncMouseDragTrigger <<sealed>> {
    + GetOnMouseDragAsyncHandler() : IAsyncOnMouseDragHandler
    + GetOnMouseDragAsyncHandler(cancellationToken:CancellationToken) : IAsyncOnMouseDragHandler
    + OnMouseDragAsync() : UniTask
    + OnMouseDragAsync(cancellationToken:CancellationToken) : UniTask
}
interface IAsyncOnMouseEnterHandler {
}
class "AsyncTriggerHandler`1"<T> <<partial>> {
}
class AsyncTriggerExtensions <<static>> <<partial>> {
    + {static} GetAsyncMouseEnterTrigger(gameObject:GameObject) : AsyncMouseEnterTrigger
    + {static} GetAsyncMouseEnterTrigger(component:Component) : AsyncMouseEnterTrigger
}
class AsyncMouseEnterTrigger <<sealed>> {
    + GetOnMouseEnterAsyncHandler() : IAsyncOnMouseEnterHandler
    + GetOnMouseEnterAsyncHandler(cancellationToken:CancellationToken) : IAsyncOnMouseEnterHandler
    + OnMouseEnterAsync() : UniTask
    + OnMouseEnterAsync(cancellationToken:CancellationToken) : UniTask
}
interface IAsyncOnMouseExitHandler {
}
class "AsyncTriggerHandler`1"<T> <<partial>> {
}
class AsyncTriggerExtensions <<static>> <<partial>> {
    + {static} GetAsyncMouseExitTrigger(gameObject:GameObject) : AsyncMouseExitTrigger
    + {static} GetAsyncMouseExitTrigger(component:Component) : AsyncMouseExitTrigger
}
class AsyncMouseExitTrigger <<sealed>> {
    + GetOnMouseExitAsyncHandler() : IAsyncOnMouseExitHandler
    + GetOnMouseExitAsyncHandler(cancellationToken:CancellationToken) : IAsyncOnMouseExitHandler
    + OnMouseExitAsync() : UniTask
    + OnMouseExitAsync(cancellationToken:CancellationToken) : UniTask
}
interface IAsyncOnMouseOverHandler {
}
class "AsyncTriggerHandler`1"<T> <<partial>> {
}
class AsyncTriggerExtensions <<static>> <<partial>> {
    + {static} GetAsyncMouseOverTrigger(gameObject:GameObject) : AsyncMouseOverTrigger
    + {static} GetAsyncMouseOverTrigger(component:Component) : AsyncMouseOverTrigger
}
class AsyncMouseOverTrigger <<sealed>> {
    + GetOnMouseOverAsyncHandler() : IAsyncOnMouseOverHandler
    + GetOnMouseOverAsyncHandler(cancellationToken:CancellationToken) : IAsyncOnMouseOverHandler
    + OnMouseOverAsync() : UniTask
    + OnMouseOverAsync(cancellationToken:CancellationToken) : UniTask
}
interface IAsyncOnMouseUpHandler {
}
class "AsyncTriggerHandler`1"<T> <<partial>> {
}
class AsyncTriggerExtensions <<static>> <<partial>> {
    + {static} GetAsyncMouseUpTrigger(gameObject:GameObject) : AsyncMouseUpTrigger
    + {static} GetAsyncMouseUpTrigger(component:Component) : AsyncMouseUpTrigger
}
class AsyncMouseUpTrigger <<sealed>> {
    + GetOnMouseUpAsyncHandler() : IAsyncOnMouseUpHandler
    + GetOnMouseUpAsyncHandler(cancellationToken:CancellationToken) : IAsyncOnMouseUpHandler
    + OnMouseUpAsync() : UniTask
    + OnMouseUpAsync(cancellationToken:CancellationToken) : UniTask
}
interface IAsyncOnMouseUpAsButtonHandler {
}
class "AsyncTriggerHandler`1"<T> <<partial>> {
}
class AsyncTriggerExtensions <<static>> <<partial>> {
    + {static} GetAsyncMouseUpAsButtonTrigger(gameObject:GameObject) : AsyncMouseUpAsButtonTrigger
    + {static} GetAsyncMouseUpAsButtonTrigger(component:Component) : AsyncMouseUpAsButtonTrigger
}
class AsyncMouseUpAsButtonTrigger <<sealed>> {
    + GetOnMouseUpAsButtonAsyncHandler() : IAsyncOnMouseUpAsButtonHandler
    + GetOnMouseUpAsButtonAsyncHandler(cancellationToken:CancellationToken) : IAsyncOnMouseUpAsButtonHandler
    + OnMouseUpAsButtonAsync() : UniTask
    + OnMouseUpAsButtonAsync(cancellationToken:CancellationToken) : UniTask
}
interface IAsyncOnParticleCollisionHandler {
}
class "AsyncTriggerHandler`1"<T> <<partial>> {
}
class AsyncTriggerExtensions <<static>> <<partial>> {
    + {static} GetAsyncParticleCollisionTrigger(gameObject:GameObject) : AsyncParticleCollisionTrigger
    + {static} GetAsyncParticleCollisionTrigger(component:Component) : AsyncParticleCollisionTrigger
}
class AsyncParticleCollisionTrigger <<sealed>> {
    + GetOnParticleCollisionAsyncHandler() : IAsyncOnParticleCollisionHandler
    + GetOnParticleCollisionAsyncHandler(cancellationToken:CancellationToken) : IAsyncOnParticleCollisionHandler
    + OnParticleCollisionAsync() : UniTask<GameObject>
    + OnParticleCollisionAsync(cancellationToken:CancellationToken) : UniTask<GameObject>
}
interface IAsyncOnParticleSystemStoppedHandler {
}
class "AsyncTriggerHandler`1"<T> <<partial>> {
}
class AsyncTriggerExtensions <<static>> <<partial>> {
    + {static} GetAsyncParticleSystemStoppedTrigger(gameObject:GameObject) : AsyncParticleSystemStoppedTrigger
    + {static} GetAsyncParticleSystemStoppedTrigger(component:Component) : AsyncParticleSystemStoppedTrigger
}
class AsyncParticleSystemStoppedTrigger <<sealed>> {
    + GetOnParticleSystemStoppedAsyncHandler() : IAsyncOnParticleSystemStoppedHandler
    + GetOnParticleSystemStoppedAsyncHandler(cancellationToken:CancellationToken) : IAsyncOnParticleSystemStoppedHandler
    + OnParticleSystemStoppedAsync() : UniTask
    + OnParticleSystemStoppedAsync(cancellationToken:CancellationToken) : UniTask
}
interface IAsyncOnParticleTriggerHandler {
}
class "AsyncTriggerHandler`1"<T> <<partial>> {
}
class AsyncTriggerExtensions <<static>> <<partial>> {
    + {static} GetAsyncParticleTriggerTrigger(gameObject:GameObject) : AsyncParticleTriggerTrigger
    + {static} GetAsyncParticleTriggerTrigger(component:Component) : AsyncParticleTriggerTrigger
}
class AsyncParticleTriggerTrigger <<sealed>> {
    + GetOnParticleTriggerAsyncHandler() : IAsyncOnParticleTriggerHandler
    + GetOnParticleTriggerAsyncHandler(cancellationToken:CancellationToken) : IAsyncOnParticleTriggerHandler
    + OnParticleTriggerAsync() : UniTask
    + OnParticleTriggerAsync(cancellationToken:CancellationToken) : UniTask
}
interface IAsyncOnPostRenderHandler {
}
class "AsyncTriggerHandler`1"<T> <<partial>> {
}
class AsyncTriggerExtensions <<static>> <<partial>> {
    + {static} GetAsyncPostRenderTrigger(gameObject:GameObject) : AsyncPostRenderTrigger
    + {static} GetAsyncPostRenderTrigger(component:Component) : AsyncPostRenderTrigger
}
class AsyncPostRenderTrigger <<sealed>> {
    + GetOnPostRenderAsyncHandler() : IAsyncOnPostRenderHandler
    + GetOnPostRenderAsyncHandler(cancellationToken:CancellationToken) : IAsyncOnPostRenderHandler
    + OnPostRenderAsync() : UniTask
    + OnPostRenderAsync(cancellationToken:CancellationToken) : UniTask
}
interface IAsyncOnPreCullHandler {
}
class "AsyncTriggerHandler`1"<T> <<partial>> {
}
class AsyncTriggerExtensions <<static>> <<partial>> {
    + {static} GetAsyncPreCullTrigger(gameObject:GameObject) : AsyncPreCullTrigger
    + {static} GetAsyncPreCullTrigger(component:Component) : AsyncPreCullTrigger
}
class AsyncPreCullTrigger <<sealed>> {
    + GetOnPreCullAsyncHandler() : IAsyncOnPreCullHandler
    + GetOnPreCullAsyncHandler(cancellationToken:CancellationToken) : IAsyncOnPreCullHandler
    + OnPreCullAsync() : UniTask
    + OnPreCullAsync(cancellationToken:CancellationToken) : UniTask
}
interface IAsyncOnPreRenderHandler {
}
class "AsyncTriggerHandler`1"<T> <<partial>> {
}
class AsyncTriggerExtensions <<static>> <<partial>> {
    + {static} GetAsyncPreRenderTrigger(gameObject:GameObject) : AsyncPreRenderTrigger
    + {static} GetAsyncPreRenderTrigger(component:Component) : AsyncPreRenderTrigger
}
class AsyncPreRenderTrigger <<sealed>> {
    + GetOnPreRenderAsyncHandler() : IAsyncOnPreRenderHandler
    + GetOnPreRenderAsyncHandler(cancellationToken:CancellationToken) : IAsyncOnPreRenderHandler
    + OnPreRenderAsync() : UniTask
    + OnPreRenderAsync(cancellationToken:CancellationToken) : UniTask
}
interface IAsyncOnRectTransformDimensionsChangeHandler {
}
class "AsyncTriggerHandler`1"<T> <<partial>> {
}
class AsyncTriggerExtensions <<static>> <<partial>> {
    + {static} GetAsyncRectTransformDimensionsChangeTrigger(gameObject:GameObject) : AsyncRectTransformDimensionsChangeTrigger
    + {static} GetAsyncRectTransformDimensionsChangeTrigger(component:Component) : AsyncRectTransformDimensionsChangeTrigger
}
class AsyncRectTransformDimensionsChangeTrigger <<sealed>> {
    + GetOnRectTransformDimensionsChangeAsyncHandler() : IAsyncOnRectTransformDimensionsChangeHandler
    + GetOnRectTransformDimensionsChangeAsyncHandler(cancellationToken:CancellationToken) : IAsyncOnRectTransformDimensionsChangeHandler
    + OnRectTransformDimensionsChangeAsync() : UniTask
    + OnRectTransformDimensionsChangeAsync(cancellationToken:CancellationToken) : UniTask
}
interface IAsyncOnRectTransformRemovedHandler {
}
class "AsyncTriggerHandler`1"<T> <<partial>> {
}
class AsyncTriggerExtensions <<static>> <<partial>> {
    + {static} GetAsyncRectTransformRemovedTrigger(gameObject:GameObject) : AsyncRectTransformRemovedTrigger
    + {static} GetAsyncRectTransformRemovedTrigger(component:Component) : AsyncRectTransformRemovedTrigger
}
class AsyncRectTransformRemovedTrigger <<sealed>> {
    + GetOnRectTransformRemovedAsyncHandler() : IAsyncOnRectTransformRemovedHandler
    + GetOnRectTransformRemovedAsyncHandler(cancellationToken:CancellationToken) : IAsyncOnRectTransformRemovedHandler
    + OnRectTransformRemovedAsync() : UniTask
    + OnRectTransformRemovedAsync(cancellationToken:CancellationToken) : UniTask
}
interface IAsyncOnRenderImageHandler {
}
class "AsyncTriggerHandler`1"<T> <<partial>> {
}
class AsyncTriggerExtensions <<static>> <<partial>> {
    + {static} GetAsyncRenderImageTrigger(gameObject:GameObject) : AsyncRenderImageTrigger
    + {static} GetAsyncRenderImageTrigger(component:Component) : AsyncRenderImageTrigger
}
class AsyncRenderImageTrigger <<sealed>> {
    + GetOnRenderImageAsyncHandler() : IAsyncOnRenderImageHandler
    + GetOnRenderImageAsyncHandler(cancellationToken:CancellationToken) : IAsyncOnRenderImageHandler
    + OnRenderImageAsync() : UniTask<(RenderTexture source, RenderTexture destination)>
    + OnRenderImageAsync(cancellationToken:CancellationToken) : UniTask<(RenderTexture source, RenderTexture destination)>
}
interface IAsyncOnRenderObjectHandler {
}
class "AsyncTriggerHandler`1"<T> <<partial>> {
}
class AsyncTriggerExtensions <<static>> <<partial>> {
    + {static} GetAsyncRenderObjectTrigger(gameObject:GameObject) : AsyncRenderObjectTrigger
    + {static} GetAsyncRenderObjectTrigger(component:Component) : AsyncRenderObjectTrigger
}
class AsyncRenderObjectTrigger <<sealed>> {
    + GetOnRenderObjectAsyncHandler() : IAsyncOnRenderObjectHandler
    + GetOnRenderObjectAsyncHandler(cancellationToken:CancellationToken) : IAsyncOnRenderObjectHandler
    + OnRenderObjectAsync() : UniTask
    + OnRenderObjectAsync(cancellationToken:CancellationToken) : UniTask
}
interface IAsyncOnServerInitializedHandler {
}
class "AsyncTriggerHandler`1"<T> <<partial>> {
}
class AsyncTriggerExtensions <<static>> <<partial>> {
    + {static} GetAsyncServerInitializedTrigger(gameObject:GameObject) : AsyncServerInitializedTrigger
    + {static} GetAsyncServerInitializedTrigger(component:Component) : AsyncServerInitializedTrigger
}
class AsyncServerInitializedTrigger <<sealed>> {
    + GetOnServerInitializedAsyncHandler() : IAsyncOnServerInitializedHandler
    + GetOnServerInitializedAsyncHandler(cancellationToken:CancellationToken) : IAsyncOnServerInitializedHandler
    + OnServerInitializedAsync() : UniTask
    + OnServerInitializedAsync(cancellationToken:CancellationToken) : UniTask
}
interface IAsyncOnTransformChildrenChangedHandler {
}
class "AsyncTriggerHandler`1"<T> <<partial>> {
}
class AsyncTriggerExtensions <<static>> <<partial>> {
    + {static} GetAsyncTransformChildrenChangedTrigger(gameObject:GameObject) : AsyncTransformChildrenChangedTrigger
    + {static} GetAsyncTransformChildrenChangedTrigger(component:Component) : AsyncTransformChildrenChangedTrigger
}
class AsyncTransformChildrenChangedTrigger <<sealed>> {
    + GetOnTransformChildrenChangedAsyncHandler() : IAsyncOnTransformChildrenChangedHandler
    + GetOnTransformChildrenChangedAsyncHandler(cancellationToken:CancellationToken) : IAsyncOnTransformChildrenChangedHandler
    + OnTransformChildrenChangedAsync() : UniTask
    + OnTransformChildrenChangedAsync(cancellationToken:CancellationToken) : UniTask
}
interface IAsyncOnTransformParentChangedHandler {
}
class "AsyncTriggerHandler`1"<T> <<partial>> {
}
class AsyncTriggerExtensions <<static>> <<partial>> {
    + {static} GetAsyncTransformParentChangedTrigger(gameObject:GameObject) : AsyncTransformParentChangedTrigger
    + {static} GetAsyncTransformParentChangedTrigger(component:Component) : AsyncTransformParentChangedTrigger
}
class AsyncTransformParentChangedTrigger <<sealed>> {
    + GetOnTransformParentChangedAsyncHandler() : IAsyncOnTransformParentChangedHandler
    + GetOnTransformParentChangedAsyncHandler(cancellationToken:CancellationToken) : IAsyncOnTransformParentChangedHandler
    + OnTransformParentChangedAsync() : UniTask
    + OnTransformParentChangedAsync(cancellationToken:CancellationToken) : UniTask
}
interface IAsyncOnTriggerEnterHandler {
}
class "AsyncTriggerHandler`1"<T> <<partial>> {
}
class AsyncTriggerExtensions <<static>> <<partial>> {
    + {static} GetAsyncTriggerEnterTrigger(gameObject:GameObject) : AsyncTriggerEnterTrigger
    + {static} GetAsyncTriggerEnterTrigger(component:Component) : AsyncTriggerEnterTrigger
}
class AsyncTriggerEnterTrigger <<sealed>> {
    + GetOnTriggerEnterAsyncHandler() : IAsyncOnTriggerEnterHandler
    + GetOnTriggerEnterAsyncHandler(cancellationToken:CancellationToken) : IAsyncOnTriggerEnterHandler
    + OnTriggerEnterAsync() : UniTask<Collider>
    + OnTriggerEnterAsync(cancellationToken:CancellationToken) : UniTask<Collider>
}
interface IAsyncOnTriggerEnter2DHandler {
}
class "AsyncTriggerHandler`1"<T> <<partial>> {
}
class AsyncTriggerExtensions <<static>> <<partial>> {
    + {static} GetAsyncTriggerEnter2DTrigger(gameObject:GameObject) : AsyncTriggerEnter2DTrigger
    + {static} GetAsyncTriggerEnter2DTrigger(component:Component) : AsyncTriggerEnter2DTrigger
}
class AsyncTriggerEnter2DTrigger <<sealed>> {
    + GetOnTriggerEnter2DAsyncHandler() : IAsyncOnTriggerEnter2DHandler
    + GetOnTriggerEnter2DAsyncHandler(cancellationToken:CancellationToken) : IAsyncOnTriggerEnter2DHandler
    + OnTriggerEnter2DAsync() : UniTask<Collider2D>
    + OnTriggerEnter2DAsync(cancellationToken:CancellationToken) : UniTask<Collider2D>
}
interface IAsyncOnTriggerExitHandler {
}
class "AsyncTriggerHandler`1"<T> <<partial>> {
}
class AsyncTriggerExtensions <<static>> <<partial>> {
    + {static} GetAsyncTriggerExitTrigger(gameObject:GameObject) : AsyncTriggerExitTrigger
    + {static} GetAsyncTriggerExitTrigger(component:Component) : AsyncTriggerExitTrigger
}
class AsyncTriggerExitTrigger <<sealed>> {
    + GetOnTriggerExitAsyncHandler() : IAsyncOnTriggerExitHandler
    + GetOnTriggerExitAsyncHandler(cancellationToken:CancellationToken) : IAsyncOnTriggerExitHandler
    + OnTriggerExitAsync() : UniTask<Collider>
    + OnTriggerExitAsync(cancellationToken:CancellationToken) : UniTask<Collider>
}
interface IAsyncOnTriggerExit2DHandler {
}
class "AsyncTriggerHandler`1"<T> <<partial>> {
}
class AsyncTriggerExtensions <<static>> <<partial>> {
    + {static} GetAsyncTriggerExit2DTrigger(gameObject:GameObject) : AsyncTriggerExit2DTrigger
    + {static} GetAsyncTriggerExit2DTrigger(component:Component) : AsyncTriggerExit2DTrigger
}
class AsyncTriggerExit2DTrigger <<sealed>> {
    + GetOnTriggerExit2DAsyncHandler() : IAsyncOnTriggerExit2DHandler
    + GetOnTriggerExit2DAsyncHandler(cancellationToken:CancellationToken) : IAsyncOnTriggerExit2DHandler
    + OnTriggerExit2DAsync() : UniTask<Collider2D>
    + OnTriggerExit2DAsync(cancellationToken:CancellationToken) : UniTask<Collider2D>
}
interface IAsyncOnTriggerStayHandler {
}
class "AsyncTriggerHandler`1"<T> <<partial>> {
}
class AsyncTriggerExtensions <<static>> <<partial>> {
    + {static} GetAsyncTriggerStayTrigger(gameObject:GameObject) : AsyncTriggerStayTrigger
    + {static} GetAsyncTriggerStayTrigger(component:Component) : AsyncTriggerStayTrigger
}
class AsyncTriggerStayTrigger <<sealed>> {
    + GetOnTriggerStayAsyncHandler() : IAsyncOnTriggerStayHandler
    + GetOnTriggerStayAsyncHandler(cancellationToken:CancellationToken) : IAsyncOnTriggerStayHandler
    + OnTriggerStayAsync() : UniTask<Collider>
    + OnTriggerStayAsync(cancellationToken:CancellationToken) : UniTask<Collider>
}
interface IAsyncOnTriggerStay2DHandler {
}
class "AsyncTriggerHandler`1"<T> <<partial>> {
}
class AsyncTriggerExtensions <<static>> <<partial>> {
    + {static} GetAsyncTriggerStay2DTrigger(gameObject:GameObject) : AsyncTriggerStay2DTrigger
    + {static} GetAsyncTriggerStay2DTrigger(component:Component) : AsyncTriggerStay2DTrigger
}
class AsyncTriggerStay2DTrigger <<sealed>> {
    + GetOnTriggerStay2DAsyncHandler() : IAsyncOnTriggerStay2DHandler
    + GetOnTriggerStay2DAsyncHandler(cancellationToken:CancellationToken) : IAsyncOnTriggerStay2DHandler
    + OnTriggerStay2DAsync() : UniTask<Collider2D>
    + OnTriggerStay2DAsync(cancellationToken:CancellationToken) : UniTask<Collider2D>
}
interface IAsyncOnValidateHandler {
}
class "AsyncTriggerHandler`1"<T> <<partial>> {
}
class AsyncTriggerExtensions <<static>> <<partial>> {
    + {static} GetAsyncValidateTrigger(gameObject:GameObject) : AsyncValidateTrigger
    + {static} GetAsyncValidateTrigger(component:Component) : AsyncValidateTrigger
}
class AsyncValidateTrigger <<sealed>> {
    + GetOnValidateAsyncHandler() : IAsyncOnValidateHandler
    + GetOnValidateAsyncHandler(cancellationToken:CancellationToken) : IAsyncOnValidateHandler
    + OnValidateAsync() : UniTask
    + OnValidateAsync(cancellationToken:CancellationToken) : UniTask
}
interface IAsyncOnWillRenderObjectHandler {
}
class "AsyncTriggerHandler`1"<T> <<partial>> {
}
class AsyncTriggerExtensions <<static>> <<partial>> {
    + {static} GetAsyncWillRenderObjectTrigger(gameObject:GameObject) : AsyncWillRenderObjectTrigger
    + {static} GetAsyncWillRenderObjectTrigger(component:Component) : AsyncWillRenderObjectTrigger
}
class AsyncWillRenderObjectTrigger <<sealed>> {
    + GetOnWillRenderObjectAsyncHandler() : IAsyncOnWillRenderObjectHandler
    + GetOnWillRenderObjectAsyncHandler(cancellationToken:CancellationToken) : IAsyncOnWillRenderObjectHandler
    + OnWillRenderObjectAsync() : UniTask
    + OnWillRenderObjectAsync(cancellationToken:CancellationToken) : UniTask
}
interface IAsyncResetHandler {
}
class "AsyncTriggerHandler`1"<T> <<partial>> {
}
class AsyncTriggerExtensions <<static>> <<partial>> {
    + {static} GetAsyncResetTrigger(gameObject:GameObject) : AsyncResetTrigger
    + {static} GetAsyncResetTrigger(component:Component) : AsyncResetTrigger
}
class AsyncResetTrigger <<sealed>> {
    + GetResetAsyncHandler() : IAsyncResetHandler
    + GetResetAsyncHandler(cancellationToken:CancellationToken) : IAsyncResetHandler
    + ResetAsync() : UniTask
    + ResetAsync(cancellationToken:CancellationToken) : UniTask
}
interface IAsyncUpdateHandler {
}
class "AsyncTriggerHandler`1"<T> <<partial>> {
}
class AsyncTriggerExtensions <<static>> <<partial>> {
    + {static} GetAsyncUpdateTrigger(gameObject:GameObject) : AsyncUpdateTrigger
    + {static} GetAsyncUpdateTrigger(component:Component) : AsyncUpdateTrigger
}
class AsyncUpdateTrigger <<sealed>> {
    + GetUpdateAsyncHandler() : IAsyncUpdateHandler
    + GetUpdateAsyncHandler(cancellationToken:CancellationToken) : IAsyncUpdateHandler
    + UpdateAsync() : UniTask
    + UpdateAsync(cancellationToken:CancellationToken) : UniTask
}
interface IAsyncOnBeginDragHandler {
}
class "AsyncTriggerHandler`1"<T> <<partial>> {
}
class AsyncTriggerExtensions <<static>> <<partial>> {
    + {static} GetAsyncBeginDragTrigger(gameObject:GameObject) : AsyncBeginDragTrigger
    + {static} GetAsyncBeginDragTrigger(component:Component) : AsyncBeginDragTrigger
}
class AsyncBeginDragTrigger <<sealed>> {
    + GetOnBeginDragAsyncHandler() : IAsyncOnBeginDragHandler
    + GetOnBeginDragAsyncHandler(cancellationToken:CancellationToken) : IAsyncOnBeginDragHandler
    + OnBeginDragAsync() : UniTask<PointerEventData>
    + OnBeginDragAsync(cancellationToken:CancellationToken) : UniTask<PointerEventData>
}
interface IAsyncOnCancelHandler {
}
class "AsyncTriggerHandler`1"<T> <<partial>> {
}
class AsyncTriggerExtensions <<static>> <<partial>> {
    + {static} GetAsyncCancelTrigger(gameObject:GameObject) : AsyncCancelTrigger
    + {static} GetAsyncCancelTrigger(component:Component) : AsyncCancelTrigger
}
class AsyncCancelTrigger <<sealed>> {
    + GetOnCancelAsyncHandler() : IAsyncOnCancelHandler
    + GetOnCancelAsyncHandler(cancellationToken:CancellationToken) : IAsyncOnCancelHandler
    + OnCancelAsync() : UniTask<BaseEventData>
    + OnCancelAsync(cancellationToken:CancellationToken) : UniTask<BaseEventData>
}
interface IAsyncOnDeselectHandler {
}
class "AsyncTriggerHandler`1"<T> <<partial>> {
}
class AsyncTriggerExtensions <<static>> <<partial>> {
    + {static} GetAsyncDeselectTrigger(gameObject:GameObject) : AsyncDeselectTrigger
    + {static} GetAsyncDeselectTrigger(component:Component) : AsyncDeselectTrigger
}
class AsyncDeselectTrigger <<sealed>> {
    + GetOnDeselectAsyncHandler() : IAsyncOnDeselectHandler
    + GetOnDeselectAsyncHandler(cancellationToken:CancellationToken) : IAsyncOnDeselectHandler
    + OnDeselectAsync() : UniTask<BaseEventData>
    + OnDeselectAsync(cancellationToken:CancellationToken) : UniTask<BaseEventData>
}
interface IAsyncOnDragHandler {
}
class "AsyncTriggerHandler`1"<T> <<partial>> {
}
class AsyncTriggerExtensions <<static>> <<partial>> {
    + {static} GetAsyncDragTrigger(gameObject:GameObject) : AsyncDragTrigger
    + {static} GetAsyncDragTrigger(component:Component) : AsyncDragTrigger
}
class AsyncDragTrigger <<sealed>> {
    + GetOnDragAsyncHandler() : IAsyncOnDragHandler
    + GetOnDragAsyncHandler(cancellationToken:CancellationToken) : IAsyncOnDragHandler
    + OnDragAsync() : UniTask<PointerEventData>
    + OnDragAsync(cancellationToken:CancellationToken) : UniTask<PointerEventData>
}
interface IAsyncOnDropHandler {
}
class "AsyncTriggerHandler`1"<T> <<partial>> {
}
class AsyncTriggerExtensions <<static>> <<partial>> {
    + {static} GetAsyncDropTrigger(gameObject:GameObject) : AsyncDropTrigger
    + {static} GetAsyncDropTrigger(component:Component) : AsyncDropTrigger
}
class AsyncDropTrigger <<sealed>> {
    + GetOnDropAsyncHandler() : IAsyncOnDropHandler
    + GetOnDropAsyncHandler(cancellationToken:CancellationToken) : IAsyncOnDropHandler
    + OnDropAsync() : UniTask<PointerEventData>
    + OnDropAsync(cancellationToken:CancellationToken) : UniTask<PointerEventData>
}
interface IAsyncOnEndDragHandler {
}
class "AsyncTriggerHandler`1"<T> <<partial>> {
}
class AsyncTriggerExtensions <<static>> <<partial>> {
    + {static} GetAsyncEndDragTrigger(gameObject:GameObject) : AsyncEndDragTrigger
    + {static} GetAsyncEndDragTrigger(component:Component) : AsyncEndDragTrigger
}
class AsyncEndDragTrigger <<sealed>> {
    + GetOnEndDragAsyncHandler() : IAsyncOnEndDragHandler
    + GetOnEndDragAsyncHandler(cancellationToken:CancellationToken) : IAsyncOnEndDragHandler
    + OnEndDragAsync() : UniTask<PointerEventData>
    + OnEndDragAsync(cancellationToken:CancellationToken) : UniTask<PointerEventData>
}
interface IAsyncOnInitializePotentialDragHandler {
}
class "AsyncTriggerHandler`1"<T> <<partial>> {
}
class AsyncTriggerExtensions <<static>> <<partial>> {
    + {static} GetAsyncInitializePotentialDragTrigger(gameObject:GameObject) : AsyncInitializePotentialDragTrigger
    + {static} GetAsyncInitializePotentialDragTrigger(component:Component) : AsyncInitializePotentialDragTrigger
}
class AsyncInitializePotentialDragTrigger <<sealed>> {
    + GetOnInitializePotentialDragAsyncHandler() : IAsyncOnInitializePotentialDragHandler
    + GetOnInitializePotentialDragAsyncHandler(cancellationToken:CancellationToken) : IAsyncOnInitializePotentialDragHandler
    + OnInitializePotentialDragAsync() : UniTask<PointerEventData>
    + OnInitializePotentialDragAsync(cancellationToken:CancellationToken) : UniTask<PointerEventData>
}
interface IAsyncOnMoveHandler {
}
class "AsyncTriggerHandler`1"<T> <<partial>> {
}
class AsyncTriggerExtensions <<static>> <<partial>> {
    + {static} GetAsyncMoveTrigger(gameObject:GameObject) : AsyncMoveTrigger
    + {static} GetAsyncMoveTrigger(component:Component) : AsyncMoveTrigger
}
class AsyncMoveTrigger <<sealed>> {
    + GetOnMoveAsyncHandler() : IAsyncOnMoveHandler
    + GetOnMoveAsyncHandler(cancellationToken:CancellationToken) : IAsyncOnMoveHandler
    + OnMoveAsync() : UniTask<AxisEventData>
    + OnMoveAsync(cancellationToken:CancellationToken) : UniTask<AxisEventData>
}
interface IAsyncOnPointerClickHandler {
}
class "AsyncTriggerHandler`1"<T> <<partial>> {
}
class AsyncTriggerExtensions <<static>> <<partial>> {
    + {static} GetAsyncPointerClickTrigger(gameObject:GameObject) : AsyncPointerClickTrigger
    + {static} GetAsyncPointerClickTrigger(component:Component) : AsyncPointerClickTrigger
}
class AsyncPointerClickTrigger <<sealed>> {
    + GetOnPointerClickAsyncHandler() : IAsyncOnPointerClickHandler
    + GetOnPointerClickAsyncHandler(cancellationToken:CancellationToken) : IAsyncOnPointerClickHandler
    + OnPointerClickAsync() : UniTask<PointerEventData>
    + OnPointerClickAsync(cancellationToken:CancellationToken) : UniTask<PointerEventData>
}
interface IAsyncOnPointerDownHandler {
}
class "AsyncTriggerHandler`1"<T> <<partial>> {
}
class AsyncTriggerExtensions <<static>> <<partial>> {
    + {static} GetAsyncPointerDownTrigger(gameObject:GameObject) : AsyncPointerDownTrigger
    + {static} GetAsyncPointerDownTrigger(component:Component) : AsyncPointerDownTrigger
}
class AsyncPointerDownTrigger <<sealed>> {
    + GetOnPointerDownAsyncHandler() : IAsyncOnPointerDownHandler
    + GetOnPointerDownAsyncHandler(cancellationToken:CancellationToken) : IAsyncOnPointerDownHandler
    + OnPointerDownAsync() : UniTask<PointerEventData>
    + OnPointerDownAsync(cancellationToken:CancellationToken) : UniTask<PointerEventData>
}
interface IAsyncOnPointerEnterHandler {
}
class "AsyncTriggerHandler`1"<T> <<partial>> {
}
class AsyncTriggerExtensions <<static>> <<partial>> {
    + {static} GetAsyncPointerEnterTrigger(gameObject:GameObject) : AsyncPointerEnterTrigger
    + {static} GetAsyncPointerEnterTrigger(component:Component) : AsyncPointerEnterTrigger
}
class AsyncPointerEnterTrigger <<sealed>> {
    + GetOnPointerEnterAsyncHandler() : IAsyncOnPointerEnterHandler
    + GetOnPointerEnterAsyncHandler(cancellationToken:CancellationToken) : IAsyncOnPointerEnterHandler
    + OnPointerEnterAsync() : UniTask<PointerEventData>
    + OnPointerEnterAsync(cancellationToken:CancellationToken) : UniTask<PointerEventData>
}
interface IAsyncOnPointerExitHandler {
}
class "AsyncTriggerHandler`1"<T> <<partial>> {
}
class AsyncTriggerExtensions <<static>> <<partial>> {
    + {static} GetAsyncPointerExitTrigger(gameObject:GameObject) : AsyncPointerExitTrigger
    + {static} GetAsyncPointerExitTrigger(component:Component) : AsyncPointerExitTrigger
}
class AsyncPointerExitTrigger <<sealed>> {
    + GetOnPointerExitAsyncHandler() : IAsyncOnPointerExitHandler
    + GetOnPointerExitAsyncHandler(cancellationToken:CancellationToken) : IAsyncOnPointerExitHandler
    + OnPointerExitAsync() : UniTask<PointerEventData>
    + OnPointerExitAsync(cancellationToken:CancellationToken) : UniTask<PointerEventData>
}
interface IAsyncOnPointerUpHandler {
}
class "AsyncTriggerHandler`1"<T> <<partial>> {
}
class AsyncTriggerExtensions <<static>> <<partial>> {
    + {static} GetAsyncPointerUpTrigger(gameObject:GameObject) : AsyncPointerUpTrigger
    + {static} GetAsyncPointerUpTrigger(component:Component) : AsyncPointerUpTrigger
}
class AsyncPointerUpTrigger <<sealed>> {
    + GetOnPointerUpAsyncHandler() : IAsyncOnPointerUpHandler
    + GetOnPointerUpAsyncHandler(cancellationToken:CancellationToken) : IAsyncOnPointerUpHandler
    + OnPointerUpAsync() : UniTask<PointerEventData>
    + OnPointerUpAsync(cancellationToken:CancellationToken) : UniTask<PointerEventData>
}
interface IAsyncOnScrollHandler {
}
class "AsyncTriggerHandler`1"<T> <<partial>> {
}
class AsyncTriggerExtensions <<static>> <<partial>> {
    + {static} GetAsyncScrollTrigger(gameObject:GameObject) : AsyncScrollTrigger
    + {static} GetAsyncScrollTrigger(component:Component) : AsyncScrollTrigger
}
class AsyncScrollTrigger <<sealed>> {
    + GetOnScrollAsyncHandler() : IAsyncOnScrollHandler
    + GetOnScrollAsyncHandler(cancellationToken:CancellationToken) : IAsyncOnScrollHandler
    + OnScrollAsync() : UniTask<PointerEventData>
    + OnScrollAsync(cancellationToken:CancellationToken) : UniTask<PointerEventData>
}
interface IAsyncOnSelectHandler {
}
class "AsyncTriggerHandler`1"<T> <<partial>> {
}
class AsyncTriggerExtensions <<static>> <<partial>> {
    + {static} GetAsyncSelectTrigger(gameObject:GameObject) : AsyncSelectTrigger
    + {static} GetAsyncSelectTrigger(component:Component) : AsyncSelectTrigger
}
class AsyncSelectTrigger <<sealed>> {
    + GetOnSelectAsyncHandler() : IAsyncOnSelectHandler
    + GetOnSelectAsyncHandler(cancellationToken:CancellationToken) : IAsyncOnSelectHandler
    + OnSelectAsync() : UniTask<BaseEventData>
    + OnSelectAsync(cancellationToken:CancellationToken) : UniTask<BaseEventData>
}
interface IAsyncOnSubmitHandler {
}
class "AsyncTriggerHandler`1"<T> <<partial>> {
}
class AsyncTriggerExtensions <<static>> <<partial>> {
    + {static} GetAsyncSubmitTrigger(gameObject:GameObject) : AsyncSubmitTrigger
    + {static} GetAsyncSubmitTrigger(component:Component) : AsyncSubmitTrigger
}
class AsyncSubmitTrigger <<sealed>> {
    + GetOnSubmitAsyncHandler() : IAsyncOnSubmitHandler
    + GetOnSubmitAsyncHandler(cancellationToken:CancellationToken) : IAsyncOnSubmitHandler
    + OnSubmitAsync() : UniTask<BaseEventData>
    + OnSubmitAsync(cancellationToken:CancellationToken) : UniTask<BaseEventData>
}
interface IAsyncOnUpdateSelectedHandler {
}
class "AsyncTriggerHandler`1"<T> <<partial>> {
}
class AsyncTriggerExtensions <<static>> <<partial>> {
    + {static} GetAsyncUpdateSelectedTrigger(gameObject:GameObject) : AsyncUpdateSelectedTrigger
    + {static} GetAsyncUpdateSelectedTrigger(component:Component) : AsyncUpdateSelectedTrigger
}
class AsyncUpdateSelectedTrigger <<sealed>> {
    + GetOnUpdateSelectedAsyncHandler() : IAsyncOnUpdateSelectedHandler
    + GetOnUpdateSelectedAsyncHandler(cancellationToken:CancellationToken) : IAsyncOnUpdateSelectedHandler
    + OnUpdateSelectedAsync() : UniTask<BaseEventData>
    + OnUpdateSelectedAsync(cancellationToken:CancellationToken) : UniTask<BaseEventData>
}
class "AsyncTriggerBase`1"<T> {
}
IAsyncFixedUpdateHandler <|- - "AsyncTriggerHandler`1"
"AsyncTriggerBase`1" "<AsyncUnit>" <|- - AsyncFixedUpdateTrigger
IAsyncLateUpdateHandler <|- - "AsyncTriggerHandler`1"
"AsyncTriggerBase`1" "<AsyncUnit>" <|- - AsyncLateUpdateTrigger
IAsyncOnAnimatorIKHandler <|- - "AsyncTriggerHandler`1"
"AsyncTriggerBase`1" "<int>" <|- - AsyncAnimatorIKTrigger
IAsyncOnAnimatorMoveHandler <|- - "AsyncTriggerHandler`1"
"AsyncTriggerBase`1" "<AsyncUnit>" <|- - AsyncAnimatorMoveTrigger
IAsyncOnApplicationFocusHandler <|- - "AsyncTriggerHandler`1"
"AsyncTriggerBase`1" "<bool>" <|- - AsyncApplicationFocusTrigger
IAsyncOnApplicationPauseHandler <|- - "AsyncTriggerHandler`1"
"AsyncTriggerBase`1" "<bool>" <|- - AsyncApplicationPauseTrigger
IAsyncOnApplicationQuitHandler <|- - "AsyncTriggerHandler`1"
"AsyncTriggerBase`1" "<AsyncUnit>" <|- - AsyncApplicationQuitTrigger
IAsyncOnAudioFilterReadHandler <|- - "AsyncTriggerHandler`1"
"AsyncTriggerBase`1" "<(float[] data, int channels)>" <|- - AsyncAudioFilterReadTrigger
IAsyncOnBecameInvisibleHandler <|- - "AsyncTriggerHandler`1"
"AsyncTriggerBase`1" "<AsyncUnit>" <|- - AsyncBecameInvisibleTrigger
IAsyncOnBecameVisibleHandler <|- - "AsyncTriggerHandler`1"
"AsyncTriggerBase`1" "<AsyncUnit>" <|- - AsyncBecameVisibleTrigger
IAsyncOnBeforeTransformParentChangedHandler <|- - "AsyncTriggerHandler`1"
"AsyncTriggerBase`1" "<AsyncUnit>" <|- - AsyncBeforeTransformParentChangedTrigger
IAsyncOnCanvasGroupChangedHandler <|- - "AsyncTriggerHandler`1"
"AsyncTriggerBase`1" "<AsyncUnit>" <|- - AsyncOnCanvasGroupChangedTrigger
IAsyncOnCollisionEnterHandler <|- - "AsyncTriggerHandler`1"
"AsyncTriggerBase`1" "<Collision>" <|- - AsyncCollisionEnterTrigger
IAsyncOnCollisionEnter2DHandler <|- - "AsyncTriggerHandler`1"
"AsyncTriggerBase`1" "<Collision2D>" <|- - AsyncCollisionEnter2DTrigger
IAsyncOnCollisionExitHandler <|- - "AsyncTriggerHandler`1"
"AsyncTriggerBase`1" "<Collision>" <|- - AsyncCollisionExitTrigger
IAsyncOnCollisionExit2DHandler <|- - "AsyncTriggerHandler`1"
"AsyncTriggerBase`1" "<Collision2D>" <|- - AsyncCollisionExit2DTrigger
IAsyncOnCollisionStayHandler <|- - "AsyncTriggerHandler`1"
"AsyncTriggerBase`1" "<Collision>" <|- - AsyncCollisionStayTrigger
IAsyncOnCollisionStay2DHandler <|- - "AsyncTriggerHandler`1"
"AsyncTriggerBase`1" "<Collision2D>" <|- - AsyncCollisionStay2DTrigger
IAsyncOnControllerColliderHitHandler <|- - "AsyncTriggerHandler`1"
"AsyncTriggerBase`1" "<ControllerColliderHit>" <|- - AsyncControllerColliderHitTrigger
IAsyncOnDisableHandler <|- - "AsyncTriggerHandler`1"
"AsyncTriggerBase`1" "<AsyncUnit>" <|- - AsyncDisableTrigger
IAsyncOnDrawGizmosHandler <|- - "AsyncTriggerHandler`1"
"AsyncTriggerBase`1" "<AsyncUnit>" <|- - AsyncDrawGizmosTrigger
IAsyncOnDrawGizmosSelectedHandler <|- - "AsyncTriggerHandler`1"
"AsyncTriggerBase`1" "<AsyncUnit>" <|- - AsyncDrawGizmosSelectedTrigger
IAsyncOnEnableHandler <|- - "AsyncTriggerHandler`1"
"AsyncTriggerBase`1" "<AsyncUnit>" <|- - AsyncEnableTrigger
IAsyncOnGUIHandler <|- - "AsyncTriggerHandler`1"
"AsyncTriggerBase`1" "<AsyncUnit>" <|- - AsyncGUITrigger
IAsyncOnJointBreakHandler <|- - "AsyncTriggerHandler`1"
"AsyncTriggerBase`1" "<float>" <|- - AsyncJointBreakTrigger
IAsyncOnJointBreak2DHandler <|- - "AsyncTriggerHandler`1"
"AsyncTriggerBase`1" "<Joint2D>" <|- - AsyncJointBreak2DTrigger
IAsyncOnMouseDownHandler <|- - "AsyncTriggerHandler`1"
"AsyncTriggerBase`1" "<AsyncUnit>" <|- - AsyncMouseDownTrigger
IAsyncOnMouseDragHandler <|- - "AsyncTriggerHandler`1"
"AsyncTriggerBase`1" "<AsyncUnit>" <|- - AsyncMouseDragTrigger
IAsyncOnMouseEnterHandler <|- - "AsyncTriggerHandler`1"
"AsyncTriggerBase`1" "<AsyncUnit>" <|- - AsyncMouseEnterTrigger
IAsyncOnMouseExitHandler <|- - "AsyncTriggerHandler`1"
"AsyncTriggerBase`1" "<AsyncUnit>" <|- - AsyncMouseExitTrigger
IAsyncOnMouseOverHandler <|- - "AsyncTriggerHandler`1"
"AsyncTriggerBase`1" "<AsyncUnit>" <|- - AsyncMouseOverTrigger
IAsyncOnMouseUpHandler <|- - "AsyncTriggerHandler`1"
"AsyncTriggerBase`1" "<AsyncUnit>" <|- - AsyncMouseUpTrigger
IAsyncOnMouseUpAsButtonHandler <|- - "AsyncTriggerHandler`1"
"AsyncTriggerBase`1" "<AsyncUnit>" <|- - AsyncMouseUpAsButtonTrigger
IAsyncOnParticleCollisionHandler <|- - "AsyncTriggerHandler`1"
"AsyncTriggerBase`1" "<GameObject>" <|- - AsyncParticleCollisionTrigger
IAsyncOnParticleSystemStoppedHandler <|- - "AsyncTriggerHandler`1"
"AsyncTriggerBase`1" "<AsyncUnit>" <|- - AsyncParticleSystemStoppedTrigger
IAsyncOnParticleTriggerHandler <|- - "AsyncTriggerHandler`1"
"AsyncTriggerBase`1" "<AsyncUnit>" <|- - AsyncParticleTriggerTrigger
IAsyncOnPostRenderHandler <|- - "AsyncTriggerHandler`1"
"AsyncTriggerBase`1" "<AsyncUnit>" <|- - AsyncPostRenderTrigger
IAsyncOnPreCullHandler <|- - "AsyncTriggerHandler`1"
"AsyncTriggerBase`1" "<AsyncUnit>" <|- - AsyncPreCullTrigger
IAsyncOnPreRenderHandler <|- - "AsyncTriggerHandler`1"
"AsyncTriggerBase`1" "<AsyncUnit>" <|- - AsyncPreRenderTrigger
IAsyncOnRectTransformDimensionsChangeHandler <|- - "AsyncTriggerHandler`1"
"AsyncTriggerBase`1" "<AsyncUnit>" <|- - AsyncRectTransformDimensionsChangeTrigger
IAsyncOnRectTransformRemovedHandler <|- - "AsyncTriggerHandler`1"
"AsyncTriggerBase`1" "<AsyncUnit>" <|- - AsyncRectTransformRemovedTrigger
IAsyncOnRenderImageHandler <|- - "AsyncTriggerHandler`1"
"AsyncTriggerBase`1" "<(RenderTexture source, RenderTexture destination)>" <|- - AsyncRenderImageTrigger
IAsyncOnRenderObjectHandler <|- - "AsyncTriggerHandler`1"
"AsyncTriggerBase`1" "<AsyncUnit>" <|- - AsyncRenderObjectTrigger
IAsyncOnServerInitializedHandler <|- - "AsyncTriggerHandler`1"
"AsyncTriggerBase`1" "<AsyncUnit>" <|- - AsyncServerInitializedTrigger
IAsyncOnTransformChildrenChangedHandler <|- - "AsyncTriggerHandler`1"
"AsyncTriggerBase`1" "<AsyncUnit>" <|- - AsyncTransformChildrenChangedTrigger
IAsyncOnTransformParentChangedHandler <|- - "AsyncTriggerHandler`1"
"AsyncTriggerBase`1" "<AsyncUnit>" <|- - AsyncTransformParentChangedTrigger
IAsyncOnTriggerEnterHandler <|- - "AsyncTriggerHandler`1"
"AsyncTriggerBase`1" "<Collider>" <|- - AsyncTriggerEnterTrigger
IAsyncOnTriggerEnter2DHandler <|- - "AsyncTriggerHandler`1"
"AsyncTriggerBase`1" "<Collider2D>" <|- - AsyncTriggerEnter2DTrigger
IAsyncOnTriggerExitHandler <|- - "AsyncTriggerHandler`1"
"AsyncTriggerBase`1" "<Collider>" <|- - AsyncTriggerExitTrigger
IAsyncOnTriggerExit2DHandler <|- - "AsyncTriggerHandler`1"
"AsyncTriggerBase`1" "<Collider2D>" <|- - AsyncTriggerExit2DTrigger
IAsyncOnTriggerStayHandler <|- - "AsyncTriggerHandler`1"
"AsyncTriggerBase`1" "<Collider>" <|- - AsyncTriggerStayTrigger
IAsyncOnTriggerStay2DHandler <|- - "AsyncTriggerHandler`1"
"AsyncTriggerBase`1" "<Collider2D>" <|- - AsyncTriggerStay2DTrigger
IAsyncOnValidateHandler <|- - "AsyncTriggerHandler`1"
"AsyncTriggerBase`1" "<AsyncUnit>" <|- - AsyncValidateTrigger
IAsyncOnWillRenderObjectHandler <|- - "AsyncTriggerHandler`1"
"AsyncTriggerBase`1" "<AsyncUnit>" <|- - AsyncWillRenderObjectTrigger
IAsyncResetHandler <|- - "AsyncTriggerHandler`1"
"AsyncTriggerBase`1" "<AsyncUnit>" <|- - AsyncResetTrigger
IAsyncUpdateHandler <|- - "AsyncTriggerHandler`1"
"AsyncTriggerBase`1" "<AsyncUnit>" <|- - AsyncUpdateTrigger
IAsyncOnBeginDragHandler <|- - "AsyncTriggerHandler`1"
"AsyncTriggerBase`1" "<PointerEventData>" <|- - AsyncBeginDragTrigger
IBeginDragHandler <|- - AsyncBeginDragTrigger
IAsyncOnCancelHandler <|- - "AsyncTriggerHandler`1"
"AsyncTriggerBase`1" "<BaseEventData>" <|- - AsyncCancelTrigger
ICancelHandler <|- - AsyncCancelTrigger
IAsyncOnDeselectHandler <|- - "AsyncTriggerHandler`1"
"AsyncTriggerBase`1" "<BaseEventData>" <|- - AsyncDeselectTrigger
IDeselectHandler <|- - AsyncDeselectTrigger
IAsyncOnDragHandler <|- - "AsyncTriggerHandler`1"
"AsyncTriggerBase`1" "<PointerEventData>" <|- - AsyncDragTrigger
IDragHandler <|- - AsyncDragTrigger
IAsyncOnDropHandler <|- - "AsyncTriggerHandler`1"
"AsyncTriggerBase`1" "<PointerEventData>" <|- - AsyncDropTrigger
IDropHandler <|- - AsyncDropTrigger
IAsyncOnEndDragHandler <|- - "AsyncTriggerHandler`1"
"AsyncTriggerBase`1" "<PointerEventData>" <|- - AsyncEndDragTrigger
IEndDragHandler <|- - AsyncEndDragTrigger
IAsyncOnInitializePotentialDragHandler <|- - "AsyncTriggerHandler`1"
"AsyncTriggerBase`1" "<PointerEventData>" <|- - AsyncInitializePotentialDragTrigger
IInitializePotentialDragHandler <|- - AsyncInitializePotentialDragTrigger
IAsyncOnMoveHandler <|- - "AsyncTriggerHandler`1"
"AsyncTriggerBase`1" "<AxisEventData>" <|- - AsyncMoveTrigger
IMoveHandler <|- - AsyncMoveTrigger
IAsyncOnPointerClickHandler <|- - "AsyncTriggerHandler`1"
"AsyncTriggerBase`1" "<PointerEventData>" <|- - AsyncPointerClickTrigger
IPointerClickHandler <|- - AsyncPointerClickTrigger
IAsyncOnPointerDownHandler <|- - "AsyncTriggerHandler`1"
"AsyncTriggerBase`1" "<PointerEventData>" <|- - AsyncPointerDownTrigger
IPointerDownHandler <|- - AsyncPointerDownTrigger
IAsyncOnPointerEnterHandler <|- - "AsyncTriggerHandler`1"
"AsyncTriggerBase`1" "<PointerEventData>" <|- - AsyncPointerEnterTrigger
IPointerEnterHandler <|- - AsyncPointerEnterTrigger
IAsyncOnPointerExitHandler <|- - "AsyncTriggerHandler`1"
"AsyncTriggerBase`1" "<PointerEventData>" <|- - AsyncPointerExitTrigger
IPointerExitHandler <|- - AsyncPointerExitTrigger
IAsyncOnPointerUpHandler <|- - "AsyncTriggerHandler`1"
"AsyncTriggerBase`1" "<PointerEventData>" <|- - AsyncPointerUpTrigger
IPointerUpHandler <|- - AsyncPointerUpTrigger
IAsyncOnScrollHandler <|- - "AsyncTriggerHandler`1"
"AsyncTriggerBase`1" "<PointerEventData>" <|- - AsyncScrollTrigger
IScrollHandler <|- - AsyncScrollTrigger
IAsyncOnSelectHandler <|- - "AsyncTriggerHandler`1"
"AsyncTriggerBase`1" "<BaseEventData>" <|- - AsyncSelectTrigger
ISelectHandler <|- - AsyncSelectTrigger
IAsyncOnSubmitHandler <|- - "AsyncTriggerHandler`1"
"AsyncTriggerBase`1" "<BaseEventData>" <|- - AsyncSubmitTrigger
ISubmitHandler <|- - AsyncSubmitTrigger
IAsyncOnUpdateSelectedHandler <|- - "AsyncTriggerHandler`1"
"AsyncTriggerBase`1" "<BaseEventData>" <|- - AsyncUpdateSelectedTrigger
IUpdateSelectedHandler <|- - AsyncUpdateSelectedTrigger
!include .\\Library\PackageCache\com.unity.burst@1.8.4\Runtime\bee~\Burst.bee.puml

PlantUML version 1.2022.7(Tue Aug 23 02:01:30 KST 2022)
(GPL source distribution)
Java Runtime: Java(TM) SE Runtime Environment
JVM: Java HotSpot(TM) 64-Bit Server VM
Default Encoding: MS949
Language: ko
Country: KR
--></g></svg>